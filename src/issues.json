[
  {
    "Issue Id": "ADR_8628-119",
    "Summary": "Links do not visually or programmatically indicate that they open in a new window",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nLinks must be self-explanatory or be disambiguated by their surrounding context.\n\nThere are links that open in a new window. The links do not visually or programmatically indicate that they open in a new window. This may disadvantage several user groups. For example, it may be disorientating for those that find navigating the web cognitively challenging, as well as keyboard and screen reader users.\n\nThis is not a strict WCAG failure. However, HSBC DCE have identified that this issue fails the HSBC Accessibility Framework. \n\n## \n\nThis can be seen on the cookie notice page. On the \"Privacy notice\" link under the \"Cookies that support marketing\" and \"Cookies and your privacy\" heading.  \n\n![Privacy notice link does not indicate that it opens in a new window](image1.png)\n![Another privacy notice link does not indicate that it opens in a new window](image2.png)\n![Markup of privacy notice link](image3.png)\n\n## \n1. Observe that the links open in a new window.\n2. Inspect the links and review the DOM.\n3. Observe that the behaviour is not visually or programmatically indicated\n\n## \n\nMake sure that the links communicate that they open a new window. \n\nMake sure that this information is available to all users. It is not acceptable to have the link warn users through just hidden text. That is because hidden text is not immediately available to all users. Where possible, update the link text to communicate that they links open in a new window. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings (opens in a new window)</a>\n```\n\nWhen this is not possible, provide icons that communicate the same information. Make sure that it is alternative text. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings <img src=\"windowIcon\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [WCAG - G201 Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html), [NC State University - Links and new windows](https://accessibility.oit.ncsu.edu/it-accessibility-at-nc-state/developers/accessibility-handbook/mouse-and-keyboard-events/links/links-and-new-windows/), [Yale - Web Accessibility - Links](https://usability.yale.edu/web-accessibility/articles/links), [University of Washington - Using Meaningful Link Text](https://www.washington.edu/accessibility/links/), [A11y Project - Valid and Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8628-122",
    "Summary": "Elements have invalid nesting",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors.  More specifically, there are elements with invalid nesting. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on the cookie notice page.\n\n![7 accessibility issues flagged by nu validator](image1.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include elements with duplicate attributes.\n\n## \n\nMake sure that the nesting of elements is allowed by the HTML specification. For example:\n\n```\n// you cannot nest interactive items within each other\n// in this example, the issue is created by the link within the button\n\n<button><a href=\"...\">Submit</a></button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8628-139",
    "Summary": "Focus order includes off-screen interactive elements",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere are off-screen interactive elements that receive focus. This may particularly disadvantage keyboard users who often navigate by tabbing through the interactive elements. That invisible interactive elements receive focus may confuse or frustrate users. \n\n## \n\nThis can be seen on the Manage Business page. On the link element before the buttons under the \"Business contact details\", \"Marketing preference\", \"Online forms\" and \"Chat assistant\" headings. The link element is empty and not on screen, but there is an anchor tag with a `href` in the DOM.\n\n![Off screen element receiving keyboard focus](image1.png)\n\n![Markup of link](image2.png)\n\n## \n1. Using just your keyboard, tab through the above.\n2. Observe that focus goes onto elements that are not visible on the page. \n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in meaningful order. \n\nIn this case, make sure that off-screen elements do not receive keyboard focus.\n\nIf they are not meant to be interactive at any point, remove the elements from the DOM, comment them out, or remove them from the focus order. If they are meant to be interactive at some point, make sure that they are excluded from the focus order and included in the focus as appropriate.\n\nRemoving elements from the focus order can be achieved with the HTML `hidden` or CSS `display:none`. Both will hide the element from all users. This same can be programmatically achieved by using both `aria-hidden=\"true\"` and `tabindex=\"-1\"` on the same element. For example:\n\n```\n<a href=\"...\" hidden> ... </button>\n<a href=\"...\" class=\"visuallyOffScreen\" aria-hidden=\"true\" tabindex=\"-1\"> ... </a>\n```\n\nHowever, note that `aria-hidden=\"true\"` and `tabindex=\"-1\"` will not visually remove elements from the page. \n\nRemoving these attributes will re-insert the elements into the focus order based on their location in the DOM, allowing users to navigate onto them with a keyboard. Make sure that this is done as appropriate, such as when the user toggles a parent control that shows and hides these interactive elements. \n\nFor more information, see [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex), [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), and [MDN - hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8628-140",
    "Summary": "Elements have duplicate ids",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. More specifically, there are elements with the duplicate ids. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on the Manage Business page, where the `id` value `\"tabFocus\"` is used more than once.\n\n![Elements have duplicate ids](image1.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note that the errors include elements with duplicate ids.\n\n## \n\nMake sure that elements have a unique id. For example: \n\n```\n// these elements have unique id values\n\n<button id=\"accountAddCurrent\">Add New Current Account</button>\n<button id=\"accountAddSavings\">Add New Savings Account</button>\n\n// these elements have duplicate id values\n\n<button id=\"accountAdd\">Add New Current Account</button>\n<button id=\"accountAdd\">Add New Savings Account</button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8628-121",
    "Summary": "Anchor tags with no href do not receive keyboard focus",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Link",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements must be entirely compatible with a keyboard. \n\nUsers should never need to use a mouse. Otherwise, screen reader, keyboard, and switch users, may be unable to control the interactive element. There are anchor tags without `href` attributes that that do not receive focus when tabbing through the page. As a result, they cannot be operated with a keyboard. \n\n## \n\nThis can be seen on the cookie notice page. On the \"Back to top\" link in the footer. \n\n![Back to footer link does not receive keyboard focus](image1.png)\n![Link does not have href attribute](image2.png)\n\n## \n1. Observe the anchor tags.\n2. Attempt to navigate onto it with a keyboard using Tab. \n3. Observe that the links does not receive keyboard focus.\n4. Inspect the links and review the DOM. \n5. Observe that the links do not have a `href` attribute.\n\n## \n\nMake sure that interactive elements can be navigated onto with a keyboard. In this case, make sure that anchor tags have `href` attributes that point to their destination. When anchor tags do not have a `href` attributes, browsers do not define them as keyboard operable links. For example:\n\n```\n<a href=\"https://www.example.com\">Example Homepage</a>\n```\n\nIf this is not possible, you can manually add the link role with `role=\"link\"` and add them to the focus order with `tabindex=\"0\"`. You will also need to use event listeners to make sure that the custom link responds to Space and Return, such as `keydown`. For example:\n\n```\n<a role=\"link\" tabindex=\"0\">Example Homepage</a>\n```\n\nThat said, you may wish to convert the element into a button. If the element performs an action, rather than loading a new page, it is more semantically correct to have these as buttons. This is not a strict WCAG requirement, but it will improve the usability of the components. For example:\n\n```\n<button>Action</button> \n<span tabindex=\"0\" role=\"button\">Action</span>\n```\n\nFor more information, see [MDN - Keyboard Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex), [Yale - Web Accessibility - Links](https://usability.yale.edu/web-accessibility/articles/links), [University of Washington - Using Meaningful Link Text](https://www.washington.edu/accessibility/links/), and [A11y Project - Valid and Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-219",
    "Summary": "Moving in - Loading state not exposed to assistive technology",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "When the \"Confirm your new tariff\" form is submitted after reviewing the changes to the tariff, the confirm button's text is dynamically updated to \"Loading...\". However, this loading status is not exposed to assistive technology.\n\nOn iOS, VoiceOver announces the change in button label. However this information is not picked up by NVDA or JAWS. This has been raised as a Low Priority issue as the loading is usually instant. \n\n## \n\nThis can be seen on the Moving in the journey, on the \"Confirm your new tariff\" form. \n \n![loading status indicator](image.png) \n![loading status indicator is not programmatically identified](image1.png)\n\n![Button label is updated when loading](image2.png)\n![VoiceOver announces loading indicator](image3.png)\n\n## \n1. navigate to the confirm button with a screen reader and activate it \n2. notice that a loading state is shown but is not automatically announced\n\n## \n\nUse a polite live region to expose the loading state to assistive technologies. \n\nYou can put the live region inside of the button and dynamically update it when the button is pressed. You may wish to only do this after a short delay to the loading (e.g. 3-5 seconds) to avoid the live region being obnoxious for users when the loading is instantly. For example:\n\n```\n<button>\n<!-- this text is there by default, it is removed when the element is activated -->\nConfirm\n<!-- this internal container is dynamically updated when the button is pressed -->\n<span role=\"status\">\n</span>\n</button>\n```\n\nNote that the live region must be present on the page at page load and typically empty. Dynamically adding the status message will notify assistive technologies of the change. For more information, see [MDN - Using the status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-213",
    "Summary": "Multiple pages - Page title does not update",
    "Success Criteria": "2.4.2: Page Titled [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nPage title does not update to reflect form step transition between stages of the Move In journey. \n\n## \n\nThis can be seen on all pages of the Move In journey except the Thank You page (still to be tested):\n\n* Entry page\n* Post code entry\n* Personal details\n* Tariff set up\n* Set up DD / Bank Details\n* Review\n\nThe page title remains \"Account Management | Move In\".\n\n![Page title not updated to the tariff set up](image.png)\n\n## \n1. navigate onto the above page\n2. note the inappropriate page title\n\n## \n\nEnsure that pages have accurate page titles.\n\nWith single page applications, if you thoroughly update content and functionality, the page title needs to be dynamically updated, as well. This can be done in scripting using `document.title = \"Account management | Tariff set up\";`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-205",
    "Summary": "Entry page - SVG may receive keyboard focus in older browsers",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nSVG may receive keyboard focus when using older browsers such as IE11. \n\n## \n\nThis can be seen on the entry page modal dialog. On the list item tick graphic. \n\n![Tick SVG on modal](image.png)\n![Markup of the svg](image1.png)\n\n## \n1. open the page using IE11\n2. tab through the page and note that the SVGs receive focus.\n\n## \n\nAdd the `focusable=\"false\"` and `aria-hidden` attribute on the SVG. For example:\n\n```\n...\n<svg aria-hidden=\"true\" focusable-\"false\">\n...\n</svg>\n...\n```\n\nFor more information, see [MDN - using the aria hidden attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute) and [StackOverflow - Prevent SVG elements from gaining focus](https://stackoverflow.com/questions/29393144/how-to-prevent-svg-elements-from-gaining-focus-with-tabs-in-ie11).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-211",
    "Summary": "Multiple pages - Disclosures do not programmatically indicate state",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Accordion or Disclosure",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The accordions are not marked up with an expanded state. \n\n## \n\nThis can be seen on the tariff selection page and the Review page with the \"show rates and charges\" disclosures. \n\n![Tariff accordion without expanded state](image.png)\n![Markup of the accordion](image1.png)\n\n## \n1. visually note that the elements expand and collapse \n2. inspect the element and review the DOM.\n3. note that the above behaviour is not programmatically determined. \n\n## \n\nMark up the accordion using the `aria-expanded` to expose the expanded state to assistive technology users. Update the value to `true` or `false` accordingly when the accordion is expanded or collapsed. \n\nFor more information, see [MDN - button role aria-expanded](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role) and [W3 - Accordion example](https://www.w3.org/TR/wai-aria-practices-1.1/examples/accordion/accordion.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-207",
    "Summary": "Multiple pages - Text does not contrast sufficiently",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nCertain colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold, or rather 24px or 18.5px). Users without accurate perception of colour or limited vision may struggle to perceive the content\n\n## \n\nThis can be seen on the entry page - get in touch modal dialog. \n\nThe `hi@eonnext.com` text has a colour contrast ratio of 3.4:1 against the background with a text size of 22px. \n\n![eonnext text that lacks colour contrast](image.png)\n\nThis can also be seen on the entry page. The \"Yes I agree\" button lacks sufficient colour contrast\n\n![\"Yes I agree\" button lacks colour contrast](image2.png)\n\nThis can also be seen on the personal details page with the error messages below the input fields. \n\n![Error message text that lacks colour contrast](image1.png)\n\nThis can be seen on the Set up DD page (Step 4) and the Review page (Step 5) with the error message text and button labels.\n\n![error message text has insufficient contrast for regular size text (16px)](image3.png)\n![button text has insufficient contrast for regular size text (18px)](image4.png)\n## \n1. navigate onto the pages affected\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. The text should have a colour contrast ratio of 4.5:1 for \"regular\" sized text and 3:1 for large scale. Large scale text is defined as 18pt or 14pt bold (the equivalent of 24px or 19px bold). For example, on the `hi@eonntext.com` text, you can increase the contrast between the two colours, or increase the text size to 24px.\n\nThe colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-208",
    "Summary": "Personal details - autocomplete attribute not marked up",
    "Success Criteria": "1.3.5: Identify Input Purpose [AA]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Motor, Cognitive",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nInput fields must use the `autocomplete` attribute when collecting certain personal information about the user. This enables browsers to auto-fill commonly requested information. Fields are not using this attribute. There are fields that do not use the `autocomplete` attribute. \n \n## \n\nThis can be seen on the Personal details page. \n\n![Step 1 - Postcode input field without autocomplete attribute](image2.png)\n![Markup of postcode input field](image3.png)\n![Step 2- Input fields without autocomplete attribute](image.png)\n![Markup of first name input field without autocomplete attribute](image1.png)\n\n## \n1. Inspect the mark-up for the relevant input fields.\n2. Note that they do not use the relevant autocomplete attribute\n\n## \n\nUse the `autocomplete` attribute with an appropriate value. For example, a last name field can be marked up as:\n\n```\n<input type=\"text\" autocomplete=\"family-name\" ...>\n```\n\nFor a list of autocomplete attributes that need to be used where relevant see [W3 - Input Purposes](https://www.w3.org/TR/WCAG21/#input-purposes).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6343-212",
    "Summary": "Personal details - Radio buttons are not grouped",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. The radio buttons are not grouped programmatically. \n\n## \n\nThis can be seen on the personal details page. On the \"Did you move in on 1st August 2020?\" radio buttons. \n\n![Radio buttons are not grouped](image.png)\n![Markup of radio buttons](image1.png)\n\n## \n1. navigate to the fieldset with a screen reader\n2. note that the relationship is not communicated \n\n## \nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Use `<fieldset>` for grouping related form elements and `<legend>` for its heading. \n\nFor example: \n\n```\n<fieldset>\n<legend>Did you move in on 1st August 2020?</legend>\n  <div>\n    <input type=\"radio\"  id=\"label-yes\" value=\"txt\" checked>\n    <label for=\"label-yes\">Yes</label>\n  </div>\n    ...\n</fieldset>\n```\n\nFor more information, see [W3C - Form grouping](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7840-9",
    "Summary": "Decorative image has redundent alt text",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nWe have classed the image as decorative as they do not communicate any unique or meaningful information, that isn't already communicated by surrounding text. \n\n## \n\nThis can be seen on pages 1 and 2. On the generate token instruction.\n\n![Generate token instruction](image2.png)\n![Markup of the token image](image1.png)\n\n## \n1. inspect the non-text content.\n2. observe that it has a redundant alt text.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Decorative images that do not convey meaning or unique information need an empty alt attribute. For example:\n\n```\n<img src=\"spacer.png\" alt=\"\">\n```\n\nFor more information, see [Web Accessibility Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7840-5",
    "Summary": "Parsing errors from invalid nesting of elements",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors due to elements with invalid nesting. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility. \n\nThis has been raised as an additional issue as it is not required for conformance with HSBC accessibility framework. \n\n## \n\nThis can be found on page 3. \n\n![Parsing error flagged by Nu validator](image1.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include elements with duplicate attributes.\n\n## \n\nMake sure that the nesting of elements is allowed by the HTML specification. For example:\n\n```\n// you cannot nest interactive items within each other\n// in this example, the issue is created by the link within the button\n\n<button><a href=\"...\">Submit</a></button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7840-1",
    "Summary": "Background elements exposed to assistive technology",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom.  They will also not expect to navigate onto visually inactive elements. The current focus order is illogical.\n\nWhen the Terms and Conditions modal is open, the background elements can be accessed with a screen readers. This may particularly disadvantage these users. That the background content can be accessed may make the page difficult to understand and interact with.\n\n## \n\nThis can be seen on page 3 with the \"MyDeal\" modal. \n\n![Terms and conditions modal dialog](t&c modal.png)\n\n## \n1. Trigger the modal with a screen reader on\n2. Use the up arrow key to navigate.\n3. Observe that background elements receive focus.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in a meaningful order.\n\nIn this case, when the modal dialog is open, make sure that keyboard focus is temporarily restricted to the dialog. This can be done with the following techniques.\n\n* Send the focus to the first element on the modal container. This can be done using the JavaScript `.focus()` method.\n* Hide all of the other content of the page with `aria-hidden=\"true\"`.\n* Remove the interactive elements in the background from the focus order with `tabindex=\"-1\"`.\n* Revert the above when the modal is closed. Removing the `aria-hidden` and `tabindex` properties.\n* When the dialog is dismissed, use the `.focus()` method to set focus back onto the element that opened it.\n\nThe use of `aria-hidden` and `tabindex` can be supplemented with an inert polyfill.\n\nFor examples, see [WAI ARIA - Dialog Example](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html), [GitHub - WICG - Inert](https://github.com/WICG/inert), and [inert-polyfill](https://github.com/GoogleChrome/inert-polyfill).\n\nFor more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), [Google Developer - DOM Order Matters](https://developers.google.com/web/fundamentals/accessibility/focus/dom-order-matters), and [Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7744-49",
    "Summary": "Expanding element do not have a role",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There are links that do not have an `href` attribute. This means that they are not identified by the browsers as a link.\n\n## \n\nIn the page 20 (FX Payments - Accounts), page 21 (FX Payments - Paired payments only) and page 22 (Paired payments modal) the expandable elements do not have a role\n\n![Expand link](image.png)\n![Markup of an expand link without link role](image1.png)\n \n## \n1. navigate onto the links \n2. inspect them \n3. note that the links do not have an `href` attribute \n\n## \n\nThese element perform an action instead of navigating the user onto a new page. For that reason, we recommend using a button. For example:\n\n```\n<!-- native button -->\n<button class=\"expandArrowIcon\" aria-expanded=\"false\" aria-labelledby=\"...\" ...></button>\n\n<!-- custom button -->\n<div tabindex=\"0\" role=\"button\" class=\"expandArrowIcon\" aria-expanded=\"false\" aria-labelledby=\"...\" ...></div>\n```\n\nFor more information, see [MDN - button element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) and [WAI-ARIA Practices - Button Examples](https://www.w3.org/TR/wai-aria-practices-1.1/examples/button/button.html). If this is not possible, add a `href` attribute or use `role=\"link\"`, although this solution is not preferable. For more information, see [a11y Project - valid and accessible links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7744-48",
    "Summary": "Expandable elements do not have accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. Expandable elements do not have an accessible name \n\n## \n\nIn the page 20 (FX Payments - Accounts), page 21 (FX Payments - Paired payments only) and page 22 (Paired payments modal) the expandable elements do not have accessible names. \n\n![Expand link](image.png)\n![Markup of an expand link without accessible name defined](image1.png)\n\n## \n1. navigate onto the expand links mentioned \n2. inspect it, or use a screen reader and tab onto it \n3. note that the expand link does not have an accessible name \n\n## \n\nEnsure that the element has an accessible name. We recommend using `aria-labelledby`.  With this, you can link one or more reference to other cells in the row. These should be cells that have unique identifiers or references. \n\n```\n<button aria-expanded=\"false\" aria-labelledby=\"RefOne RefTwo\" ...>\n...\n<td><span id=\"refOne\">HSBC Evolve</span></td>\n...\n<td><span id=\"refTwo\">Mortage Payment</span></td>\n```\n\nAnother option would be using `aria-label` on the button.  For more information, see [MDN - Using the aria-labelledby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute) and [WAI - Labelling controls](https://www.w3.org/WAI/tutorials/forms/labels/)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-430",
    "Summary": "UK - M2NMI - Links do not visually indicate that they open in a new window",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nLinks must be self-explanatory or be disambiguated by their surrounding context.\n\nThere are links that open in a new window. The links do not visually indicate that they open in a new window. This may disadvantage several user groups. For example, it may be disorientating for those that find navigating the web cognitively challenging, as well as keyboard users.\n\nThis is not a strict WCAG failure. However, HSBC DCE have identified that this issue fails the HSBC Accessibility Framework. \n\n## \n\nThis can be seen on the UK - M2NMI page. On the currency cut-off time link at the bottom of the page. \n\n![Link without visual indication that it opens in a new window](image.png)\n![Markup of link](image1.png)\n\n## \n1. Observe that the links open in a new window.\n2. Inspect the links and review the DOM.\n3. Observe that the behaviour is not visually indicated\n\n## \n\nMake sure that the links communicate that they open a new window. \n\nMake sure that this information is available to all users. It is not acceptable to have the link warn users through just hidden text. That is because hidden text is not immediately available to all users. Where possible, update the link text to communicate that they links open in a new window. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings (opens in a new window)</a>\n```\n\nWhen this is not possible, provide icons that communicate the same information. Make sure that it is alternative text. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings <img src=\"windowIcon\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [WCAG - G201 Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html), [NC State University - Links and new windows](https://accessibility.oit.ncsu.edu/it-accessibility-at-nc-state/developers/accessibility-handbook/mouse-and-keyboard-events/links/links-and-new-windows/), [Yale - Web Accessibility - Links](https://usability.yale.edu/web-accessibility/articles/links), [University of Washington - Using Meaningful Link Text](https://www.washington.edu/accessibility/links/), [A11y Project - Valid and Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-341",
    "Summary": "UK - M2NMD - ECW - Links do not indicate that they open in a new window",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within the context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nLinks that open a new window do not make this behaviour known to all users.\n\n## \n\nThis can be found on the UK - M2NMD - ECW page. \n \nOn the \"Fraud Centre\" and \"fca.org\" link. \n \n![Fraud Centre link opens in another window](image3.png)\n![Markup of fraud centre link](image.png)\n![Markup of fca link](image2.png)\n \n## \n1. inspect the above link\n2. note that there is nothing that communications that it opens in a new window\n\n## \n\nThe link text should be made obvious. For example, For example: \n\n```\n<a href=\"#\">Fraud Centre (opens in a new window)</a>. \n```\n\nAlternatively, you could use an icon with an alt text. For example:\n\n```\n<a href=\"#\">Find out more<img src=\"...\" alt=\"opens in a new window\"></a>\n```",
    "Votes": 0
  },
  {
    "Issue Id": "3804-281",
    "Summary": "UK - Links do not indicate that they open in a new window",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within the context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nLinks that open a new window do not make this behaviour known to all users.\n\n## \n\nThis occurs on:\n\n* UK - Transaction Selection\n* UK - M2NMI page\n\n![Find out more link opens in another window](image1.png)\n\n![Markup of the find more link](image.png)\n\n## \n1. inspect the above link\n2. note that there is nothing that communications that it opens in a new window\n\n## \n\nThe link text should be made obvious. For example:\n\n```\n <a href=\"...\">Find out more (opens in a new window)</a>\n```\n\nAlternatively, you could use an icon with an alt text. For example:\n\n```\n<a href=\"...\">Find out more<img src=\"...\" alt=\"opens in a new window\"></a>\n```",
    "Votes": 0
  },
  {
    "Issue Id": "3804-279",
    "Summary": "Page titles are not descriptive",
    "Success Criteria": "2.4.2: Page Titled [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nGood page titles have several benefits. For example, when pages load, screen readers announce page titles. It is used to orientate such users — communicating the nature of the loaded page. All users use page titles in a similar fashion, and benefit from unique and helpful page titles.\n\nThe page titles are not descriptive for \"Move money\" steps. \n\n## \n\nThis occurs on:\n* UK – M2ND – Non HSBC Inline – Add payee, on all of the pages for  Move money process. \n* UK - M2MD - All pages in the send money M2MDOM journey. \n\n![Markup for page title](image.png)\n\n## \n1. navigate onto the above pages\n2. note the inappropriate page titles\n\n## \n\nEnsure that pages have unique and helpful page titles.\n\nThis can be done with a `<title>` in the `<head>` section. Consider a page name, page category, site name format. For example: `<title>Move Money Existing Payee | Banking | HSBC</title>`. Whatever format you use, use it consistently throughout. \n\nWith single page applications, if you thoroughly update content and functionality, the page title needs to be dynamically updated, as well. This can be done in scripting using `document.title = \"My new title.\";`.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-407",
    "Summary": "UK - Manage DD - Heading hidden from assistive technologies",
    "Success Criteria": "1.3.2: Meaningful Sequence [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen content has a meaningful order, an appropriate reading order needs to be programmatically determined. This enables those using assistive technology to effectively navigate the content and understand it. Content may otherwise seem unstructured or disorganised.\n\nNote that this is distinct from the focus order, which is about interactive elements receiving focus when users keyboard tab through the page. There is content that has been inappropriately hidden from assistive technology. This means that an appropriate reading order has not been programmatically determined. \n\nThe \"Account\" heading has been programmatically hidden from assistive technology. This means that a correct reading order cannot be programmatically determined. This has been raised as a low priority issue as the dropdown underneath has the same label as the heading. \n\n## \n\nThis can be seen on the UK - Manage DD page. On the \"Account\" heading. \n\n![\"Account\" heading that is hidden from assistive technologies](image.png)\n![Heading markup with aria-hidden](image1.png)\n \n## \n1. Observe that the content has a meaningful visual reading order.\n2. Inspect the content and review the DOM. \n3. Observe that an appropriate reading order has not been programmatically determined as the heading is hidden from assistive technologies\n\n## \n\nAssistive technologies navigate content using the order in which elements appears in the DOM. Avoid hiding content that is visually available to users, unless it has an immediately available alternative. For example, avoid using `aria-hidden` on visible text and operable interactive elements. \n\nOnly use `aria-hidden` when elements are meant to be off-screen, inoperable, or when where an an immediately available alternative. For example, if you are unable to make a date picker component accessible, you could theoretically hide it from assistive technology and provide a labelled input field. \n\nFor more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), [a11y Project - How to Hide Content](https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/), and [CloudFour - Hidden Content and Accessibility](https://cloudfour.com/thinks/see-no-evil-hidden-content-and-accessibility/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-278",
    "Summary": "Heading levels are skipped",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. There are skipped heading levels. \n\n## \n\nThis occurs on:\n\n* UK – M2ND – Non-HSBC Inline – Add payee, on all of the pages for  Move money process. \n\n![Headings](image1.png)\n\n![Heading levels are skipped](image2.png)\n\n![Headings map](image.png)\n\n![Heading declared with heading level 5](image3.png)\n \n## \n1. navigate through the above headings \n2. observe that the heading levels are skipped\n\n## \n\nEnsure that heading levels are not skipped. As the Title title is not a child of Review or Detail, it should be reflowed accordingly back to `<h2>`\n\nFor example, the tiles can be marked up as following:\n\n```\n<h1>Pay and Transfer</h1>\n<h2>Review...</h2>\n...\n<h3>Details</h3>\n...\n<h2>Title Title</h4>\n<h2>Another Tile Title</h4>\n```\n\n\nFor guidance on implementing heading structure, see [WAI Tutorials- Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-277",
    "Summary": "Decorative image has redundant alternative text",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is inappropriately marked up. The image of a phone with a lock icon has been marked up using `alt=\"token\"`. This does not provide additional context to the page as the adjacent text describes the same information. This could also confuse assistive technology users or cause audio clutter. \n\n## \n\nThis can be seen on the following TDS Components:\n* UK  - M2ND (Non-HSBC Inline)\n* UK  - M2NMD (Existing Payee) \n \nOn the phone image of the TDS component, at the bottom of the page. \n\n![Phone image](image.png)\n\n![Markup](image1.png)\n\n## \n1. inspect the non-text content.\n2. confirm that the image alt text can be described by adjacent text and is not unique. \n\n## \n\nAs the decorative phone image is sufficiently described by adjacent text, there is no need to repeat this information.  The token image should be marked up using an `alt` attribute.  For example:\n\n```\n<img src=\"\" alt=\"\">\n```\n\nFor more information, see [WAI Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-382",
    "Summary": "UK - Manage Payee - There are parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element not nested correctly according to HTML specification. \n* Elements with duplicate `id`. \n\n## \n\nThis can be seen on the UK - Manage Payee page.\n\n![17 parsing errors flagged](image1.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements do not have duplicate attributes. \n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-312",
    "Summary": "UK – MFD - there are parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nMultiple elements are using the same `id`. For example, `toAccountIdentifier`. \n\nAssistive technologies may be unable to retrieve information that is associated with the `id`.  \n\n## \n\nThis can be found on the UK – MFD – View, Edit amount and Delete page. \n\n![Parsing errors flagged by nu validator](image1.png)\n \n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nEnsure that elements have a unique `id`. \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-282",
    "Summary": "UK - parsing errors with duplicate IDs and missing attributes",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nHSBC DCE has previously given dispensation for parsing issues in the context of this project. They may do the same for this issue. However, we have not been advised whether parsing issues have been universally marked as out of scope for this project. As well, be advised this is an additional issue, so does not require resolution. \n\n## \n\nThis occurs on:\n\n* UK - Transaction Selection\n* UK - M2MD\n\nIn particular, there are several duplicate IDs.\n\n![Validator throwing 18 parsing errors that impact accessibility](image.png)\n\n* UK - M2MI\n\n![Validator throwing 22 parsing errors that impact accessibility](image1.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-245",
    "Summary": "Screen reader cursor navigates onto hidden text",
    "Success Criteria": "Additional Issue",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are input fields which are described by some hidden text. As you navigate through the input fields, the screen reader cursor navigates onto the hidden text. \n\nThis may be cumbersome for screen reader users, particularly as this happens with a group of three interrelated input fields. The hidden text is not a replacement for the label and just serves to make the input fields more understandable. \n\n## \n\nThis is on the Sort code of the UK - M2NMD - CoP page.\n\n![Sort code hidden text receiving focus](image.png)\n\n![Sort code with the label announced](image2.png)\n\n![Markup including hidden text](image1.png)\n \n## \n1. swipe onto the mentioned element with a screen reader\n2. observe that the label is announced when the sort code input field receives focus\n3. note that the hidden label also receives focus and is announced to screen reader users \n\n## \n\nEnsure that the hidden text does not receive screen reader focus. This can be achieved by using `aria-hidden` or `display:none` on the `<span>` element containing the hidden text. \n\nThis will result in the input fields still being described by the text. However, screen readers will not navigate through each `<span>` element when completing the sort code fields.\n\nFor more information, see [Accessible Developer Guide - using aria-describedby](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/describedby/) and [Scott O'Hara - Inclusive Hidden](https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-433",
    "Summary": "UK - M2NMI - Invalid use of listbox role",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "List-box",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are collapsible listboxes that are not correctly programmatically determined. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programatically determined may confuse or mislead users. \n\nThe main problem include:\n* marking up button as `role=\"listbox\"`. Activating the button should expand the listbox.\n\nWhile not strictly a WCAG failure:\n* aria-label used to determine currently the active option, instead of `aria-activedescendant`\n* aria-label used to determine selected state instead of `aria-selected` \n\n## \n\nThis can be seen on the UK - M2NMI page. On the \"Who will pay the fees\" and \"Reason for payment\" dropdowns. \n\n![Dropdowns which have missing ARIA](image.png)\n![Markup of \"Who will pay the fees\" dropdown](image1.png)\n\n## \n1. Observe the listbox component.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the listbox is not correctly programmatically determined. \n\n## \n\nMake sure that listbox components are programmatically determined. \n\nIf possible, use a native `<select>` element. These have out-of-the-box accessibility. If this is not possible, create a listbox with ARIA:\n\nUse a native or custom `<button>` for the element that expands and collapses the listbox. \n\nMake sure that the accessible name of the button contains the external label and internal value. This can be done using `aria-labelledby` and referencing both values. As well, on the trigger button, use `aria-expanded` to differentiate when the listbox is expanded and collapsed.\n\nOn the listbox, use `role=\"listbox\"`. Where possible, expand a list container such as `<ul>`. As well, use `aria-activedescendant` to programmatically determine the active option. This attribute uses the `id` of the active option. \n\nOn the options, use `role=\"option\"`. Where possible, expand `<li>`. As well, use `aria-selected`  to differentiate of the active and inactive options. For example:\n\n```\n<span id=\"ex\">External Label</span>\n<button aria-expanded=\"false\" aria-haspopup=\"listbox\" aria-labelledby=\"ex iv\" id=\"iv\">Internal Value</button>\n<ul role=\"listbox\" aria-labelledby=\"externalLabel\" aria-activedescdent=\"opt1\">\n  <li id=\"opt1\" role=\"option\" aria-selected=\"true\">First Option</li>\n  <li id=\"opt2\" role=\"option\">Second Option</li>\n...\n</ul>\n```\n\nMake sure to update the `aria-selected` attributes between `true` and `false` when the user adjust the options. Make sure to update the `aria-activedescendant` attribute with the `id` of the active option when users adjust the listbox. \n\nThe attributes `aria-haspopup` and `aria-labelledby` further define the exact behaviour of the component. They are not strictly required for conformance. However, we strongly encourage you to use these attributes. \n\nFor more information, see [WAI ARIA Practices - Collapsible Listbox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html) and [24a11y - Select Your Poison](https://www.24a11y.com/2019/select-your-poison/). \n\nMake sure that the component can be controlled with a keyboard. The standard approach is that users tab onto the trigger button, activates it with Return or Space, and uses Arrow Keys to adjust the listbox. This can be done using the aforementioned `aria-activedescendant` attribute. \n\nFor more information, see [Managing focus using aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_focus_activedescendant) and [MDN - Keyboard-navigable widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-429",
    "Summary": "UK - M2NMI - Current date is not programmatically identified",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are elements that are visually highlighted as currently relevant and selected. They are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be found on the UK - M2NMI page. On the date picker. \n\n![current date visual affordance that is not programmatically marked up](image.png)\n![markup of current date](image1.png)\n\n## \n1. Observe the elements visually highlighted are currently relevant.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the current date state is not programmatically determined. \n\n## \n\nMake sure that the current state is programmatically determined. Use `aria-current` or hidden text. The possible specfic values are `page`, `step`, `location`, `date`, `time`, and when there are no relevant `true` and `false` should be used. In this case, use `aria-current=\"date\"`. For example:\n\n```\n<table role=\"grid\" ...>\n  ...\n  <td aria-current=\"date\" ... >Monday 2nd January</td>\n  ...\n</table>\n</div>\n```\n\nMake sure that `aria-current` and `aria-selected` are not used interchangeably.\n\nFor example, `aria-current=\"date\"` should be used for dates that are highlighted without the user interacting with them, such as todays date. When the user actively selects an element, it should use `aria-selected=\"true\"`. The nuance is explained in [aria-current - examples and best practices](https://www.aditus.io/aria/aria-current/#date-picker-widget). \n\nFor more information, see [ADG - Marking elements as the current one](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-428",
    "Summary": "UK - M2NMI - Selected element is not programmatically identified",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are selectable elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be found on the UK - M2NMI page. On the date picker. \n\n![selected date visual affordance that is not programmatically marked up](image.png)\n![markup of the selected date](image1.png)\n\n## \n1. Note the components are visually highlight as selected.\n2. Inspect the element and review the DOM. \n3. Note that the selected state is not programmatically determined. \n4. Observe that the state is not available through text. \n\n## \n\nMake sure that the selected state is programmatically determined. Use `aria-selected` and update the `true` and `false` value appropriately. Make sure that the attribute is on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<table role=\"grid\" ...>\n  ...\n  <td tabindex=\"0\" aria-selected=\"true\">Wednesday 5th May\"</td>\n  <td tabindex=\"-1\">Thursday 6th May</td>\n  ...\n</table>\n</div>\n```\n\nMake sure that `aria-current` and `aria-selected` are not used interchangeably.\n\nFor example, `aria-current=\"date\"` should be used for dates that are highlighted without the user interacting with them, such as todays date. When the user actively selects an element, it should use `aria-selected=\"true\"`. The nuance is explained in [aria-current - examples and best practices](https://www.aditus.io/aria/aria-current/#date-picker-widget). \n\nFor more information, see [W3C - aria-selected](https://www.w3.org/TR/wai-aria-1.1/#aria-selected) and [WAI ARIA Practices - Tabbed Interface](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-427",
    "Summary": "Interactive elements with inappropriate name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThe text entry field has an inappropriate accessible name of \"Please select\". This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users since it does not describe the purpose of this field.\n\n## \n\nThis can be found on the UK - Inline TS Delta page. On the country and postcode dropdowns.\n\n![Input field with inappropiate name](image.png)\n![Markup of input field](image1.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nMake sure that interactive elements have an appropriate name. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` and provide them with an accessible name through labels or internal text. For example, using the visible 'Country' label:\n\n```\n<label for=\"Country\">Country</label>\n<input id=\"country\" type=\"text\">\n```\n\nIf this is not possible, use `aria-label` to manually name elements. For example:\n\n```\n<input aria-label=\"Country\" type=\"text\"...></input>\n```\n\nUse these techniques to provide appropriate accessible names. Accessible names should succinctly describe purpose and functionality. \n\nFor more information, see [WAI Tutorials - Labeling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-411",
    "Summary": "UK - Manage DD - Malformed ARIA on collapsible listbox",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "List-box",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are collapsible listboxes that are not correctly programmatically determined. Instead, `aria-label` is used to manually describe the selected state and active descendent. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be seen on the UK - Manage DD page. On the account selection listbox. \n\n![Accont listbox with malformed ARIA](image.png)\n![Markup of the listbox](image1.png)\n\n## \n1. Observe the listbox component.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the listbox is not correctly programmatically determined. \n\n## \n\nMake sure that listbox components are programmatically determined. \n\nIf possible, use a native `<select>` element. These have out-of-the-box accessibility. If this is not possible, create a listbox with ARIA. Use a native or custom `<button>` for the element that expands and collapses the listbox. \n\nMake sure that the accessible name of the button contains the external label and internal value. This can be done using `aria-labelledby` and referencing both values. As well, on the trigger button, use `aria-expanded` to differentiate when the listbox is expanded and collapsed.\n\nOn the listbox, use `role=\"listbox\"`. Where possible, expand a list container such as `<ul>`. As well, use `aria-activedescendant` to programmatically determine the active option. This attribute uses the `id` of the active option. \n\nOn the options, use `role=\"option\"`. Where possible, expand `<li>`. As well, use `aria-selected`  to differentiate of the active and inactive options. For example:\n\n```\n<span id=\"ex\">External Label</span>\n<button aria-expanded=\"false\" aria-haspopup=\"listbox\" aria-labelledby=\"ex iv\" id=\"iv\">Internal Value</button>\n<ul role=\"listbox\" aria-labelledby=\"externalLabel\" aria-activedescdent=\"opt1\">\n  <li id=\"opt1\" role=\"option\" aria-selected=\"true\">First Option</li>\n  <li id=\"opt2\" role=\"option\">Second Option</li>\n...\n</ul>\n```\n\nMake sure to update the `aria-selected` attributes between `true` and `false` when the user adjust the options. Make sure to update the `aria-activedescendant` attribute with the `id` of the active option when users adjust the listbox. \n\nThe attributes `aria-haspopup` and `aria-labelledby` further define the exact behaviour of the component. They are not strictly required for conformance. However, we strongly encourage you to use these attributes. \n\nFor more information, see [WAI ARIA Practices - Collapsible Listbox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html) and [24a11y - Select Your Poison](https://www.24a11y.com/2019/select-your-poison/). \n\nMake sure that the component can be controlled with a keyboard. The standard approach is that users tab onto the trigger button, activates it with Return or Space, and uses Arrow Keys to adjust the listbox. This can be done using the aforementioned `aria-activedescendant` attribute. \n\nFor more information, see [Managing focus using aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_focus_activedescendant) and [MDN - Keyboard-navigable widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-408",
    "Summary": "UK - Manage DD - Missing ARIA on tabbed interface",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Tabbed Interface",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are tabbed interfaces that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be found on the UK - Manage DD page. On the \"Direct debits\" tabbed interface. \n\n![Direct debits tabbed interface](image.png)\n![Markup of the tabbed interface with missing ARIA](image1.png)\n\n## \n1. Observe the tabbed interfaces.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the tabbed interface is not programmatically determined. \n\n## \n\nMake sure that tabbed interfaces are programmatically determined. \n\nOn the tab container, use`role=\"tablist\"`. On the individual tabs, use `role=\"tab\"` and and extend interactive elements, such as `<button>` elements. Use `aria-selected` to differentiate of the active and inactive tabs. On the tab panel container, use `role=\"tabpanel\"`. For example:\n\n```\n<div role=\"tablist\" ...>\n  <button role=\"tab\" aria-selected=\"true\" aria-controls=\"panelOne\" id=\"tabOne\">I am the first tab</button>\n  <button role=\"tab\" aria-selected=\"false\" aria-controls=\"panelTwo\" id=\"tabTwo\">I am the second tab</button>\n</div>\n<div tabindex=\"0\" role=\"tabpanel\" id=\"panelOne\" aria-labelledby=\"tabOne\">I am the first panel</div>\n<div hidden role=\"tabpanel\" id=\"panelTwo\" aria-labelledby=\"tabTwo\">I am the second panel</div>\n```\n\nMake sure to update the `aria-selected` attributes between `true` and `false` when the user adjust the tabs. As well, make sure that the off-screen tab panel is hidden from all users, which can be done with `hidden` or `display:none` and that the on-screen panel is available to all users.\n\nThe attributes `aria-controls` and `aria-labelledby` cross-references the tabs and panels. This programmatically communicates the parent and child relationship between these elements. It is not strictly required for conformance. However, we strongly encourage you to use these attributes. \n\nFor more information, see [WAI ARIA Practices - Tabs with Manual Activation](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html), [Tabs with Automatic Activation](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-1/tabs.html), and [Inclusive Components - Tabbed Interfaces](https://inclusive-components.design/tabbed-interfaces/). \n\nMake sure that the component can be controlled with a keyboard. The standard approach is that users tab onto the currently active tab, use the arrow keys to adjust which tab is selected, and then tab forward onto the active tab panel. This can be done with using a technique called roving tabindex.\n\nFor more information, see [Managing focus using a Roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_roving_tabindex) and [MDN - Keyboard-navigable widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-384",
    "Summary": "UK - Manage payee - Button does not have an accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. On mobile, the button above the \"Your saved payees\" heading does not have an accessible name. \n\n## \n\nThis can be seen on the UK - Manage Payee page. On the expand button next to \"YOUR PAYEES\".\n\n![button without accessible name](image.png)\n![markup of the button without accessible name](image1.png)\n\n## \n1. navigate onto the above elements and inspect it \n2. note that it does not have an accessible name \n\n## \n\nProvide an accessible name for the button. \n\nIn this instance, you can use `aria-labelledby` and derive the label from the \"Your payees\" heading next to the button. For example:\n\n```\n<div id=\"payee-text\">YOUR PAYEES</div>\n...\n<button aria-labelledby=\"payee-text\"...>\n```\n\nAnother option would be to combine these elements into one object. For example:\n\n```\n<button aria-expanded=\"false\" ... >YOUR PAYEES</button>\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-381",
    "Summary": "UK - Manage Payee - Roles and states of tabbed interface not marked up semantically",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Tabbed Interface",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The Personal payees / Company payees tabbed interface is not marked up semantically. \n\n## \n\nThis can be seen on the UK - Manage Payee page. On the Personal payees/ Company payees tabbed interface. \n\n![personal payees/ company payees tabbed interface](image1.png)\n![markup of tabs](image.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their roles and states are not communicated \n\n## \n\nMake sure that the roles and states are programmatically identified.\n\n* Use`role=\"tablist\"` to markup the container for the set of tabs. You can provide a label for the set of tabs using `aria-label` on the container. \n* The tabs should be marked up as `<button>` elements with `role=\"tab\"`. \n* Use the `aria-selected=\"true\"` attribute to indicate the currently active tab. Aswell, the non active tab should be marked up using `aria-selected=\"false\"`.\n* Use the `aria-controls` attribute on the button to refer to the tabpanel element associated with the tab.\n* Use `role=\"tabpanel\"` to markup the container for the tabpanel. \n* Use `aria-labelledby` to label the tab panel by its associated tab.\n\n\nIf possible, use `tabindex=\"-1\"` on a tab when it is not selected so that there is only one tab stop. Provide keyboard support to move onto the next tab using left and right arrow keys. For more information, see [WAI - Roving tabindex](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex). For more information, see [ARIA Practices - Tabs with manual activation](https://www.w3.org/TR/wai-aria-practices-1.1/examples/tabs/tabs-2/tabs.html)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-380",
    "Summary": "Combobox pattern does not use ARIA correctly",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThere is a combobox that does not use the ARIA for a combobox. Note that this issue is somewhat speculative. As noted in 3804 - 375, the combobox is currently not keyboard operable. As a result, it cannot be fully tested with a screen reader. \n\nHowever, we have been able to review the code and identify issues that we believe will impact assistive techology. \n\n## \n\nThis can be found on the UK - Inline TS Delta page. On the country and postcode dropdowns.\n\n![country and currency dropdown](image.png)\n![markup of dropdown](image1.png)\n\n## \n1. Navigate onto the above dropdown with a screen reader.\n2. Note that it is not marked up with appropriate ARIA roles \n\n## \n\nMake sure that the combobox can be operated with a keyboard. Users should be able to tab onto the search field to enter their query and user the arrow keys to access the results. This can be done by building on an `<input>`, rather than the current pattern that is using a `<div>` with `tabindex=\"0\"`. \n\nAs well, use the appropriate ARIA, including `role=\"combobox\"`. For example: \n\n```\n<label for=\"suggestSearch\">Country</label>\n<input id=\"suggestSearch\" type=\"search\" role=\"combobox\" \n  aria-activedescendant=\"01\" aria-autocomplete=\"list\"\n  aria-expanded=\"true\" aria-controls=\"results\" aria-haspopup=\"listbox\">\n  United Kingdom\n</input>\n<ul id=\"results\" role=\"listbox\" aria-label=\"Countries List\">\n  <li id=\"01\" role=\"option\" aria-selected=\"true\" aria-posinset=\"1\" aria-setsize=\"2\">\n    United Kingdom\n  </li>\n  <li id=\"01\" role=\"option\" aria-posinset=\"2\" aria-setsize=\"2\">\n    United States\n  </li>\n...\n</ul>\n```\n\nNote that this issue is linked to 3804 - 380. For more information, see [WAI ARIA Practices - Editable Combobox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/combobox/combobox-autocomplete-both.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-378",
    "Summary": "Selected state is not marked up",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. On the dropdowns, the selected visual affordance is not programmatically marked up.\n\n## \n\nThis can be found on the UK - Inline TS Delta page. On the country and postcode dropdowns.\n\n![Dropdown - United Kingdom is selected not this is not marked up programmatically](image.png)\n![Markup of selected option](image1.png)\n\n## \n1. navigate onto the above element and inspect it \n2. note that the selected state is not marked up\n\n## \n\nUse `aria-selected=\"true\"` on the `li` element that is currently selected. Remove the attribute when the option is no longer selected or set it to `false`. For an example, see [WAI - Collapsable dropdown](https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-346",
    "Summary": "UK - M2NMD - ECW - Heading has role=\"presentation",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe main page heading on Fraud alert page has `role=\"presentation\"`. This removes the semantic meaning from the heading and its child elements. \n\n## \n\nThis can be found on the UK - M2NMD - ECW page.\n\n![Fraud alert heading that is keyboard focusable](image.png)\n![Heading with role=\"presentation\"](image1.png)\n \n## \n1. navigate onto the above elements and inspect it \n2. note that it has `role=\"presentation\"`\n \n## \n\nRemove the `role=\"presentation\"` attribute from the heading markup.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-344",
    "Summary": "UK - M2NMD - ECW - Heading has tabindex 0",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The main page heading on the Fraud alert page is keyboard focusable, while not being an interactive element. \n\n## \n\nThis can be found on the UK - M2NMD - ECW page.\n\n![Fraud alert heading that is keyboard focusable](image.png)\n![Heading with tabindex=\"0\"](image1.png)\n \n## \n1. tab through the above pages — use just your keyboard\n2. observe that the heading receives keyboard focus \n\n## \n\nEnsure that the heading does not receive keyboard focus. However, As we are expecting keyboard focus to be set on the heading in the modal when it is launched, you should use `tabindex=\"-1\"` on the heading. This allows you to set focus on non-interactive elements programmatically.\n\nFor more information, see [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-342",
    "Summary": "UK - M2NMD - ECW -  Background elements receive keyboard focus",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen modal dialogs are used, focus needs to be restricted to them until the modal is dismissed. \n\nKeyboard users can access information behind full-page model dialogs by tabbing, and also arrow keys while using a screen reader. This may confuse users, particularly partially sighted screen reader users, as they are navigating onto off-screen elements. \n\n## \n\nThis can be found on the UK - M2NMD - ECW page. \n\n![Background elements receiving keyboard focus](image.png) \n \n## \n1. navigate onto the element that triggers the modal using a keyboard or screen reader\n2. launch the modal, and observe that keyboard focus is automatically placed within the modal\n3. navigate the contents of the modal using either keybtoard (tab) or screen reader (arrow keys)\n4. observe that focus can be moved out of the modal to the elements behind the modal\n\n## \n\nKeyboard and screen reader focus should be contained in the modal container using the techniques below:\n\n* Hide background content that is not currently visible from screen readers using the `aria-hidden` attribute\n* All actionable elements in the background should be assigned with `tabindex=“-1”` to remove the elements from the focus order\n* When the modal is closed remove the `aria-hidden` and `tabindex=“-1”` attributes from the background elements so that the user can logically focus onto them\n\nAlternatively, use the WICG `inert` polyfill. See [WICG inert polyfill on Github](https://github.com/WICG/inert) and [Intro to the inert attribute](https://dev.to/hybrid_alex/intro-to-the-inert-attribute-3d25), which performs the same action.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-313",
    "Summary": "Focus does not return to triggering element",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. When a future dated request modal dialog is closed, the keyboard focus is not set to the triggering 3 dot button. The keyboard focus is set to the bottom of the page. \n\n## \n\nThis can be found on the UK – MFD – View and Delete page.\n\n![Future dated request modal with close buttons](image.png)\n\n![Keyboard focus is set to menu button on a different table, on the bottom of the page](image1.png)\n\n## \n1. tab through the above pages — use just your keyboard\n2. open and close the modal\n3. note that focus does not return to the element that opened it.\n\n## \n\nThe keyboard focus should return to the triggering element when the modal dialog is dismissed. This can be done using the focus method. For more information, see [MDN - focus method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-375",
    "Summary": "Text entry feature on dropdown is not keyboard operable",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWebsites must be entirely compatible with just a keyboard. Do not rely on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users may be unable to operate it. The text entry feature on the dropdown cannot be operated with a keyboard.\n\nKeyboard users can tab onto the field and arrow through the values. However, in order to access the combobox functionality, users must fist mouse click on the field and then type into it. This has been raised as medium priority as technically users can still access the component. \n\nHowever, keyboard and screen reader users may be disadvantaged when compared to mouse users who have access to a shortcut when using the component. That is, they can mouse click on it and then type into it to filter the values.\n\n## \n\nThis can be found on the UK - Inline TS Delta page. On the country and postcode dropdowns. \n\n![Dropdowns that do not keyboard operable](image.png)\n![Markup of the dropdown](image1.png)\n\n## \n1. navigate onto the page above and expand the dropdown\n2. using a keyboard (and only the keyboard) attempt to tab onto the dropdown to enter a search query \n3. note that the dropdown cannot be operated with a keyboard and requires a mouse to click on the search field \n\n## \n\nMake sure that the combobox can be operated with a keyboard. Users should be able to tab onto the search field to enter their query and user the arrow keys to access the results. This can be done by building on an `<input>`, rather than the current pattern that is using a `<div>` with `tabindex=\"0\"`. \n\nAs well, use the appropriate ARIA, including `role=\"combobox\"`. For example: \n\n```\n<label for=\"suggestSearch\">Country</label>\n<input id=\"suggestSearch\" type=\"search\" role=\"combobox\" \n  aria-activedescendant=\"01\" aria-autocomplete=\"list\"\n  aria-expanded=\"true\" aria-controls=\"results\" aria-haspopup=\"listbox\">\n  United Kingdom\n</input>\n<ul id=\"results\" role=\"listbox\" aria-label=\"Countries List\">\n  <li id=\"01\" role=\"option\" aria-selected=\"true\" aria-posinset=\"1\" aria-setsize=\"2\">\n    United Kingdom\n  </li>\n  <li id=\"01\" role=\"option\" aria-posinset=\"2\" aria-setsize=\"2\">\n    United States\n  </li>\n...\n</ul>\n```\n\nNote that this issue is linked to 3804 - 380. For more information, see [WAI ARIA Practices - Editable Combobox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/combobox/combobox-autocomplete-both.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-406",
    "Summary": "UK - Manage DD - Heading not marked up semantically",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere are elements that titles or categorises other content. They have not been marked up as a heading.\n\n## \n\nThis can be seen on the UK - Manage DD page. The \"Direct Debits\" heading has not been marked up semantically. \n\n![Direct debit heading is not marked up semantically](image.png)\n![Markup of the \"Direct debits\" element missing heading semantics](image1.png)\n\nThis can also be seen on the \"Direct Debit History\" heading on the modal dialog, which is triggered by pressing the \"History\" option on the \"Active Direct Debits\" tab. \n\n![Direct debits history heading is not marked up semantically](image2.png)\n![Markup of \"Direct debits history\"](image3.png)\n\n## \n1. Visually note the headings.\n2. Inspect the elements in the DOM.\n3. Note that the headings have not been marked up, such as `<h1>`, `<h2>`, and so on.\n\n## \n\nWhen elements title or categorise other content, use headings with appropriate heading levels. Make sure that the heading levels used correctly communicate the structure of the page, such as the parent and child relationship between the headings. For example:\n\n```\n<h1>PAY AND TRANSFER</h1>\n<h2>Manage direct debits</h2>\n<h3>Account</h3>\n<h3>Direct debits</h3>\n```\n\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-432",
    "Summary": "UK - M2NMI - Radio buttons not associated with group label",
    "Success Criteria": "Additional Issue",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are radio buttons that are not programmatically associated to their group label. The `fieldset` element has been used, but the `<legend>` element has not been implemented. That said, this has been raised as an Additional Issue due to the `title` and `aria-label` attributes used.\n\nThe individual radio buttons have a label that communicates additional information, such as \"No, set up a stand alone payment or transfer\", in addition to the visual text. While this is helpful, it is best practice to associate radio group with a legend. \n\n##  \n\nThis can be seen on the UK - M2NMI page. On the \"recurring transfer\" radio buttons. \n \n![\"Recurring transfer\" radio buttons](image.png)\n![\"Recurring\" radio buttons in DOM with empty <legend>](image1.png)\n\nThis can also be seen on the \"End date options\" radio buttons. \n![End date options radio buttons](image2.png)\n![Empty legend element in the fieldset](image3.png)\n\n## \n1. Navigate through the above example with a screen reader.\n2. Note the group label is not communicated.\n\n## \n\nAny relationship presented through visual cues must use the appropriate semantics. Include a `<legend>` element and nested directly after the `<fieldset>` element.\n\n```\n<fieldset ...>\n   <legend>Recurring transfer</legend>\n   ...\n</fieldset>\n```\n\nFor more information, see [WAI Tutorials - Grouping Radio buttons](https://www.w3.org/WAI/tutorials/forms/grouping/#radio-buttons).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-431",
    "Summary": "UK - M2NMI - There are multiple parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element missing start or end tag. \n* Element not nested correctly according to HTML specification. \n* Elements with duplicate `id`. \n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on the UK - M2NMI page.\n\n![parsing errors flagged by nu validator](image.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note the multiple different parsing errors.\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-409",
    "Summary": "UK - Manage DD - There are multiple parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element not nested correctly according to HTML specification. \n* Elements with duplicate `id`. \n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on the UK - Manage DD page. \n\n![Parsing errors flagged by nu validator](image.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note the multiple different parsing errors.\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-379",
    "Summary": "Dropdown label is verbose",
    "Success Criteria": "Additional Issue",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe country and currency dropdowns are marked up with verbose `aria-label` description. For example, it includes \"alt accessible dropdown button\". As well as being verbose, the label includes roles and states that should be marked up programatically. \n\n## \n\nThis can be found on the UK - Inline TS Delta page. On the country and postcode dropdowns.\n\n![dropdowns that have verbose label](image.png)\n![markup of verbose label](image1.png)\n\n## \n1. navigate to the mentioned dropdowns and inspect it \n2. observe that the label contains a verbose description and also includes roles and states \n\n## \n\nProvide a succinct description of the dropdown through the `aria-label`. For example, \"To - Country\". As well, do not include roles and states in the label as this should be done using ARIA. Note that as described in 3804 - 375 and 3804 - 380, we suggest using a `<label>` element.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-314",
    "Summary": "Future dated requests text hidden from assistive technologies",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Plain Text",
    "Priority": "High",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe \"Future dated request\" description list has an ancestor that is marked up using `aria-hidden=\"true\"`.  This means that the list is not available to assistive technology users at all. For example, the text is hidden from screen readers. Users may be unable to access this critical information.\n \n## \n\nThis can be found on the UK – MFD – View and Delete page.\n\n![Text element hidden from assistive technologies](image.png)\n\n![Markup of container with aria-hidden](image1.png)\n\n![aria-hidden is true on ancestor div.cpi-wrapper](image2.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship is not communicated\n\n## \n\nMake the list available to assistive technologies. This can be done by removing the `aria-hidden` attribute.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-522",
    "Summary": "US - M2NMI Inline - Description list not semantically declared",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThat are elements that are visually communicated as being key and value pairs. However, this structure has not been programmatically determined.\n\n## \n\nThis can be seen on US - M2NMI Inline. On the review page. \n\n![Description list](image1.png)\n![Markup of description list](image2.png)\n\nThis can also be seen on the confirmation page, with the \"Receipt\" details list and the \"timestamp\" description list under the \"Details\" section. \n\n![Description list not semantically declared](image6.png)\n\n![Details description list](image4.png)\n![Markup of timestamp description list items](image3.png)\n\nThis can also be seen on the create payment page on \"US - M2NMI Inline\": On the \"Transfer type\" description list under the \"Details\" section. \n\n![Details description list - create payment](image5.png)\n\n## \n1. Observe description list items.\n2. Inspect the elements in the DOM.\n3. Observe that the list items have not been marked up, such as `dl`, `dt`, and `dd`.\n\n## \n\nMark up the description list using `<dl>`, `<dt>`, and `<dd>`. Make sure that each set of list items is contained in a single `<dl>`, contain each individual term within `<dt>` tags and each descriptions within `<dd>` tags. Only use separate `<dl>` tags when the list items are contained logically and visually in separate, distinct lists. For example:\n\nMark up the list using description list semantics to communicate the relationship between terms and their descriptions. For example:\n\n```\n<dl>\n  <dt>\n    Student name\n  </dt>\n  <dd>\n    John Smith\n  </dd>\n  <dt>\n    Student Number\n  </dt>\n  <dd>\n    1234\n  </dd>\n</dl>\n```\n\nFor more details, see [WAI Tutorials - Description Lists](https://www.w3.org/WAI/tutorials/page-structure/content/#description-lists).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-525",
    "Summary": "US - M2NMI Inline - Malformed ARIA on collapsible listbox",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "List-box",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are collapsible listboxes that are not correctly programmatically determined. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. The malformed semantics may confuse or mislead users.\n\n## \n\nThis can be seen on US - M2NMI Inline. On the \"Country/territory\", \"Payee telephone number\" and \"receive\" collapsible list boxes on the \"Pay an existing international payee\" page. For example, there is an element within `role=\"listbox\"` and `tabindex=\"0\"`. There is then an element with `role=\"button\"` nested in this listbox element.\n\n![Collapsible listboxes not correctly programmatically dtermined](image1.png)\n![Example markup of country/ territory collapsible listbox](image2.png)\n\n## \n1. Observe the listbox component.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the listbox is not correctly programmatically determined. \n\n## \n\nMake sure that listbox components are programmatically determined. If possible, use a native `<select>` element. These have out-of-the-box accessibility. If this is not possible, create a listbox with ARIA. \n\nUse a native or custom `<button>` for the element that expands and collapses the listbox. \n\nMake sure that the accessible name of the button contains the external label and internal value. This can be done using `aria-labelledby` and referencing both values. As well, on the trigger button, use `aria-expanded` to differentiate when the listbox is expanded and collapsed.\n\nOn the listbox, use `role=\"listbox\"`. Where possible, expand a list container such as `<ul>`. As well, use `aria-activedescendant` to programmatically determine the active option. This attribute uses the `id` of the active option. \n\nOn the options, use `role=\"option\"`. Where possible, expand `<li>`. As well, use `aria-selected`  to differentiate of the active and inactive options. For example:\n\n```\n<span id=\"exLabel\">External Label</span>\n<button id=\"intLabel\" aria-expanded=\"false\" aria-haspopup=\"listbox\" aria-labelledby=\"exLabel intLabel\">Internal Value</button>\n<ul role=\"listbox\" aria-labelledby=\"exLabel\" aria-activedescdent=\"opt1\">\n  <li id=\"opt1\" role=\"option\" aria-selected=\"true\">First Option</li>\n  <li id=\"opt2\" role=\"option\">Second Option</li>\n...\n</ul>\n```\n\nMake sure to update the `aria-selected` attributes between `true` and `false` when the user adjusts the options. Make sure to update the `aria-activedescendant` attribute with the `id` of the active option when users adjust the listbox. \n\nThe attributes `aria-haspopup` and `aria-labelledby` further define the exact behaviour of the component. They are not strictly required for conformance. However, we strongly encourage you to use these attributes. \n\nFor more information, see [WAI ARIA Practices - Collapsible Listbox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html) and [24a11y - Select Your Poison](https://www.24a11y.com/2019/select-your-poison/). \n\nMake sure that the component can be controlled with a keyboard. The standard approach is that users tab onto the trigger button, activates it with Return or Space, and uses Arrow Keys to adjust the listbox. This can be done in parallel with the aforementioned `aria-activedescendant` and `aria-selected`.\n\nFor more information, see [Managing focus using aria-activedescendant](https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_focus_activedescendant) and [MDN - Keyboard-navigable widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-521",
    "Summary": "US - M2NMI Inline - Element semantics inappropriately suppressed with aria-hidden",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nElements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are elements where `aria-hidden` is inappropriately suppressing their semantics. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the semantics are suppressed may confuse or mislead users.\n\n## \n\nThis can be seen on the US - M2NMI Inline page. On the \"See pre-payment disclosure\" link.\n\n![Prepayment link](image1.png)\n![aria-hidden used to surpress link semantics](image2.png)\n\n## \n1. Observe the elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the semantics are being suppressed with `aria-hidden`.\n\n## \n\nMake sure that `aria-hidden` is not used to inappropriately suppress semantics. \n\nIn this instance, remove `aria-hidden` from the parent `<p>` element. For more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-518",
    "Summary": "US - M2NMI Inline - Interactive elements with inappropriate name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that have inappropriate accessible names. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is inappropriate may confuse or mislead users.\n\n## \n\nThis can be seen on the US - M2NMI Inline page. On the payee country code selector dropdown. This has an `aria-label` of \"Payee telephone number (optional) dropdown selected +1\". This does not communicate that the field controls the country code selection. It is inappropriate because it implies users should enter a phone number.\n \n![Country code selector dropdown](image3.png)\n![Markup of country code selector](image1.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nMake sure that interactive elements have an appropriate name. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` and provide them with an accessible name through labels or internal text. For example:\n\n```\n<label for=\"cc\" class=\"visually-hidden\">Country code (optional)</label>\n<select id=\"cc\">\n    <option value=\"+44\">+44</option>\n...\n</select>\n```\n\nIf this is not possible, use `aria-label` or `aria-labelledby` to manually name elements. This is particularly useful with listboxes. For example:\n\n```\n<span id=\"ex\">External Label</span>\n<button aria-expanded=\"false\" aria-haspopup=\"listbox\" aria-labelledby=\"ex iv\" id=\"iv\">Internal Value</button>\n<ul role=\"listbox\" aria-labelledby=\"externalLabel\" aria-activedescdent=\"opt1\">\n...\n</ul>\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-528",
    "Summary": "US - M2NMI Inline - Instructions rely on visual sensory characteristics",
    "Success Criteria": "1.3.3: Sensory Characteristics [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nUnderstanding and following instructions must not rely exclusively on shape, size, location, orientation, or sound. There are instructions that rely on visual cues. This may particularly disadvantage users who do not primarily access the content through the visuals, such as screen reader users. \n\n## \n\nThis can be seen on the US - M2NMI Inline page. Under the \"Additional security required\" heading. The security key buttons are referred to by their colours. For example: \"Yellow button\", \"Green button\", etc without giving a reference to where it is on the Security Device. \n\n![TDS instructions](image1.png)\n![Markup of images in the instruction](image2.png)\n\n## \n1. Navigate to the example \n2. Observe that they rely on colour characteristics.\n\n## \n\nEnsue that operation and content can be universally understood. Wherever possible, do not refer to sensory characteristics. Otherwise, if they must be used, do not rely on them exclusively. Make sure the alternative way of understanding the instructions is available to all. For example:\n\n```\n<img alt= \"Green button (bottom right with raised surround)\" ...>\n<img alt= \"Yellow button (bottom left with raised square)\" ...>\n```\n\nAs this information is visually presented with the image, the additional text could be implemented as hidden text. However, we would encourage having this additional information available to all users, where possible.\n\nFor more information, see [CSUN - Sensory Characteristics](https://www.csun.edu/universal-design-center/web-accessibility-criteria-color-and-sensory-characteristics), [W3C - Writing for Web Accessibility](https://www.w3.org/WAI/tips/writing/) and [Mailchimp - Writing for Accessibility](https://styleguide.mailchimp.com/writing-for-accessibility/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-523",
    "Summary": "US - M2NMI Inline - Additional information is not associated with input field",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationship to users. Content may otherwise seem unstructured or disorganised.\n\nThere are form fields with additional information that is necessary to understand or complete the form fields. This additional information is not associated with the relevant form fields. The complete purpose of the form fields may be unclear to users.\n\n## \n\nThis can be seen on US - M2NMI Inline. On the \"Purpose of payment\", \"Reference (optional)\" and \"Date\" input fields on the \"Pay an existing international payee\" page. \n\n![Text elements that are not associated with form fields](image1.png)\n![Example markup of purpose of payment input field](image2.png)\n\n## \n1. Observe the additional information for the form fields. \n2. Inspect the form fields and review the DOM. \n3. Observe that the additional information is not associated with the form fields.\n4. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that the necessary to know information is correctly associated with form forms field. This can be done with `aria-describedby`. Make sure that the `id` values match correctly. For example:\n\n```\n<label for=\"date\">Date</label>\n<input type=\"text\" id=\"date\" aria-describedby=\"formatHint\" ...>\n<p id=\"formatHint\">Please use the DD/MM/YYY format</p>\n```\n\nNote that `aria-describedby` can reference multiple `id` values, such as hints and error messages. \n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-512",
    "Summary": "AU - OTD - Links do not visually or programmatically indicate that they open in a new window",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nLinks must be self-explanatory or be disambiguated by their surrounding context.\n\nThere are links that open in a new window. The links do not visually or programmatically indicate that they open in a new window. This may disadvantage several user groups. For example, it may be disorientating for those that find navigating the web cognitively challenging, as well as keyboard and screen reader users.\n\nThis is not a strict WCAG failure. However, HSBC DCE have identified that this issue fails the HSBC Accessibility Framework. \n\n## \n\nThis can be seen on AU - OTD. On the \"HSBC Term Deposit Account – Terms and Conditions\" modal dialog which is triggered by completing the personal details capture page, there are several links that open a new window with no warning. \n\n![AU - OTD - Modal containing links that do not indicate that they open in a new window](image1.png)\n![Markup of links](image2.png)\n\n## \n1. Observe that the links open in a new window.\n2. Inspect the links and review the DOM.\n3. Observe that the behaviour is not visually or programmatically indicated\n\n## \n\nMake sure that the links communicate that they open a new window. \n\nMake sure that this information is available to all users. It is not acceptable to have the link warn users through just hidden text. That is because hidden text is not immediately available to all users. Where possible, update the link text to communicate that they links open in a new window. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings (opens in a new window)</a>\n```\n\nWhen this is not possible, provide icons that communicate the same information. Make sure that it is alternative text. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings <img src=\"windowIcon\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [WCAG - G201 Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html), [NC State University - Links and new windows](https://accessibility.oit.ncsu.edu/it-accessibility-at-nc-state/developers/accessibility-handbook/mouse-and-keyboard-events/links/links-and-new-windows/), [Yale - Web Accessibility - Links](https://usability.yale.edu/web-accessibility/articles/links), [University of Washington - Using Meaningful Link Text](https://www.washington.edu/accessibility/links/), [A11y Project - Valid and Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-507",
    "Summary": "AU - OTD - Description list not semantically declared",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThat are elements that are visually communicated as being key and value pairs. However, this structure has not been programmatically determined.\n\n## \n\nThis can be seen on AU - OTD. On the personal details page. On the personal details description list \n\n![AU - OTD - Personal details description list not marked up semantically](image2.png)\n![Markup of description list](image3.png)\n\nThis can also be seen on the review page, and the confirmation page.\n\n![Our details description list not marked up semantically](image4.png)\n![Markup of description list](image5.png)\n\n## \n1. Observe description list items.\n2. Inspect the elements in the DOM.\n3. Observe that the list items have not been marked up, such as `dl`, `dt`, and `dd`.\n\n## \n\nMark up the description list using `<dl>`, `<dt>`, and `<dd>`. Make sure that each set of list items is contained in a single `<dl>`, contain each individual term within `<dt>` tags and each descriptions within `<dd>` tags. Only use separate `<dl>` tags when the list items are contained logically and visually in separate, distinct lists. For example:\n\nMark up the list using description list semantics to communicate the relationship between terms and their descriptions. For example:\n\n```\n<dl>\n  <dt>\n    Student name\n  </dt>\n  <dd>\n    John Smith\n  </dd>\n  <dt>\n    Student Number\n  </dt>\n  <dd>\n    1234\n  </dd>\n</dl>\n```\n\nFor more details, see [WAI Tutorials - Description Lists](https://www.w3.org/WAI/tutorials/page-structure/content/#description-lists).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-510",
    "Summary": "AU - OTD - Form fields and visual labels have incorrect association",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationship to users. Content may otherwise seem unstructured or disorganised.\n\nThere is a checkbox label that is not correctly associated with their visual labels. The purpose of the form fields may be unclear to users. \n\n## \n\nThis can be seen on AU - OTD. On the personal details page. On the confirmation checkbox. \n\n![AU - OTD - Checkbox label not associated correctly](image1.png)\n![Markup of checkbox](image2.png)\n\n## \n1. Observe the visual labels for the checkbox\n2. Inspect the checkbox and review the DOM. \n3. Observe that there is an attempt to associate the visual labels and checkbox.\n4. Observe that the association has not been implemented correctly.\n5. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that form fields are associated with their visual labels. This can be done with `label` or `aria-labelledby`. Make sure that the `id` values used match appropriately. For example:\n\n```\n<label for=\"consent\">I confirm ...</label>\n<input id=\"consent\" type=\"checkbox\" ...>\n```\n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. For more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-509",
    "Summary": "AU - OTD - Interactive elements do not receive keyboard focus",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Checkbox",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements must be entirely compatible with a keyboard. \n\nUsers should never need to use a mouse. Otherwise, screen reader, keyboard, and switch users, may be unable to control the interactive element. There are interactive elements that that do not receive focus when tabbing through the page. As a result, they cannot be operated with a keyboard. \n\n## \n\nThis can be seen on AU - OTD. On the personal details page. On the \"I confirm these details are correct\" checkbox. \n\n![AU - OTD Checkbox does not receive focus](image1.png)\n![Markup of the checkbox](image2.png)\n\n## \n1. Observe the interactive elements. \n2. Attempt to navigate onto it with a keyboard using Tab. \n3. Observe that the elements do not receive keyboard focus.\n4. Observe that there is not an alternative way to access the same information or functionality.\n\n## \n\nMake sure that interactive elements can be navigated onto with a keyboard. They should receive focus when tabbing through the page. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` which can be tabbed onto by default. For example:\n\n```\n<input type=\"checkbox\" id=\"confirm_details\">\n<label for=\"confirm_details\">I confirm these details are correct</label>\n```\n\nTo add custom components into the focus order, use `tabindex=\"0\"`. Make sure that this is used on the container with the interactive role. For example:\n\n```\n<span tabindex=\"0\" role=\"button\">Submit</span>\n```\n\nMake sure that when the component has been added to the focus order that it responds to keyboard commands. For example, make sure that it can be tabbed onto and activated with Return or Space.\n\nFor more information, see [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex), [MDN - Keyboard Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard-navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), and [WAI ARIA - Developing a Keyboard Interface](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard). For practical examples, see [WAI ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/) and [Inclusive Components](https://inclusive-components.design).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-86",
    "Summary": "Disabled element is not programmatically identified",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are disabled elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the disabled state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Observe the inoperable interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the disabled state is not programmatically determined. \n\n## \n\nMake sure that the disabled state is programmatically determined. \n\nUse `disabled`, or `aria-disabled` and `tabindex=\"-1\"`. These techniques remove elements from the focus order and programmatically determine the elements as inoperable. Make sure that the attributes are used on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<button disabled>This is disabled and excluded from the focus order</button>\n<button aria-disabled=\"true\" tabindex=\"-1\">This is disabled and excluded from the focus order</button>\n<span role=\"button\" aria-disabled=\"true\" tabindex=\"-1\">This is disabled and excluded from the focus order</span>\n```\n\nWhen an element become operable, make sure that these attributes get removed or updated. For example:\n\n```\n<button>This is enabled and included from the focus order</button>\n<button aria-disabled=\"false\">This is enabled and included from the focus order</button>\n<span role=\"button\" aria-disabled=\"false\" tabindex=\"0\">This is enabled and included from the focus order</span>\n```\n\nNote that the `disabled` attribute can be used on native `<button>`, `<command>`, `<fieldset>`, `<keygen>`, `<optgroup>`, `<option>`, `<select>`, `<textarea>` and `<input>` elements. With any other elements, use the above `aria-disabled` and `tabindex=\"-1\"` technique. For example:\n\n```\n<a href=\"...\" aria-disabled=\"true\" tabindex=\"-1\">Disabled Link</a>\n```\n\nFor more information, see [MDN - disabled attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) and [Google Developer - Using tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-506",
    "Summary": "AU - OTD - Unordered list not marked up semantically",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThat are elements that are visually communicated as being interrelated, unordered list items. However, this structure has not been programmatically determined.\n\n## \n\nThis can be seen on AU - OTD. On the personal details page. On the Term Deposit disclaimer list. \n\n![AU - OTD - List not marked up semantically](image1.png)\n![Markup of list](image2.png)\n\n## \n1. Observe unordered the list items.\n2. Inspect the elements in the DOM.\n3. Observe that the list items have not been marked up with `ul` and `li`.\n\n## \n\nMark up the unordered list using `<ul>` and `<li>`. Make sure that each set of list items is contained in a single `<ul>` and that the list items themselves are contained within individual `<li>` tags. Only use separate `<ul>` tags when the list items are contained logically and visually in separate, distinct lists. For example:\n\n```\n<ul>\n  <li>Pears</li>\n  <li>Apples</li>\n  ...\n</ul>\n```\n\nFor more information, see [WAI Tutorials - Unordered Lists](https://www.w3.org/WAI/tutorials/page-structure/content/#unordered-list).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-515",
    "Summary": "HK - eStatements - Interactive elements with no accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that do not have an accessible name. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is not programmatically updated may confuse or mislead users.\n\n## \n\nThis can be found on the HK - eStatements page. On the menu button.\n\n![Menu button does not have an accessible name](image1.png)\n\n![Markup of menu button](image2.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is not programmatically determined. \n\n## \n\nMake sure that interactive elements have an appropriate name. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` and provide them with an accessible name through labels or internal text. For example:\n\n```\n<button>Menu</button>\n```\n\nIf this is not possible, use `aria-label` to manually name elements. For example:\n\n```\n<button aria-label=\"Menu\"></button>\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-511",
    "Summary": "AU - OTD - There are multiple parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element not nested correctly according to HTML specification. \n* Elements with duplicate `id`. \n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be seen on AU - OTD. On the personal details page\n\n![Parsing errors flagged by nu validator](image1.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note the multiple different parsing errors.\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements do not have duplicate attributes. \n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9601-17",
    "Summary": "Heading is used inappropriately",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere is a button that does not title or categorise other content but been marked up as headings.\n\n## \n\nThis can be seen on page 4. On the \"Close button\" on the \"Select VPA\" modal. \n\n![iOS: Close button defined as a heading](image1.png)\n\n## \n1. visually note the button\n2. navigate onto the button with a screen reader.\n3. note that the button has been defined as a heading\n\n## \n\nRemove the `header` accessibility trait from the button.\n\nFor more information, see [BBC Mobile Accessibility Guidelines - Headings](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/headings/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9601-15",
    "Summary": "List markup is used inappropriately",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nWebView is used to embed payees. The list heading, for example, \"M\" is marked up as a part of the list. \n\n## \n\nThis can be seen on page 5. On the list of payees. \n\n![List heading marked up as part of the list](image1.png)\n\n## \n1. navigate through the above example with TalkBack\n2. observe that list heading are marked up as list items\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. In this case, the list heading should not be marked up as a list item. You should remove the heading from the list. For example:\n\n```\n<h2>M</h2>\n<ul>\n  <li><button>Money transfer...</button></li>\n  ...\n</ul>\n<h2>N</h2>\n....\n```",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9601-16",
    "Summary": "Disabled property is not set",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThere are controls that are disabled, and cannot be operated until \"From, Account and To\" payee selections are made. The controls are not defined with the disabled state. \n\n## \n\nThis can be seen on page 4. On the \"Amount\" and \"Reference\" text fields.\n\n![Amount text field is disabled but is not programmatically determined as such](image1.png)\n\n## \n1. navigate to the examples with VoiceOver enabled\n2. note that the disabled state is not communicated\n\n## \n\nEnsure that disabled controls have set `isEnabled` attribute set to `false`. \n\nFor more information, see [Apple Developer Documentation - isEnabled](https://developer.apple.com/documentation/uikit/uicontrol/1618217-isenabled)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9601-14",
    "Summary": "Interactive elements without accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that do not have an accessible name. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is not programmatically updated may confuse or mislead users.\n\n## \n\nThis can be seen on page 4. On the \"Add from saved payee\" button, and \"Remove selected payee\" button when a selection of a payee is made. \n\n![Android - Add from saved payee button with no accessible name](image2.png)\n![Android - Remove selected payee button with no accessible name](image3.png)\n\nThis can be seen on page 5. On the close \"Select payee\" screen. \n\n![iOS - Close button with no accessible name](image1.png)\n\n\n## \n1. navigate onto the examples mentioned with VoiceOver or TalkBack running \n2. note the inappropriate or lack of accessible name\n\n## \n\nProvide a descriptive accessible name for the buttons. This can be done using `accessibilityLabel` attribute on iOS and `contentDescription` on Android. \n\nFor more information, see [BBC Mobile Accessibility Guidelines](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/roles-traits-and-properties/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9601-18",
    "Summary": "Error message is not associated with text field",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "High",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe error message is not associated with the text field so the assistive technology users are not made aware of the error when the field receives focus. This has been raised as a high priority issue because the error message itself is hidden from assistive technologies, and does not receive focus. \n\n## \n\nThis can be seen on page 4. On the \"Send request to\" text field with \"This VPA is invalid... \" error message. \n\n![Error message not associated with text field](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the error message is not communicated\n\n## \n\nInclude the error message as a part of the text field's label. This can be done using the `contentDescription` property on Android. For example, the description could be: \"Send request to, Enter VPA, This VPA is invalid. Please check and enter\". For more information, see [Android Developer - Content Labels](https://support.google.com/accessibility/android/answer/7158690?hl=en-GB).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9033-4",
    "Summary": "Text does not respond to device text resize settings",
    "Success Criteria": "1.4.4: Resize text [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nUsers should be able to access content and functionality when the text size is increased by 200%. This is particularly important for low vision users as it can allow them to make content more readable. No loss of functionality should occur at 200% text size. There are parts of the text where dynamic text resizing is not supported.\n\n## \n\nThis can be seen on the \"Transaction details\" heading of page 1, and the \"Get in touch\" heading of page 2, on Android.\n\n![Page 1 (Android): Text resizing not supported on the \"Transaction details\" heading](image2.png)\n\n![Page 2 (Android): Text resizing not supported on the \"Get in touch\" heading](image3.png)\n\n## \n1. Navigate to any of the above-mentioned pages.\n2. Change the font size using Settings > Accessibility > Font Size > Largest, in Android.\n3. Note that some parts of the text do not respond to the text resize settings.\n\n## \n\nText should respond to the text resize changes, as well as not causing any loss of content or functionality. For more information, see [Google Developer Training - Accessibility Type Size](https://google-developer-training.github.io/android-developer-advanced-course-concepts/unit-3-make-your-apps-accessible/lesson-6-accessibility/6-1-c-accessibility/6-1-c-accessibility.html#type) and [Orange Accessible Guidelines - Android Text Size](https://a11y-guidelines.orange.com/en/mobile/android/development/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9033-1",
    "Summary": "Button has no button role",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them, and users may not perceive their purpose and operation.\n\nThe \"Get help\" button does not have a button role.\n\n## \n\nThis can be seen on page 1, with the \"Get help\" button, on both iOS and Android.\n\n![Page 1 (iOS example): \"Get help\" button does not have button semantics](image1.png)\n\nThis can also be seen on page2, with the \"Chat with us\" button, on both iOS and Android.\n\n![Page 2 (Android example): \"Chat with us\" button does not have button semantics](image2.png)\n \n## \n1. Navigate onto the above elements with a screen reader.\n2. Note that their operational roles are not entirely communicated.\n\n## \n\nWhere possible, use native controls to implement functionality. These have extensive built-in accessibility.\n\nOn iOS, use the native `UIButton` element to define the \"Get help\" button, as the button semantics are built into the native elements by default. For more information, see [Apple Developer Documentation - UIButton](https://developer.apple.com/documentation/uikit/uibutton).\n\nIf this is not possible, roles can be added using `UIAccessibilityTraits`, such as the button trait. See, [Apple Developer Documentation - UIAccessibilityTraits](https://developer.apple.com/documentation/uikit/uiaccessibility/uiaccessibilitytraits).\n\nOn Android, use the native `Button` element to define the \"Get help\" button, as the button semantics are built into the native element by default. For more information see [Android Developer - Button](https://developer.android.com/reference/android/widget/Button) and [BBC Mobile Accessibility - Actionable Elements](http://www.bbc.co.uk/accessibility/forproducts/guides/mobile/actionable-elements/).\n\nIf this is not possible, [AccessibilityEvents](https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent#:~:text=An%20accessibility%20event%20is%20fired,of%20the%20user%20interface's%20context.) can be used to create custom views. Also, see [Google Support](https://support.google.com/accessibility/android/answer/6378990?hl=en) which gives some context around adding roles to custom views.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9033-7",
    "Summary": "Informative icon has no alt attribute",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on may otherwise be miscommunicated by assistive technology. The location pin does not have an alternative text despite communicating unique or meaningful information. \n\n## \n\nThis can be found on page 1. On the location pin within the maps.\n\n![Pin on Android and iOS](image1.png)\n\n## \n1. Navigate to the location pin icon using VoiceOver or TalkBack\n2. Confirm that they do not have an alternative text\n\n## \n\nProvide an appropriate text alternative for the location pins. The pinned address should be communicated in the text alternative, as depicted visually. This can be done using the `accessibilityLabel` attribute and `android:contentDescription` attribute on iOS and Android respectively. \n\nFor more information, see [BBC Mobile Accessibility Guidelines - Alternatives for non text content](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/alternatives-for-non-text-content/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-14",
    "Summary": "Focus order includes off-screen element",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere are three anchor tags used to define the homepage link that individually receives keyboard focus. This may particularly disadvantage keyboard users who often navigate by tabbing through the interactive elements. Two of the links are visually invisible and receive focus which may confuse or frustrate users. \n\n## \n\nThis can be seen on the functional image links at the top left of the page on all pages. \n\n![Focus indicator of one of the links](image.png)\n![Markup of the visually hidden element](image1.png)\n\n## \n1. Using just your keyboard, tab through the above.\n2. Observe that focus goes onto elements that are not visible\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in meaningful order. \n\nIn this case, make sure that the non-interactive elements do not receive keyboard focus. If possible, remove such elements from the DOM. \n\nIf this is not possible make sure that the elements are excluded from the focus order. This can be achieve with with the HTML `hidden` or CSS `display:none`. Both will hide the element from all users. This same can be achieved by using both `aria-hidden=\"true\"` and `tabindex=\"-1\"` on the same element. For example:\n\nFor example:\n\n```\n<a class=\"visuallyOffScreen\" aria-hidden=\"true\" tabindex=\"-1\"> ... </a>\n```\n\nFor more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-18",
    "Summary": "Misuse of list semantics",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nList markup is used on individual links. Content should be programmatically determined as a list only if there are many list items. \n\n## \n\nThis can be seen on the mega menu, when \"About\" is expanded. \n\n![Links marked up as individual lists](image.png)\n![Markup of the link as an individual list](image1.png)\n\n## \n1. Observe the ordered list item\n2. Inspect the elements in the DOM.\n3. Note that the individual link element is marked up as a list\n\n## \n\nMake sure that list semantics are used logically. In this case, you could have the links in a list. For example:\n\n```\n<ul>\n  <li>Diversity and Inclusion ... </li>\n  <li>Our Heritage ... </li>\n</ul>\n```\n\nAnother option would be to remove the list semantics. For more information, see [WAI Tutorials - Unordered Lists](https://www.w3.org/WAI/tutorials/page-structure/content/#unordered-list).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-15",
    "Summary": "List heading is marked up as one of the list items",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nList headings are marked up as one of the list items. \n\n## \n\nThis can be found on the mega menu. On the navigation items. \n\n![List headings that are marked up as list items](image1.png)\n![Markup of heading as list item](image.png)\n\n## \n1. Navigate through the above elements and inspect it \n2. Observe that the list heading is programmatically marked up as a list item\n\n## \n\nMarkup the heading using appropriate heading semantics, and nest it as a sibling to the `<ul>` element.  For example: \n```\n<h3>Executive search</h3>\n<ul>\n    <li>Chief Executive Office Board of Directors</li>\n     ...\n</ul>\n``` \nFor more information see, see [WAI Tutorials - Lists](https://www.w3.org/WAI/tutorials/page-structure/content/#lists).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-24",
    "Summary": "Footer animation does not pause after animations are paused",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nUsers must be able to pause, stop, or hide, any content that automatically moves, scrolls, or blinks. \n\nThere is a background image \"H & S\" which transforms in size in response to page scroll. Activating the \"pause animations\" button does not pause this functionality. That said, the animation last less than 5 seconds and so it out of scope for the \"Pause, Stop, Hide\" success criterion. As a result, this has been raised as an Additional Issue. \n\n## \n\nThis can be seen on the footer on all pages. \n\n![Background image transformation in response to page scroll](image.png) \n\n## \n1. Navigate onto the footer\n2. Observe that the background image (H & S) transforms in size in response to page scroll\n\n## \n \nWhen the pause animations button is pressed, also pause the moving background image",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-5",
    "Summary": "Expandable element is not programmatically identified",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are expandable elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be seen on the header on all pages. On the navigation menu buttons that can be expanded (\"Services\", \"Industry expertise\", \"About us\"). \n\n![Menu buttons with the insufficiently descriptive label](image.png)\n![Markup of the services button](image1.png)\n\n## \n1. Observe the expandable interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the expandable state is not programmatically determined. \n5. Observe that the state is not available through text. \n\n## \n\nMake sure that the expandable state is programmatically determined. \n\nUse `aria-expanded` and update the `true` and `false` value appropriately. Make sure that the attribute is on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<button aria-expanded=\"true\">This is expanded</button>\n<button aria-expanded=\"false\">This is collapsed</button>\n<span role=\"button\" aria-expanded=\"true\" tabindex=\"0\">This is expanded</span>\n<span role=\"button\" aria-expanded=\"false\" tabindex=\"0\">This is collapsed</button>\n```\n\nFor more information, see [WAI-ARIA Practices - Accordion](https://www.w3.org/TR/wai-aria-practices-1.2/#accordion), [WAI ARIA - Disclosure](https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure), and [ADG - Marking elements expandable](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/expanded/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-4",
    "Summary": "Heading in mega menu not marked up semantically",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that have inappropriate accessible names. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users.\n\nThe navigation menu buttons have their accessible name derived from the `aria-label` that is set to \"Expand mega menu\". \n\n## \n\nThis can be seen on the header on all pages. On the navigation menu buttons that can be expanded(\"Services\", \"Industry expertise\", \"About us\"). \n\n![Menu buttons with the insufficiently descriptive label](image.png)\n![Markup of the services button](image1.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nMake sure that interactive elements have an appropriate name. Provide the buttons with an appropiate accessible name through labels or internal text. For example:\n\n```\n<button aria-expanded=\"false\">Services</button>\n```\n\nIf this is not possible, use `aria-label` to manually name elements. For example:\n\n```\n<button class=\"services\" aria-label=\"Services\" aria-expanded=\"false\"></button>\n```\n\nUse these techniques to provide appropriate accessible names. Accessible names should succinctly describe purpose and functionality. \n\nFor more information, see [WAI Tutorials - Labeling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-21",
    "Summary": "Functional image has no alt attribute",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere are headings that categorise the list items. These elements have not been marked up as headings. \n\n## \n\nThis can be found on the mega menu with the navigation items, such as \"Services\", \"Executive search\", and \"Leadership\".\n \n![Heading in mega menu not marked up](image.png)\n![Heading currently marked up as list item](image1.png)\n\n## \n1. Visually note the headings.\n2. Inspect the elements in the DOM.\n3. Note that the headings have not been marked up, such as `<h1>`, `<h2>`, and so on.\n\n## \n\nWhen elements title or categorise other content, use headings with appropriate heading levels. Make sure that the heading levels used correctly communicate the structure of the page, such as the parent and child relationship between the headings. For example: \n\n```\n<!-- Mega menu -->\n<h2>Services</h2>\n<h3>Executive search</h3>\n<ul>\n    <li>Chief Executive Office Board of Directors</li>\n     ...\n</ul>\n<h3>Leadership</h3>\n<ul>\n    <li>Succession Planning</li>\n     ...\n</ul>\n<h3>View all services</h3>\n...\n``` \n\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-9",
    "Summary": "Pause functionality not available for all users",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. \n\nThe logo at the top left of the page does not have alternative text.\n\n## \n\nThis can be seen on the header on all pages. On the navigation menu buttons that can be expanded(\"Services\", \"Industry expertise\", \"About us\"). \n\n![Logo at the top left of the page](image.png)\n![Logo at the top of the page, after scrolling down](image1.png)\n![Markup of the logo](image2.png)\n\n\n## \n1. Inspect the functional images.\n2. Confirm that it does not have an alternative text. \n\n## \n\nFunctional images need to communicate the action or outcome of the functionality, such as the destination with image links. For an inline SVG, this can be done by adding a `<title>` or `<desc>` element as the first child of the `<svg>` element. For example:\n\n```\n<svg role=\"img\" aria-labelledby=\"uniqueTitleID uniqueDescID\"...>\n      <title id=\"uniqueTitleID\">Heidrick & Struggles Homepage</title>\n      <desc id=\"uniqueDescID\">A longer, more complete description for complex graphics.</desc>\n</svg>\n```\n\nFor more information, see [Web Accessibility Tutorials - Functional Images](https://www.w3.org/WAI/tutorials/images/functional/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9042-23",
    "Summary": "US - M2NMI Inline - Links do not visually or programmatically indicate that they open in a new window",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Heidrick & Struggles",
    "Description": "## \n\nUsers must be able to pause, stop, or hide, any content that automatically moves, scrolls, or blinks. \n\nThere is a pause button that becomes visible when receiving keyboard focus that disables all animations on the page. This functionality is only available to keyboard users. Non-keyboard users may not realise that this functionality is available. The animations may be a cognitive overload to such users. \n\nThis has been raised as an Additional Issue because there is technically a mechanism. However, the mechanism may not be easily available to all users.\n\n## \n\nThis can be seen on all pages. The pause button becomes visible when it receives keyboard focus at the start of the page. \n\n![Pause animation button receiving keyboard focus on page 2](image.png)\n\n## \n1. Navigate onto the above.\n2. Use a keyboard and tab onto the pause button\n3. Note that the only way to access the pause button is by using a keyboard \n\n## \n\nIncoportate the pause button into the design of the page so that it is visible at all times, and can be used by all users. \n \nAs well, where possible, support the reduced motion media query. For more information, see [MDN - Reduced Motion](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) and [CSS Tricks - Reduced Motion Media Query](https://css-tricks.com/introduction-reduced-motion-media-query/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-76",
    "Summary": "US - M2NMI Inline - Current date is incorrectly defined",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are parsing errors.  More specifically, there are elements with invalid nesting. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include elements with invalid nesting.\n\n## \n\nMake sure that the nesting of elements is allowed by the HTML specification. For example:\n\n```\n<!-- you cannot nest interactive items within each other -->\n<!-- in this example, the issue is created by the link within the button -->\n\n<button><a href=\"...\">Submit</a></button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-519",
    "Summary": "Select all buttons are not consistently styled",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nLinks must be self-explanatory or be disambiguated by their surrounding context.\n\nThere are links that open in a new window. The links do not visually or programmatically indicate that they open in a new window. This may disadvantage several user groups. For example, it may be disorientating for those that find navigating the web cognitively challenging, as well as keyboard and screen reader users.\n\nThis is not a strict WCAG failure. However, HSBC DCE have identified that this issue fails the HSBC Accessibility Framework. \n\n## \n\nThis can be seen on the US - M2NMI Inline page. On the \"See pre-payment disclosure\" link. \n\n![Prepayment disclosure link](image1.png)\n![Markup of prepayment disclosure link](image2.png)\n\n## \n1. Observe that the links open in a new window.\n2. Inspect the links and review the DOM.\n3. Observe that the behaviour is not visually or programmatically indicated\n\n## \n\nMake sure that the links communicate that they open a new window. \n\nMake sure that this information is available to all users. It is not acceptable to have the link warn users through just hidden text. That is because hidden text is not immediately available to all users. Where possible, update the link text to communicate that they links open in a new window. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings (opens in a new window)</a>\n```\n\nWhen this is not possible, provide icons that communicate the same information. Make sure that it is alternative text. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings <img src=\"windowIcon\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [WCAG - G201 Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html), [NC State University - Links and new windows](https://accessibility.oit.ncsu.edu/it-accessibility-at-nc-state/developers/accessibility-handbook/mouse-and-keyboard-events/links/links-and-new-windows/), [Yale - Web Accessibility - Links](https://usability.yale.edu/web-accessibility/articles/links), [University of Washington - Using Meaningful Link Text](https://www.washington.edu/accessibility/links/), [A11y Project - Valid and Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-526",
    "Summary": "Page lang attribute not defined",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are elements that are visually highlighted as currently relevant. They are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the current date state is incorrectly defined. The `aria-current=\"date\"` attribute should be added to the `<td>` element, which is the parent of the `<div>` element that currently has the `aria-current=\"date\"` attribute. \n\n## \n\nThis can be seen on US - M2NMI Inline.  On the \"Pay an existing international payee\" page.\n\n![Date picker](image1.png)\n![Markup of current date](image2.png)\n\n## \n1. Observe the elements visually highlighted are currently relevant.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the current state state is not programmatically determined. \n5. Observe that the state is not available through text. \n\n## \n\nEnsure that the `aria-current=\"date\"` attribute is added to the `<td>` element, which is currently the parent of the `<div>` element that contains the `aria-current=\"true\"`.  For example:\n\n```\n<td aria-current=\"date\" ...>\n    <div></div>\n</td>\n```\n\nFor more information, see [ADG - Marking elements as the current one](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-40",
    "Summary": "Links opening in a new window are not declared",
    "Success Criteria": "3.2.4: Consistent Identification [AA]",
    "Component": "Checkbox",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision, Cognitive",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nComponents that serve the same purpose or function must be consistently identified. This includes both visual presentation and semantics. \n\nSelect all checkbox on page 2 (Documents table) and page 3 (Templates) are styled differently but serve the same functionality. The templates checkbox is styled purely with CSS and styling does not change when pressed. \n\nThis is unlike the checkbox on the documents page, which is an `<input type=\"checkbox\" ...>` and visually changes when pressed.\n\n## \n\nThis can be seen on page 2 and page 3. On the select all checkbox, at the top left of the table. \n\n![Select all checkbox identified differently on two pages](image.png)\n\n![Markup of templates checkbox](image1.png)\n![Markup of documents checkbox](image2.png)\n\n## \n1. navigate through the above components \n2. observe that they serve a similar purpose\n3. note that their identification is not consistent.\n\n## \n\nThe labelling and visual design of elements must be consistent —  although not necessarily identical. In this case, use native checkboxes, label them correctly, and make sure that they are visually updated consistently.\n\nFor more information, see [WAI Tutorials - Grouping Controls](https://www.w3.org/WAI/tutorials/forms/grouping/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-4",
    "Summary": "Pagination items are not marked up as a list",
    "Success Criteria": "3.1.1: Language of Page [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nKnowing the language of a page enables assistive technology to correctly pronounce content. It is used by screen readers, Braille displays and other text-to-speech programs. Such technology may mispronounce content. It can also affect other aspects such as spellcheckers in editable areas.\n\nPages on the site do not have appropriate language attribute.\n\n## \n\nThis can be seen on pages 1, 2, 3, 7 and 11.\n\n![Markup of html element without lang attribute on page 1](image1.png)\n\n## \n1. View the source of the page\n2. Note that there is no appropriate `lang` attribute for the `<html>` tag\n\n## \n\nSpecify a `lang` attribute for all pages. This is included in the opening `<html>` tag; for example `<html lang=\"en\">` for pages in English. For an exhaustive list of 2-letter language codes, refer to this [list of ISO 639-codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n\nThe W3C also provide guidance on [Authoring HTML: Language declarations](http://www.w3.org/TR/i18n-html-tech-lang/#overall) and [Choosing a Language Tag](http://www.w3.org/International/questions/qa-choosing-language-tags).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-9",
    "Summary": "There are parsing issues",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nLinks that open a new window do not make this behaviour known to all users.  \n\n## \n\nThis can be seen on page 1. On the \"Trouble logging in? \" link at the bottom of the logon page. \n \n![Link that does not indicate that they open in a new window](image.png)\n\n![Markup of the link that opens in a new window](image1.png)\n \n## \n1. navigate onto the above links \n2. note that they open in a new window\n3. note that users are not warned about this behaviour \n\n## \n\nThe link text should be made obvious that it opens in a new window. For example: \n\n```\n<a href=\"#\"> Trouble logging in? (opens in a new window)</a>. \n```\n\nAlternatively, you could use an icon with an alt text. For example, \n\n```\n<a href=\"#\">Trouble logging in? <img src=\"...\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [W3C - Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-50",
    "Summary": "There is no heading level 1",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Pagination items are not marked up as a list \n\nThat these buttons form a set is implied by the numbering (1, 2, 3, etc.). This gives a clue that they are list items. However, the buttons are the edges of the set are not numbers. These are the first, previous, next, and last controls. So not all of the list items are enumerated. \n\n\n## \n\nOn page 3, this can be seen with results pagination at the bottom of the templates table. \n\n![Page 3 is the current page](image2.png)\n![Markup of list](image1.png)\n\n## \n1. navigate to the pagination element \n2. inspect the pagination element \n3. note that the pagination items are not marked up as a list\n\n## \n\nMark up the pagination items as an ordered list. Although not strictly required, we also suggest containing the widget in a labelled `<nav>`. For example:\n\n```\n<nav aria-label=\"Template Pagination\">\n    <ol>\n        <li><a href=\"...\">Previous Page</a</li>\n        <li><a href=\"...\" aria-current=\"true\">Page 1</a></li>\n     ...\n    </ol>\n</nav>\n```\n\nFor more information, see [WAI Tutorials - Ordered List](https://www.w3.org/WAI/tutorials/page-structure/content/#ordered-list), as well as [a11y Matters - Pagination](https://www.a11ymatters.com/pattern/pagination/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-3",
    "Summary": "Custom elements are not appropriately marked up",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nThere are parsing issues due to invalid nesting of elements. \n\n## \n\nThis can be seen on all pages.\n\n![Parsing issues flagged by Nu Validator](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-1",
    "Summary": "Disabled state is not marked up",
    "Success Criteria": "Additional Issue",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nThe first heading on the page is not marked up as heading level 1.  \n\n## \n\nThis can be seen on page 1. On the login heading. \n\n![Login heading marked up with h2](image.png)\n\n![Markup of login heading](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the headings do not begin from heading level 1 \n\n## \n\nEvery page should ideally have a heading level 1. This heading should act as the main heading of the page, and describe its contents. Assistive technology users use this to oreintent themselves. For example:\n```\n<h1>Login</h1>\n```\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-67",
    "Summary": "Buttons have placeholder accessible names",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button, Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. Drop downs and switch elements are not appropriately marked up \n\n## \n\nThis can be seen on page 9 with the \"Sign rights\", \"Invite rights\", \"Edit rights\" dropdowns and \"Controller rights\" switch. \n\n![Dropdown and switch elements that are not marked up ](image.png)\n![Markup of dropdown](image1.png)\n![Markup of switch](image2.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their roles and states are not communicated\n\n## \n\nIf custom elements serve the same purpose and operation as standard elements, use standard elements. `<button>`,` <select>`, etc. The level of assistive technology support they provide is the most effective way to provide accessibility. \n\nUse native semantics, such as `<button>` for the switch and ` <select>` for the dropdown. Do not rely on scripting to make keyboard elements operable if equivalent native elements can be used instead. These provide out-of-the-box accessibility.\n\nWith the switch, you can use `role=\"switch\"` and `aria-checked` to build on the button. Another option is using `aria-pressed`. For more information, see [Smashing Magazine - Building Inclusive Toggle Buttons](https://www.smashingmagazine.com/2017/09/building-inclusive-toggle-buttons/) and [Inclusive Components - Toggle buttons](https://inclusive-components.design/toggle-button/). \n\nAs well, consider that visually custom elements can be made from standard elements. For example, the switch can be made with `<input type=\"checkbox\">` that is customized with CSS. The underlying behavior of the standard and custom elements are the same.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-51",
    "Summary": "Buttons do not have an accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. Buttons that are visually disabled are not marked up as such. \n\n## \n\nThis can be seen on page 3. On the pagination buttons at the bottom of the templates table. They have a CSS class for the disabled property, but they do not have the equivalent HTML attribute.  \n\n![Pagination buttons](image.png)\n![Markup of pagination buttons](image1.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their disabled state is not communicated.\n\n## \n\nEnsure that buttons that are disabled are marked up as such. This can be done using `disabled` attribute on the control. For example:\n\n```\n<button class=\"disabled\" disabled>Next page</button>\n```\n\nFor more information, see [MDN - disabled attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-48",
    "Summary": "Sortable header not marked up",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There are buttons with placeholder accessible names. \n\n## \n\nThis can be seen across the website in the header. The dashboard icon has an accessible name of \"Assessments\", but leads to a page called dashboard.\n\n![Icon leads to the dashbord](image4.png)\n![Icon is named \"assessments\"](image5.png)\n\nThis can also be seen on the sidebar on the expand/ collapse button across all of the pages. The expand icon has an accessible name of \"keyboard_arrow_up\".\n\n![Expand/ collapse buttons](image7.png)\n![Markup of expand/ collapse button](image6.png)\n\nThis can be seen on page 3. On the pagination buttons below the templates table. \n\n![Pagination buttons](image.png)\n![Markup of buttons](image1.png)\n\nThis can also be seen on the \"Remove Participant\" button on page 9.\n\n![Remove participant button on page 9](image2.png)\n![Button in the DOM](image3.png)\n\n## \n1. navigate through the above labels\n2. note that they do not descriptively describe the topic or purpose\n\n## \n\nPlace the icon buttrons inside a `<button>` element. This will provide built in accessibility, such as adding the button to the focus order and providing a role. Use `aria-label` to provide a name for the button. Hide the internal icons. For example:\n\n```\n<button aria-label=\"Remove participant\" ...>\n  <i class=\"...\" aria-hidden=\"true\">...</i>\n</button>\n```\n\nFor more information, see [MDN - button element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) and [MDN - using aria-label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-41",
    "Summary": "Active pagination item is not marked up",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nElements do not have an accessible name. \n\n## \n\nThis can be seen on page 3. On the file upload button above the templates table. \n\n![File upload button does not have an accessible name](image.png)\n![Markup of file upload button without an accessible name](image1.png)\n\nThis can also be seen on the buttons in all 3 formatting toolbars on page 5. For example, the Undo and Redo buttons.\n\n![Undo and Redo buttons, page 5](image6.png)\n![Undo and Redo buttons have no name](image7.png)\n\nThis can also be seen on page 6 on the \"More\" button.\n\n![More button, page 6](image4.png)\n![More button in DOM](image5.png)\n\nThis can also be seen on page 7. The file upload button in the modal dialog.\n\n![file upload button does not have an accessible name](image2.png)\n![Markup of file upload button without an accessible name](image3.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. note that their accessible name is not communicated\n\n## \n\nEnsure that elements have an accessible name. For example, for the upload button, ideally this should be achieved using visible button text. Otherwise, this can be achieved using an invisible `aria-label` or by using CSS to visually hide the text. For example:\n\n```\n<button aria-label=\"Upload (Excel document)\" ...>...</button>\n```\n\nFor more information, see [WAI - Labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-27",
    "Summary": "Custom elements are not programmatically associated with their visual labels",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Table",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There are sortable table headers that do not have their state programmatically determined. \n\n## \n\nThis can be seen on pages 2 with the documents table headers. \n\n![Table header that are sortable](image.png)\n![Markup of table header without aria-sort marked up](image1.png)\n\nThis can be seen on pages 3 with the templates table headers. \n\n![Table header that are sortable](image2.png)\n![Markup of table header without aria-sorted marked up](image3.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that the sorted state is not communicated \n\n## \n\nEnsure that sorted state is communicated to assistive technology users. This can be done through`aria-sort` on the table header. As well, although not strictly required `aria-roledescription` can be useful with sort buttons. For example:\n\n```\n<th aria-sort=“ascending”>\n   <button aria-roledescription=\"sort button\">\n      Document title \n   </button>\n</th>\n```\n\nFor more information, see [W3C - aria sort](https://www.w3.org/TR/wai-aria-1.1/#aria-sort) and for a working example, see [WAI - Data Grid example](https://www.w3.org/TR/wai-aria-practices/examples/grid/dataGrids.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-19",
    "Summary": "Placeholder is used as the only label on control",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe currently active pagination item is visually indicated. However, this state has not been marked up.  \n\n## \n\nThis can be seen on the \"results per page\" pagination navigation, on top of the documents table on page 2.\n\n![60 results per page currently active](image.png)\n![Markup of the active pagination item](image1.png)\n\nThis can also be seen on the results pagination at the bottom of the templates table on page 3. \n![Page 3 is the current page](image2.png)\n![Markup of the active pagination item](image3.png)\n\n## \n1. Navigate onto one of the pagination elements\n2. Visually note the state of the element\n3. Inspect them and note that the state has not been marked-up  \n\n## \n\nMake sure that the currently active link is marked up. You can use the `aria-current` attribute to achieve this. For example:\n \n``` \n<a class=\"active\" href=\"#\" aria-current=\"true\"></a>\n```\n\nThis must be updated and removed as the value changes. For more information, see [WAI ARIA - aria current](https://www.w3.org/TR/wai-aria-1.1/#aria-current).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-66",
    "Summary": "Check boxes are not labelled",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Button, Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. There are custom elements that are not programmatically associated with their visual labels.\n\n## \n\nThis can be seen on page 9 with the \"Sign rights\", \"Invite rights\", \"Edit rights\" drop downs and \"Controller rights\" switch.\n\n![Dropdown and switch elements that are not keyboard operable](image.png)\n![Markup of dropdown](image1.png)\n![Markup of switch](image2.png)\n\n## \n1. visually note the labels for the custom elements\n2. inspect the custom elements \n3. note that the custom elements and labels are not programmatically associated\n\n## \n\nMake sure that the dropdowns and switch are labelled. There are several methods — `label`, `aria-label`, `aria-labelledby`, hidden text. You can also use `aria-describedby` to associate the help text with the fields. For example:\n\n```\n<label for=\"sign-rights\">Sign rights</div>\n<select id=\"sign-rights\" aria-describedby=\"help-text\">\n   <option>Sign</option>\n   <option>Sign and witness</option>\n   <option>No sign</option>\n</select>\n<div id=\"help-text\">Manages e-signing</div>\n```\n\nFor more information, see [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-17",
    "Summary": "Change of context on user input",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nThere are fields where the placeholder attribute is relied upon to label fields. This means that the fields do not have a permanent label. \n\n## \n\nOn page 2, this can be seen on the placeholder text on the \"filter labels\" control. This can be accessed by pressing the button under labels column. \n\n![Placeholder text \"Filter labels\"](image.png)\n![Markup of the placeholder text](image1.png)\n\nOn page 5, this can be seen with the document input field.\n\n![Document input field](image6.png)\n![Document input field in DOM](image7.png)\n\nOn page 6, this can be seen with the Reply input.\n\n![Reply input, page 6](image5.png)\n![Markup of the comment input](image4.png)\n\nOn page 9, this can seen with the input fields, such as \"Email Address\" and \"Name\".\n\n![Fields are only labelled using the placeholder](image3.png)\n![Organisation field in DOM](image2.png)\n\n## \n1. Navigate to the above pages\n2. Inspect the input fields\n3. Note that they rely on placeholder as a label\n\n## \n\nMake sure that these fields have a permanent label. These can be added using the label element. If you wish to use them along with the current style, they could be implemented as floating labels. For more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/) \n\nA complicating factor is that several examples have icons. The challenge is that these are not always obvious. For example, the magnifying glass communicates some sort of search, but it is not explicitly \"filter labels\".  Similarly, the organisation name does not use an obvious icon.\n\nAs well, not all of the fields have icon. If you absolutely must use icons and cannot add visible labels, use them across the form fields and draft them to be more obvious. Note that you will otherwise need to ensure that the fields have an accessible name (which is usually derived from the `<label>`) which can be done with `aria-label`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-10",
    "Summary": "Table function button accessible names are not descriptive",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "##  \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nCheckboxes are not labelled. There are `<label>` elements, but they are empty. \n\n##  \n \nThis can be seen on page 2. On the checkboxes within the \"My documents\" table. The implicitly associated `<label>` element has no value.\n\n![Check boxes which are not labelled](image.png)\n![Markup of a check box](image4.png)\n\n![Check boxes within the labels menu that are not descriptive](image2.png)\n![Markup of a check boxes](image3.png)\n\nThis can also be seen on page 3. On the checkboxes within the \"My templates\" table. \n\n![Check boxes which are not labelled](image1.png)\n![Markup of a check boxes](image5.png)\n\nThis can also be seen on page 5. On the check boxes within the settings panel, under the \"Comments\" tab. The check boxes are not programmatically associated with their labels. \n\n![Check boxes which are not associated with their labels](image6.png)\n![Markup of \"added comments\" check box not associated with label](image7.png)\n\n## \n1. navigate through the above checkboxes\n2. note that they do not include labels and instructions for all users.\n\n## \n\nEnsure that the check boxes are labelled. There are several methods: explicitly or implicitly associating the checkbox with a `label` element; using an `aria-label attribute`; using an `aria-labelledby` attribute to point to another text element on the page. \n\nInclude a description of the row they are associated with. For example, the labels could include the document title for that row:\n \n```\n<input type=\"checkbox\" id=\"row-1\" type=\"checkbox\">\n<label for=\"row-1\">Select 316 GTE Negotiation</label>\n```\n\nOn the 'select all' checkbox, provide extra context that selecting the checkbox will check, or uncheck, all of the rows. For example:\n\n```\n <input type=\"checkbox\" id=\"desc\" checked>\n <label for=\"desc\">Select all rows</label>\n```\n\nThe W3C provide further guidance. See: [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/) and [Web Accessibility Tutorials - Grouping Elements](https://www.w3.org/WAI/tutorials/forms/grouping/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-5",
    "Summary": "Elements do not have visible focus indicator",
    "Success Criteria": "3.2.2: On Input [A]",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInputs should not cause change of context that may not be obvious to all users. This can particularly disadvantage screen reader and keyboard users use keystrokes to navigate, operate widgets, and control their assistive technology. When a checkbox is activated, keyboard focus is moved to the top of the page.\n\n## \n\nThis can be seen on page 1. On the \"Remember me\" checkbox.\n\n![Focus does not return to checkbox after toggle](image.png)\n\nThis can also be seen on page 2. On the labels checkboxes within the documents table. \n\n![Focus does not return to checkbox after toggle](image1.png)\n\nThis can also be seen on pages 2 and 3. On the sortable table column headers.\n\n![Focus does not return to the sortable column headers on page 2](image2.png)\n\n![Focus does not return to the sortable column headers on page 3](image4.png)\n\n## \n1. Tab through the above examples — use just your keyboard.\n2. Activate the specified control.\n4. Note the change of context.\n\n## \n\nInputs should not change keyboard focus unexpectedly. Ensure that operating everything is predictable. Keyboard focus remains on the checkbox after it is toggle by pressing space. This is the default behaviour when toggling checkboxes. \n\nIf you need to manually move focus, this can be done using `.focus` method. For more information, see [MDN - .focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-28",
    "Summary": "There is no keyboard skip link",
    "Success Criteria": "2.5.3: Label in Name [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The table function buttons have non-descriptive names.\n\n* The \"Send to counter party\" button has name \"send\". \n* The \"Duplicate\" button has name \"content_copy\". \n* The \"Create a related document\" button has name \"note_add\". \n* The \"Move to folder\" button has name \"folder\". \n* The \"Add folder\" button has name \"create_new_folder\". \n* The \"Edit labels\" button has name \"label\". \n\n## \n\nThis can be seen on the table function buttons. \n\n![Button does not have descriptive label](image.png)\n![Markup of the buttons which are not descriptive](image2.png)\n \n## \n1. navigate through the above button names\n2. note that they do not descriptively describe the topic or purpose\n\n## \n\nUse descriptive labels to communicate topic and purpose. You can set the accessible name of the button to its current respective tooltip text as they are descriptive. You can modify the `innerHTML` property of the icon. For example:\n\n```\n<!-- Old value -->\nlabel\n<!-- New value -->\nEdit Labels\n```\n\nAlternatively, you could set the label directly to the button using `aria-label`. If the icons are hidden from assistive technology users, the buttons will no longer have an accessible name. This is explained in ADR_8196 - 25. As such, you will have to implement the later solution.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-6",
    "Summary": "Charts do not show tooltip with keyboard",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Link, Button, Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. There are elements which do not indicate focus.\n\n## \n\nThis can be seen on all pages within the application on the header links and the links within the account dropdown. This includes everything in the header, such as the logo link, \"create\", \"my documents\", and so on. \n\n![All buttons in the header have no visible focus indication](image2.png)\n![Links within the account dropdown have no visible focus indicator](image3.png)\n\nThis can also be seen on all pages within the sidebar. The following elements do not indicate keyboard focus: \n\n* \"In Review\" link, when it is selected. \n* The label links within the \"label\" disclosure\n* Expand and collapse button on the sidebar\n* The \"Add User\" buttons\n* Upload file button\n \n![Links and buttons which have no visible focus indication](image7.png)\n![Add user buttons have no visible focus](image8.png) \n![Upload file button has no focus indication](image9.png)\n\nThis can be seen on page 1. The checkbox and button do not indicate focus (the checkbox has a permanent black border).\n\n![Checkbox and button which do not indicate focus](image.png)\n\nThis can be seen on page 2. The table buttons do not indicate focus. \n\n![Table buttons which do not indicate focus](image4.png)\n\nThis can also be seen on page 5, with the hamburger menu on the sidebar.\n\n![Hamburger menu on the sidebar of page 5](image10.png)\n\nThis can be seen on page 7 with the file upload input and button.\n\n![Button and input have no visible focus indicator](image5.png)\n\nThis can be seen on page 8 with the ok and cancel buttons.\n\n![Buttons have no visible focus indicator](image6.png)\n\nThis can also be seen on page 11 with the Update user button.\n\n![Button has no visible focus indication](image1.png)\n\n## \n1. Keyboard tab onto the above elements.\n2. Note that there is no visible focus indication.\n\n## \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not use `a { outline: none; }`.\n\nFor more information, see [MDN - focus](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus) and [CSS Tricks - Focusing on Focus Tricks](https://css-tricks.com/focusing-on-focus-styles/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-35",
    "Summary": "Button tooltips do not show when using a keyboard",
    "Success Criteria": "2.4.1: Bypass Blocks [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are pages without working skip links. Screen reader, keyboard, and switch users cannot jump to the main content, which can be particularly frustrating if the header and/or navigation contain many links. There are not keyboard operable skip links. \n\n## \n\nThis can be seen on pages on all pages. There is no skip link to skip past the headers and sidebar.\n\n![Content that could be skipped](image.png)\n \n## \n1. keyboard tab from the top of the page on the above pages\n2. note that there is no option to skip the navigation block\n\n## \n\nThe skip link needs to both move the page visually onto the main content and move the focus onto the main content — e.g. either onto the main container or onto the first element within the main container.\n\n```\n<a class=\"sr-only sr-only-focusable\" href=\"#main\">Skip to content</a>\n<nav>\n<!-- nav content -->\n</nav>\n<main id=\"main\" tabindex=\"-1\">\n<!-- main content -->\n</main>\n```\n\nYou can use CSS to visually hide the skip link; while the skip link can be hidden be default, it needs to be visible when it receives focus. This is to benefit sighted keyboard and switch users. Use the `focus` and `active` pseudoclasses to make the link visible when it receives focus.\n\nFor an example CSS class that can be used for hidden text, see [WAI - Hiding the Label Element](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-59",
    "Summary": "Chart relies exclusively on colour to distinguish datasets",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nCharts must be entirely compatible with just a keyboard. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. \n\nWhen hovering over a data point on the chart with a pointer, textual information regarding that visualisation is shown as a tooltip. This information is not available to keyboard users as data point cannot receive focus to show the tooltip. \n\nMoreover, with a screen reader on, only the tooltip which was last visually shown can be accessed using arrow keys as the text element for the tooltip is overridden each time the user hovers on a data point with a pointer. \n\nIf you never use the mouse cursor to prompt a tooltip, then there is no text for the screen reader to announce. This problem is explained in ADR_8196 - 57 as due to this issue there are not reliable text alternatives for the charts. \n\n## \n\nThis can be seen on the pie chart and bar chart on page 13.\n\n![Charts that do not show tooltips with keyboard](image.png)\n\n## \n1. navigate onto the above pages\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that the charts data points do not receive focus, so you cannot show individual tooltips\n\n## \n\nEnsure that the information regarding each data point is displayed as a tooltip when the data point is in keyboard focus.\n\nThis can be done by enabling keyboard navigation for highcharts under `accessibility.keyboardNavigation` chart declaration. `accessibility.keyboardNavigation.focusBorder` should be used for a visible focus indicator. \n\nYou can then set `accessibility.keyboardNavigation.seriesNavigation.mode` to `normal` which will allow keyboard users to use left and right arrow keys to navigate between different data points. \n\nAnother option would be providing a table alternative to the chart. This is explained in ADR_8196 - 59. If this were provided, then it should not be required to make the tooltips available to all users, as there would be an alternative way to access the information. \n\nFor more information, see [Highcharts - seriesNavigation](https://api.highcharts.com/highcharts/accessibility.keyboardNavigation.seriesNavigation) and [Highcharts - Pie chart example](https://www.highcharts.com/demo/pie-basic). On the example, you can tab onto one of the data points, and then use left and right arrow keys to navigate between different data points.\n\nWhen reviewing this issue, see ADR_8196 - 57 and ADR_8196 - 58. These issues are intertwined.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-12",
    "Summary": "Slider control not associated with label",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are buttons above the table which apply certain functions to the documents.\n\nWhen hovering with a pointer over the button, a tooltip is shown which describes the purpose of the button. This tooltip is not shown when tabbing with a keyboard. Sighted keyboard users may difficulties understanding the purpose of the buttons from only icons. \n \n## \n\nThis can be seen on page 2 with the buttons above the documents table. \n\n![Edit labels button with tooltip shown when pointer is hovering over it](image.png)\n![Markup of the button and tooltip](image1.png)\n\nThis can also be seen on page 5 on the document settings buttons: \n\n![Document settings buttons, page 5](image2.png)\n![Download button in DOM](image5.png)\n\nThis can be seen across several pages (05, 06, 09, 10) with all of the buttons in the toolbar. For example, the Undo and Redo buttons:\n\n![Formatting buttons on page 5](image3.png)\n![Formatting buttons in DOM](image4.png)\n\nAcross the same set of pages, this can also be seen on the HSBC copy link in the sidebar.\n\n![Copy link tooltip in sidebar](image6.png)\n![Copy link tooltip in DOM](image7.png)\n![Last accessed date tooltip](image8.png)\n![Last accessed tooltip in DOM](image9.png)\n\n## \n1. navigate onto the above pages\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that the tooltip does not show when the buttons receive focus \n\n## \n\nEnsure that the tooltips are also shown when the buttons receive keyboard focus. The `focus` event listener can be used to achieve this. Make sure that the elements otherwise have an appropriate role and name For example:\n\n```\n<button>\n...\n<!-- hidden CSS icon -->\n<i class=\"downloadIcon\" aria-hidden=\"true\">\n<!-- text that visually appears on focus and names the button for assistive technology -->\nEdit Label\n...\n</button>\n```\n\nFor more information, see [MDN - focus event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-58",
    "Summary": "Visual structure does not match semantics",
    "Success Criteria": "1.4.1: Use of Color [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nPerceiving and operating content must not rely on colour vision. Users with low vision or who are colour blind may struggle to perceive the content, and so will users of screen readers, braille displays, or high contrast settings.\n\nThe charts relies exclusively on colour to distinguish datasets. There are tooltips that provide the information in text. However, as described in ADR_8196 - 59 and ADR_8196 - 57, the tooltips are only available to mouse users.\n\n## \n\nThis can be seen on the pie chart and bar chart on page 13.\n\n![Pie chart and Bar chart which exclusively relies on colour to distinguish datasets](image.png)\n\n## \n1. navigate onto the above content\n2. observe that it is not understandable without seeing colour \n\n## \n\nEnsure that colour vision is not required to differentiate elements. \n\nIf a table is provided as recommended in ADR_8196 - 59, this issue will also be fixed because there will be a table alternative which low vision or colour blind users may use. We also encourage you to review ADR_8196 - 57 as these issues are intertwined. \n\nPatterns or texture can be applied to the charts to visually distinguish between different datasets.  A button can be used to toggle between patterns or no pattern. The pattern can be applied in Highcharts using their `patternfill.js` module. For more information, see [Highcharts - pattern fills](https://www.highcharts.com/docs/chart-design-and-style/pattern-fills)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-44",
    "Summary": "Functional image has not alt attribute",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Slider",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere is a slider control that is not associated with the adjacent text label. \n\n## \n\nThis can be seen on page 3 with the slider input above the templates table. \n\n![Slider input that is not labelled ](image.png)\n![Markup of slider input](image1.png)\n\n## \n1. Visually note the text label of the slider\n2. Inspect the slider\n3. Note that the text is not associated with the slider\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. There are several methods — `label`, `aria-label`, `aria-labelledby`, hidden text, etc. For example:\n\n```\n<label for=\"range-label\">Results per page</label>\n<input type=\"range\" id=\"range-label\" ...>\n```\n\nFor more information, see [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/) and [Web Accessibility Tutorials - Grouping Elements](https://www.w3.org/WAI/tutorials/forms/grouping/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-30",
    "Summary": "Notification updates are not automatically communicated to assistive technology users",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Table",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe main contents of the page are marked-up as a table. This is valid as the data is tabular. However, the contents of the \"label\" popup are also marked up as a table -- which makes them a table within a table. \n\nThe use of table semantics on the \"label\" disclosure does not match the visual structure and may confuse users. \n\n## \n\nThis can be seen on the documents table on the labels popup. \n\n![Labels within the popup](image.png)\n\n![Markup of the label](image1.png)\n\n## \n1. inspect the contents of the \"labels\" popup\n2. note the labels are visually structured as a list but are marked up in a table\n\n## \n\nThe visual structure of the labels should match the semantics. Mark up the labels as a fieldset of check boxes. For example:\n\n```\n<fieldset>\n   <legend>Select labels</legend>\n      <input type=\"checkbox\" id=\"check-1\">\n      <label for=\"check-1\">Label name</label>\n    …\n</fieldset>\n```\n\nFor further information, see [WAI - Grouping controls](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-56",
    "Summary": "Custom elements are not keyboard operable",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThere is a functional image with no alt attribute. As a result, the link it is contained within has no accessible name. \n\n## \n\nIt happened on the \"How do I automate a document?\" answer which can be accessed by entering \"answer\" in the \"Find your answer now\" input field. \n\n![Expand image link](image.png)\n\n![Markup of expand image link](image1.png)\n\n## \n1. inspect the image\n2. note that it has no alt attribute\n\n## \n\nThe functional image should describe the bahvour of the link. For example:\n\n```\n<a href=\"...\">\n<img src=\"...\" alt=\"screenshot with templates and icon elements highlighted, activate to open image in a new window\">\n</a>\n```\n\nNote that the alt attribute of the image itself (when it loads in a new window) should be something that just describes the image, such as \"screenshot with templates and icon elements highlighted\". However, as this image is hosted on another domain, we have assumed that it is out of scope. \n\nHow to support different types of images is communicated in further depth by the W3C. See [Web Accessibility Tutorials - Images](https://www.w3.org/WAI/tutorials/images/). They also provide a [decision tree to explain how to fill the alt attributes](https://www.w3.org/WAI/tutorials/images/decision-tree/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-29",
    "Summary": "Table sortable headers are not keyboard operable",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen content is dynamically added and removed from the page, the changes should be communicated to all users. As the email notifications are toggled, an update text is provided. However, this information is not automatically communicated to assistive technology users.\n\nThis is a failure of WCAG 2.1 (Status Message). It has been raised as an additional issue as HSBC test using WCAG 2.0. \n\n## \n\nThis can be seen on page 2. On the toggle email notification button. \n\n![Toggle notification and update notification on bottom left](image.png)\n![Markup of notification](image1.png)\n\n## \n1. navigate onto the above element with a screen reader \n2. toggle the notification button\n2. note that the notification message is not communicated\n\n## \n\nUse `role=\"status\"` to notify assistive technology users of dynamical changes occuring on the page. For example:\n\n```\n<div role=\"status\">Document recipients will now receive notifications.</div>\n```\n\nFor more information, see [MDN - Using the status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-63",
    "Summary": "Links are not keyboard operable",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Dropdown",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. There are custom elements that do not receive focus when tabbing through the page with a keyboard.\n\n## \n\nThis can be seen on page 6 with the tab control under the \"Comments\" section.\n\n![Tab interface under the \"Comments\" section](image5.png)\n![Markup of tab interface](image6.png)\n\nThis can also be seen on page 9 with the \"Sign rights\", \"Invite rights\", \"Edit rights\" dropdowns and \"Controller rights\" switch. \n\n![Dropdown and switch elements that are not keyboard operable](image.png)\n![Markup of dropdown](image1.png)\n![Markup of switch](image2.png)\n\n## \n1. navigate onto the above pages.\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that the custom elements does not receive keyboard focus.\n\n## \n\nUse native semantics, such as `<button>` for the switch and ` <select>` for the dropdown. Do not rely on scripting to make keyboard elements operable if equivalent native elements can be used instead. These provide out-of-the-box accessibility.\n\nWith the switch, you can use `role=\"switch\"` and `aria-checked` to build on the button. Another option is using `aria-pressed`. For more information, see [Smashing Magazine - Building Inclusive Toggle Buttons](https://www.smashingmagazine.com/2017/09/building-inclusive-toggle-buttons/) and [Inclusive Components - Toggle buttons](https://inclusive-components.design/toggle-button/).\n\nWith the tab interface, see issue ADR_8196 - 52 which provides information on how to implement them.\n\nOn widgets where this is not possible and controls cannot be replicated with native elements, the following are required for keyboard support:\n\n* Scripted event listeners that support key presses.\n* Use `tabindex=\"0\"` on elements that should receive focus.\n* Ensure that focus is visible when the element receives focus.\n* Use WAI-ARIA roles and states, to also communicate how the widget works to assistive technology users.\n\nFor more information, see [WAI ARIA Practices - Buttons](https://www.w3.org/TR/wai-aria-practices-1.1/examples/button/button.html) and [Collapsible Listbox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-38",
    "Summary": "Charts do not have alternatives",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Table",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nComponents must be entirely compatible with just a keyboard. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. There are sortable table headers that cannot be operated with a keyboard.\n\n## \n\nThis can be seen on the templates table on page 3. On the sortable table headers.\n\n![Table headers which are not keyboard operable](image.png)\n![Markup of table headers which are not keyboard operable](image1.png)\n\n## \n1. navigate onto the above pages\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that table headers cannot be operated with a keyboard.\n\n## \n\nUse native elements, such as `<button>` within the table headers, so that they receive keyboard focus. Do not rely on scripting to make keyboard elements operable if equivalent native elements can be used instead. For example:\n\n```\n<th aria-sort=“ascending”>\n   ...\n   <button>\n      Template title \n   </button>\n   ...\n</th>\n```\n\nWhere it is not possible to use a native `<button>`, use the following techniques.\n\n* Include scripted event listeners that support Return and Space\n* Use `tabindex=\"0\"` on elements that should receive focus\n* Ensure that focus is visible when the element receives focus.\n* Use `role=\"button\"` to programmatically determine the role of the element.\n\nFor more information, see [WAI ARIA Practices - Button](https://www.w3.org/TR/wai-aria-practices-1.1/examples/button/button.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-7",
    "Summary": "The drag and drop functionality is not programmatically determined",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Link",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nLinks must be entirely compatible with just a keyboard. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. There are links that do not receive focus when tabbing through the page with a keyboard.\n\n## \n\nThis can be seen on page 1. On the 2FA link. \n\n![2FA link which is not keyboard operable](image1.png)\n![Markup of 2FA link](image.png)\n\nThis can also be seen on page 9 with the \"Add User\" link.\n\n![Add User link id not keyboard operable](image4.png)\n![Markup of Add User link](image5.png)\n\n## \n1. navigate onto the above pages.\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that the link does not receive keyboard focus.\n\n## \n\nMake sure that these elements can be operated with a keyboard. As these elements perform an action, a native `<button>` element can be used. Alternatively, if you must use anchor tags, they must have a valid `href` attribute.\n\n```\n<a href =\"...\">Two Factor Authentication</a>\n```\n\nFor more information. see [A11Y Project - Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8196-57",
    "Summary": "Completed state is not programmatically determined",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users. There are charts without alternatives. \n\nTechnically, these charts have tooltips which provide text alternatives. However, as described in ADR_8196 - 59, these tooltips are not keyboard or screen reader operable. As a result, the text alternatives are currently functionality unavailable for some users.\n\n## \n\nThis can be seen on the pie chart and bar chart on page 13. \n\n![Charts without table alternative](image.png)\n\n## \n1. navigate to the charts with a screen reader\n2. observe that it does not have a table alternative\n\n## \n\nMake sure that there is a text alternative to the charts. The best way to do this is with a table. This can be done using Highchart's `showTable` function.  For more information, see [Highcharts - showTable](https://api.highcharts.com/highcharts/exporting.showTable) and [Highcharts - working example](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/export-data/showtable/).\n\nWhen reviewing this issue, see issues ADR_8196 - 58 and ADR_8196 - 59. These issues are intertwined.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7879-21",
    "Summary": "Heading structure on the page is illogical",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThere are elements with drag and drop functionality. The elements are keyboard operable. However, the behaviour is not programmatically determined. This impacts how usable it is with assistive technology. For example, while it is operable with a keyboard using Arrow Keys, it is not operable when using JAWS and Arrow Keys.\n\n## \n\nThis can be found on page 9 with the reordering functionality of the transaction list. The items can be dragged and dropped with a mouse. As well, you can tab onto the `<li>` container for the items and use Arrow Keys to adjust the order. However, tabbing onto them with \n\n![Drag and drop semantics are not exposed to assistive technologies](image1.png)\n![Markup of item while it is being dragged](image2.png)\n## \n1. navigate onto the above elements with a screen reader \n2. after tabbing onto the items, attempt to use arrow keys to adjust the selection\n3. observe the selection is not adjusted\n4. observe that the functionality and state of the items is not communicated. \n\n## \n\nMake sure that the drag-and-drop functionality works with other assistive technologies, such as screen readers. \n\nHowever, note that the [current ARIA used for drag-and-drops is the process of being deprecated](https://www.w3.org/TR/wai-aria-1.1/#aria-grabbed). As well, The `dragged` HTML attribute is being used in this instance. However, it is not well supported by assistive technologies.\n\nThe simplest way is by providing input fields on each draggable item. The user can then type into this field to set the position of the item, such as the first, second, third, or forth element. As well, a status message can be used to programmatically determine the outcome of the movement. For example:\n\n```\n<ul>\n  <li>\n    <label for=\"checkOne\">Bank Reference</label>\n    <input id=\"checkOne\" type=\"check\" name=\"dragSet\" ...>\n    <label for=\"positionOne\">Position (1 to 4)</label>\n    <input type=\"type\" id=\"positionOne\" value=\"1\" ...>\n  </li>\n...\n</ul>\n<!-- in practice this would be a single live region container with updated internal text -->\n<span class=\"srOnly\" role=\"status\" aria-atomic=\"true\">Moved A to position B, between C and D</span>\n<span class=\"srOnly\" role=\"status\" aria-atomic=\"true\">Cannot move A to position B. First position is A. Last is B.</span>\n``` \n\nA similar solution is by providing up and down buttons. As with the previous example, this can be paired with a status message. For example:\n\n```\n<ul>\n  <li>\n    <label for=\"checkOne\">Bank Reference</label>\n    <input id=\"checkOne\" type=\"check\" name=\"dragSet\" ...>\n    <button class=\"UpArrow\" aria-label=\"Move Bank Reference Up\">\n    <button class=\"DownArrow\" aria-label=\"Move Bank Reference Down\">\n  </li>\n...\n</ul>\n<!-- in practice this would be a single live region container with updated internal text -->\n<span class=\"srOnly\" role=\"status\" aria-atomic=\"true\">Moved A to position B, between C and D</span>\n<span class=\"srOnly\" role=\"status\" aria-atomic=\"true\">Cannot move A up, it is in the first position.</span>\n<span class=\"srOnly\" role=\"status\" aria-atomic=\"true\">Cannot move A down, it is in the last position.</span>\n``` \n\nWhen using the live region, make sure that the empty container is present on page load with the live semantics. Then dynamically update the single container with the message by updating the internal text. For more information, see [MDN - using the status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role). \n\nThere are other options, such as using `role=\"application\"` to suppress the screen reader from moving the cursor when using the Arrow Keys. As well, you could use toggle buttons (using `aria-pressed`) or listbox pattern. \n\nThe issue is that the checkboxes would need to be nested with these patterns and it may render them inoperable. The checkboxes and drag and drop functionality could be split into separate containers. This would protect the operability of the checkboxes. But this could result in an illogical focus order.\n\nThat said, these patterns are explained in the following resources. For more information, see [Medium - Major patterns for accessible drag and drop](https://medium.com/salesforce-ux/4-major-patterns-for-accessible-drag-and-drop-1d43f64ebf09), [Whatsock - Sortable listbox demo](https://whatsock.com/tsg/Coding%20Arena/ARIA%20Listboxes/Sortable/demo.htm), [SalesForce - Canvas drag pattern](https://salesforce-ux.github.io/dnd-a11y-patterns/#/?_k=xhnhui) and [SmashingMagazine - Dragon drop accessible list reordering](https://www.smashingmagazine.com/2018/01/dragon-drop-accessible-list-reordering/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-18",
    "Summary": "Text uses heading semantics inappropriately",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors.  More specifically, there are elements with invalid nesting. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on page 5. \n\n![Parsing error flagged by nu validator](image1.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include elements with duplicate attributes.\n\n## \n\nMake sure that the nesting of elements is allowed by the HTML specification. For example:\n\n```\n// you cannot nest interactive items within each other\n// in this example, the issue is created by the link within the button\n\n<button><a href=\"...\">Submit</a></button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-4",
    "Summary": "Radio group not associated with legend",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThe eligibility checker form has a completed state that is not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on pages 3, 4 and 5. On the eligibility progress list. \n\n![Eligibility checker](image1.png)\n![Markup of eligibility checker](image2.png)\n\n## \n1. Observe the interactive elements.\n2. Observe the custom states.\n3. Inspect the elements and review the DOM. \n4. Review the computed accessibility properties.\n5. Observe that the custom state is not programmatically determined. \n6. Observe that the state is not available through text. \n\n## \n\nMake sure that the step completed state is programmatically determined. When the HTML and ARIA states such as `checked`, `disabled`, `aria-expended`, `aria-current`, and so on are not appropriate, you determine the state through visible text, hidden text, alternative text. For example:\n \n ```\n<h2>Your credit card eligibility check</h2>\n<ul>\n  <li><a href=\"...\" class=\"... tick\">Credit card details (completed)</a></li>\n  <li><a href=\"...\" class= \"... tick\">Your details (completed)</a></li>\n...\n  <li><a href=\"...\" class=\"... tick\">Credit card details <span class=\"hiddenText\">Completed</span></a></li>\n  <li><a href=\"...\" class=\"\">Your details</a></li>\n...\n  <li><a href=\"...\">Credit card details <img src=\"completed.png\" alt=\"Completed\"></a></li>\n  ...\n</ul>\n```\n\nFor more information, see [WAI-ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/), [Inclusive Components](https://inclusive-components.design), [a11y Project](https://a11yproject.com/), and [Accessibility Developer Guide](https://www.accessibility-developer-guide.com/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).\n\nFor more information on visually hiding elements, see [WAI Tutorials - Hiding elements](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-5",
    "Summary": "Informative images have no alt attribute",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are headings that have a visual parent-child relationship. However, this structure is not correctly expressed by the heading levels. \n\n## \n\nThis can be seen on page 3. On the \"Address and contact details\", \"Current address\" headings.\n\n![Heading structure is illogical](image1.png)\n![Markup of headings](image2.png)\n\n## \n1. Navigate to the above pages.\n2. Observe that the headings have a visual parent-child relationship.\n3. Inspect the headings and note their levels\n4. Observe that the heading levels do not correctly express the visual structure. \n\n## \n\nWhen elements title or categorise other content, use headings with appropriate heading levels. Make sure that the heading levels used correctly communicate the structure of the page, such as the parent and child relationship between the headings. For example:\n\n```\n<h1>Your Credit Card Eligibility Check</h1>\n<h2>Your personal details</h2>\n<h3>Address and contact details</h3>\n<h4>Current address</h4>\n```\n\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-2",
    "Summary": "Current page is not programmatically identified",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Similarly, content must not use structural semantics inappropriately. Content may otherwise seem unstructured or disorganised. \n\nThere are elements contained in heading tags that do not title or categorise other content.\n\n## \n\nThis can be seen on page 1, with the \"Our Eligibility Check will...\" and the \"So that we may consider...\" text.\n\n![Page 1 - Text marked up as headings](image3.png)\n\n![Page 1 Code - Text declared as headings inappropriately](image4.png)\n\nThis can be seen on page 2. On the \"* indicates required field\" text.\n\n![Text marked up as heading](image1.png)\n![Markup of heading](image2.png)\n\nThis can also be seen on page 5, with the \"Based on the information you've supplied...\" text and the \"(variable)\" text.\n\n![Page 5 - Text marked up as a heading incorrectly](image5.png)\n\n![Page 5 Code - Text marked up as a level 3 heading incorrectly](image6.png)\n\n![Page 5 - (variable) text marked up as a heading incorrectly](image7.png)\n\n![Page 5 Code - (variable) text uses heading semantics inappropriately](image8.png)\n\n## \n1. Observe that the content is not titling or categorising other content.\n2. Inspect the content and review the DOM.\n3. Note the inappropriate use of heading tags.\n\n## \n\nUse CSS to style the content. Do not use heading tags, such as `<h1>`, `<h2>`, and so on, unless the text elements title or categorise other content. Use neutral tags that do not have any structural meaning, such as `<div>`, `<span>`, and `<p>` tags. For example:\n\n```\n<h1>Contact us</h1>\n<p>Use the form below to get in contact</p>\n```\n\nFor more information, see [MDN - Styling Text](https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text), [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/) and [WAI Tutorials - Content Structure](https://www.w3.org/WAI/tutorials/page-structure/content/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-1",
    "Summary": "Error message is not automatically announced",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are radio buttons that are not associated with their visual group label. The purpose of the form fields may be unclear to users. \n\n## \n\nThis can be seen on page 2. On the \"Are you a UK Citizen\" radio group.\n\n![Radio group not associated with legend](image1.png)\n![Markup of radio group](image2.png)\n\n## \n1. Observe the visual group label for the radio buttons. \n2. Inspect the radio buttons and review the DOM. \n3. Observe that the visual group label is not associated with the radio buttons.\n4. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that form fields are associated with their visual labels. This can be done with `<fieldset>` and `<legend>`. For example:\n\n```\n<fieldset>\n<legend>I am the group label</legend>\n  <input type=\"radio\" name=\"example\" id=\"exampleOne\" checked>\n  <label for=\"txt\">I am the first radio button</label>\n  <input type=\"radio\" name=\"example\" id=\"exampleTwo\">\n  <label for=\"exampleTwo\">I am the second radio button</label>\n</fieldset>\n```\n\nIf this is not possible, you can use `aria-labelledby`. This can be used with custom radio buttons created with ARIA. For example:\n\n```\n<h2 id=\"radioGroupLabel\">I am the group label</h2>\n<div role=\"radiogroup\" aria-labelledby=\"radioGroupLabel\">\n// custom radio buttons //\n</div>\n```\n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Grouping Controls](https://www.w3.org/WAI/tutorials/forms/grouping/) and [Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-10",
    "Summary": "Textual elements do not respond to mobile text size settings",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images with no `alt` attribute whatsoever. \n\nWe have classed the images as informative as they communicate unique or meaningful information.\n\n## \n\nThis can be found on page 4. On the important notice icon. \n\n![Icon with no alt attribute](image1.png)\n![Markup of icon](image2.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that they do not have an `alt` attribute.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Informative images that convey meaningful or unique information need a descriptive alt attribute. For example:\n\n```\n<img src=\"\" alt=\"Important notice\">\n```\n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9630-3",
    "Summary": "Content not available to screen reader users",
    "Success Criteria": "Additional Issue",
    "Component": "Breadcrumb",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are elements that are visually highlighted as currently relevant. They are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the current page state is not programmatically determined may confuse or mislead users. That said, this issue has been raised as an additional issue because the page headings communicate the current page. However, it would ideally also be programmatically identified on the breadcrumb. \n\n## \n\nThis can be found on pages 2, 3, 4 and 5. On the eligibility progress list. \n\n![Eligibility progress with current page not marked up](image1.png)\n![Markup of eligibility progress list](image2.png)\n\n## \n1. Observe the elements visually highlighted are currently relevant.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the current state is not programmatically determined. \n5. Observe that the state is not available through text. \n\n## \n\nMake sure that the current state is programmatically determined. Use `aria-current` or hidden text. The possible specific values are `page`, `step`, `location`, `date`, `time`. As well, `true` and `false` can be used a catch-all values to determine whether an element is current or not. For example:\n\n```\n<ul>\n  <li><a href=\"...\">Home</a></li>\n  <li><a href=\"...\" class=\"highlighted\" aria-current=\"page\">Blog</a></li>\n  <li><a href=\"...\">Shop</a></li>\n  <li><a href=\"...\">Contact</a></li>\n</ul>\n```\n\n\nFor more information, see [ADG - Marking elements as the current one](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9453-3",
    "Summary": "Headings are not marked up",
    "Success Criteria": "3.3.1: Error Identification [A]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nErrors must be described in text and compatible with assistive technology. Users may otherwise be unaware when they occur. Entering an invalid code displays an error message but is not automatically communicated to screen reader users. \n \n## \n\nThis can be seen on page 4 with the security code error message.\n\n![error message that is not automatically announced](image.png)\n\n## \n1. prompt the above errors\n2. note that they are not automatically communicated to all users \n\n## \n\nThis error message should be automatically communicated to assistive technology users.  \n \nThis can be done by posting an accessibility notification using `UIAccessibilityPostNotification` function. You can specify the text that the screen reader should announce using the `UIAccessibilityAnnouncementNotification`.\n\nFor more information, see [Apple Developer - UIAccessibilityPostNotification](https://developer.apple.com/documentation/uikit/1615194-uiaccessibilitypostnotification) and [Apple Developer - UIAccessibilityAnnouncementNotification](https://developer.apple.com/documentation/uikit/uiaccessibilityannouncementnotification).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9453-9",
    "Summary": "App crashes when swiping past text element",
    "Success Criteria": "1.4.4: Resize text [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users with low vision use large text settings, to enhance the readability of content. When users have selected a larger font size setting, the functionality and readability are impacted. As a result, users with low vision might not be able to access some of the content. Pinch to zoom is disabled as well which means that there is no way to achieve better readability of text. \n\n## \n\nThis can be seen on page 3. \n\n![Page 3: All text elements, except the text inside the confirm and cancel button, do not respond to text size changes](image.png)\n\n## \n1. navigate to the above mentioned pages.\n2. change the font size: Settings > Accessibility > Display & Text Size > Larger Text\n3. Drag the slider to select the font size\n4. Drag the slider to select the font size in iOS\n5. In Android, use Settings > Accessibility > Font Size\n6. Observe that text elements do not resize\n## \n\nEnsure that all of the textual content and functionality are available when users access the page with the large text settings. Consider allowing the text to wrap onto the next line when larger font size is used. Ensure that text does not clip or overlap when the text size is increased. \n\nUse the largest possible text size in dynamic text sizing to maintain the layout of the page and keep the interface meaningful and readable for users.\n\nFor more information, see [BBC - Accessibility for Products - Content resizing](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/content-resizing/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9453-6",
    "Summary": "VN - MFD - Informative icon does not have text alternative",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\n## \n\nThis can be seen on page 3. The \"Confirm you recognize this online instruction\" heading, the transfer details and amount text is not available to screen reader users. \n\n![Page 3: content that is not available to screen reader users](image.png)\n\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nEnsure that the textual content is available for assistive technology users. \n\nSet `isAccessibilityElement` property to `true` on each container of the text elements.\n\nFor more information, see [BBC Mobile Accessibility - Focusable elements](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/focusable-elements/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9453-2",
    "Summary": "Loading state not communicated",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere are elements that title or categorise other content. These elements have not been marked up as headings. \n\n## \n\nOn page 2, the \"From\", \"To\" and \"Transfer details\" text act as headings, on Android.\n\n![Page 2: \"To\" text is not marked as a heading](IMG-1975.jpg)\n\nOn page 3, the \"Confirm an instruction\" and \"Confirm you recognise this online instruction\" text, on Android.\n\n![Page 3: \"Confirm an instruction\" text](IMG-1982.jpg)\n\nThis can be seen on page 4 on Android and iOS. On the \"Confirm you recognise this online instruction\" text and \"We've locked your user profile\".\n\n![page 4 - heading is not marked up](image.png)\n\n![page 4- heading is not marked up](image1.png)\n\n## \n1. Visually note the headings.\n2. Navigate onto the headings with a screen reader.\n3. Note that the headings have not been programmatically determined as such.\n\n## \n\nWhen elements title or categorise other content, programmatically determine them as headings. This enables those using assistive technology to ascertain the nature of the elements and the structure of the page. \n\n* On iOS, you can use the `header` accessibility trait.  \n* On Android, you can use the the `accessibilityHeading` property.\n\nFor more information, see [BBC Mobile Accessibility Guidelines - Headings](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/headings/), [Android Developer - Headings Within Text](https://developer.android.com/guide/topics/ui/accessibility/principles), [Apple Developer - header](https://developer.apple.com/documentation/uikit/uiaccessibility/uiaccessibilitytraits/1620170-header), [Apple Developer - isHeader](https://developer.apple.com/documentation/swiftui/accessibilitytraits/isheader). Although web orientated, [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/) provides tips on structuring pages with headings.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9453-10",
    "Summary": "Placeholder text does not have sufficient colour contrast",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "High",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nOn page 1, when using an iOS device with VoiceOver enabled, swiping right after the \"As soon as possible\" text causes the app to crash.\n\n## \n\n![Page 1, as soon as possible text](image.png)\n\n## \n1. navigate onto \"as soon as possible\" text\n2. swipe right\n3. note that the app crashes\n\n## \n\nEnsure that the app does not crash when navigating the screens with a screen reader such as VoiceOver",
    "Votes": 0
  },
  {
    "Issue Id": "3804-345",
    "Summary": "Informative image has incomplete alt text",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. The icon may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThe alert icon with \"i\" indicator does not have a text alternative.   \n\n## \n\nThis can be found on the VN – MFD page, on the \"i\" indicator icon. The nearby text does not convey the purpose of this icon: to draw the user's attention to important information. For example, this occurs on the: \n\n![alert message decorative icon does not have text alternative](image.png)\n![markup of alert icon](image1.png)\n\n## \n1. inspect the decorative icon\n2. note that it is not hidden from assistive technologies\n\n## \n\nEnsure that informative images have alternative text so that they are communicated to assistive technologies. The alternative text could be \"Alert\" or \"Important information\". For example:\n```\n<i class=\"visuallyhidden\" >Alert</i> \n```\nOtherwise, for `<img>` elements an `alt` attribute can be provided:\n\n```\n<img src=\"\" alt=\"Alert\" />\n```\n\nFor more information on providing text alternative see [WAI - Informative images](https://www.w3.org/WAI/tutorials/images/informative/). For information about visually hiding elements while ensuring they remain available to assistive technologies, see [WAI - Note on hiding elements](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements) and [A11yProject: How to Hide Content](https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-19",
    "Summary": "Decorative image has redundant text alternative",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nDynamic updates need to be programmatically determined.\n\nThere are loading messages that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the updates are not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on all pages when navigating from page to page. \n\n![Loading message visually indicated](image2.png)\n![Markup of loading elements](image1.png)\n\n## \n1. Observe the dynamic loading messages that are visually communicated.\n2. Inspect the update and review the DOM. \n3. Note that the loading messages are not programmatically determined. \n\n## \n\nMake sure that status messages are programmatically determined. If the loading message visually communicates the progress, make sure that this is programmatically determined. As well, do the same when the loading message is completed. For example:\n\n```\n<span role=\"status\">Loading, please wait</span>\n<span role=\"status\">Loading, 50% complete</span>\n<span role=\"status\">Loading complete</span>\n```\n\nYou may wish to delay the status message. For example, if the loading is almost instantaneous, the status message may not unnecessary. It is therefore acceptable to wait 3-5 seconds before trigging the status message, such that it only occurs when the loading is delayed or generally not instant. \n\nAnother solution is to move focus or prompt a page load. In such cases, you do not need to programmatically determine the status message as the change of context, such as focus moving to the added content or a new page being loaded, provides an acceptable call-to-action. \n\nFor more information, see [MDN - Using the status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role) and [MDN - ARIA Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-25",
    "Summary": "Images have inappropriate alternative text",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that have inappropriate accessible names. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is inappropriate may confuse or mislead users.\n\n## \n\nThis can be found on page 6. On the lego functional image and close button on terms and conditions modal.\n\n![Page 6: Lego functional image has an accessible name of \"/\"](image1.png)\n\n![Page 6: Close button has accessible name of \"continue\"](image2.png)\n![Page 6: Markup of close button](image3.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nMake sure that interactive elements have an appropriate name. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` and provide them with an accessible name through labels or internal text. For example:\n\n```\n<a href=\"#\">Lego homepage</a>\n```\n\nIf this is not possible, use `aria-label` to manually name elements. For example:\n\n```\n<button class=\"\" aria-label=\"Lego homepage\"></button>\n```\n\nUse these techniques to provide appropriate accessible names. Accessible names should succinctly describe purpose and functionality. \n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-23",
    "Summary": "Non interactive element receives keyboard focus",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nThere are parsing errors.  More specifically, there are elements with invalid nesting. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\n## \n\nThis can be found on page 7. \n\n![Page 7: Invalid nesting flagged by nu validator](image1.png)\n\nThis can also be found on page 8.\n\n![Page 8: Summary of the validation errors](image2.png)\n![Page 8: Invalid nesting flagged by nu validator](image3.png)\n![Page 8: Invalid nesting flagged by nu validator](image4.png)\n\nThis can also be found on page 10. \n\n![Page 10: Invalid nesting flagged by nu validator](image5.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include elements with duplicate attributes.\n\n## \n\nMake sure that the nesting of elements is allowed by the HTML specification. For example:\n\n```\n// you cannot nest interactive items within each other\n// in this example, the issue is created by the link within the button\n\n<button><a href=\"...\">Submit</a></button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-16",
    "Summary": "Functional non-text content fails contrast",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nThere are input fields with placeholder text that do not have sufficient colour contrast. \n\nCertain colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without accurate perception of colour or limited vision may struggle to perceive the content.\n\n## \n\nThis can be seen on page 4. On the email address input field with placeholder text \"example@domain.com\".\n\n![Page 4: Placeholder text has a colour contrast ratio of 1.6:1](image1.png)\n\nThis can also be seen on page 7. On the account entry input fields. \n\n![Page 7: Placeholder text has colour contrast ratio of 2.6:1](image3.png)\n \nThis can also be seen on page 11. On the card entry input fields. \n\n![Page 11: Placeholder text has colour contrast ratio of 1.5:1](image2.png)\n\n## \n1. navigate onto the pages affected\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-18",
    "Summary": "Form fields and visual labels have incorrect association",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images with incomplete text alternatives. \n\n\n## \n\nThis can be seen on pages 1, 3, 4, 5, 7, 8, 9, 10, 11, 12.  The \"Lego account\" logo does not include the \"account\" text that is present in the image. \n \n![Lego account logo](image1.png)\n![Markup of lego account logo with alt text of \"Lego logo\"](image2.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that the images have inappropriate text alternatives.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Informative images that convey meaningful or unique information need a descriptive alt attribute. For example:\n\n```\n<img src=\"lego.png\" alt=\"Lego Account\">\n```\n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-15",
    "Summary": "Interactive elements do not receive keyboard focus",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are decorative images with redundant text alternatives.\n\nWe have classed the images as decorative as they do not communicate any unique or meaningful information.\n\n## \n\nThis can be found on page 5, on the images inside the carousel slides.\n\n![Page 5: Decorative images with redundant alt text](image5.png)\n![Page 5: Decorative images with redundant alt text - DOM](image6.png)\n\n![Page 6: Decorative images with redundant alt text](image4.png)\n\nThis can be found on page 9, on the images under the \"Global consents\" heading.\n\n![Page 9: Images have redundant text alternative](image1.png)\n![Page 9: Images have redundant text alternative - DOM](image2.png)\n\n## \n1. Inspect the decorative images.\n2. Confirm that they have redundant text alternatives.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Decorative images that do not convey meaning or unique information need an empty alt attribute. For example:\n\n```\n<img src=\"decoration.png\" alt=\"\">\n```\n\nInline SVG images can use `aria-hidden` and `focusable=\"false\"` for the same purpose. For example:\n\n```\n<svg aria-hidden=\"true\" focusable=\"false\"> ... </svg>\n``` \n\nFor more information, see [Web Accessibility Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-32",
    "Summary": "Functional images implemented using the CSS background-image property",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are images with an inappropriate alternative text. For example, “a girl with a laptop on a lego brick\" describes the image having a real girl with a laptop on a lego brick, rather than a mini-figure. \n\n## \n\nThis can be found on pages 3, 4, 5, 6, 7. On the image in the middle of the page. \n\n![Page 4: Image that has a inappropriate alt text](image1.png)\n![Markup of  image with alt text \"girl with a laptop on a lego brick\"](image2.png)\n \nThis can also be found on page 10. On the credit card/ ID verification images. \n\n![Page 10: Credit card/ ID verification images that have the same alternative text](image3.png)\n![Page 10: Markup of the credit card/ ID veritifaction images ](image4.png)\n\n## \n1. Inspect the images.\n2. Confirm that they have inappropriate alternative text\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide a more accurate text alternative, communicating the story they are trying to tell or mark them as decorative if they do not communicate unique information. \n\n\n Decorative images that do not convey meaning or unique information need an empty alt attribute. For example:\n\n```\n<img src=\"decoration.png\" alt=\"\">\n```\n\nFor more information, see [Web Accessibility Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-41",
    "Summary": "Informative images implemented using the CSS background-image property",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Accordion or Disclosure",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are expandable elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the expandable state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on page 10. On the \"About verification methods\" accordion. \n\n![Page 10: Accordion expand element not programmatically identified](image1.png)\n![Page 10: Markup of accordion](image2.png)\n\n## \n1. Observe the expandable interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the expandable state is not programmatically determined. \n5. Observe that the state is not available through text. \n\n## \n\nMake sure that the expandable state is programmatically determined. \n\nUse `aria-expanded` and update the `true` and `false` value appropriately. Make sure that the attribute is on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<button aria-expanded=\"true\">This is expanded</button>\n<button aria-expanded=\"false\">This is collapsed</button>\n<span role=\"button\" aria-expanded=\"true\" tabindex=\"0\">This is expanded</span>\n<span role=\"button\" aria-expanded=\"false\" tabindex=\"0\">This is collapsed</button>\n```\n\nFor more information, see [WAI-ARIA Practices - Accordion](https://www.w3.org/TR/wai-aria-practices-1.2/#accordion), [WAI ARIA - Disclosure](https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure), and [ADG - Marking elements expandable](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/expanded/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-17",
    "Summary": "There are no instructions that you can drag your finger to access graph",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "LEGO",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging.\n\nThe body element receives focus but is not interactive. This is illogical as only interactive elements should receive focus. This may particularly disadvantage keyboard users. The illogical focus order may make the page difficult to understand and interact with.\n\n## \n\nThis can be seen on all pages on the `<body>` tag, excluding page 6. \n\n![Page 4: Body element with tabindex as 0](image1.png)\n![Page 4: Text that has a tabindex as 0](image2.png)\n\nThis can be seen on page 4, on the paragraph of text under the \"Why do you need my email?\" heading.\n\n![Markup of text that has a tabindex as 0](image3.png)\n\nThis can also be seen on the verification methods modal dialog on page 10. \n\n![Page 10: Verification methods modal content receives keyboard focus](image4.png)\n\n## \n1. Using just your keyboard, tab through the above.\n2. Observe that focus goes onto the body element, which is not interactive.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in a meaningful order.\n\nIn this case, make sure that the non-interactive elements do not receive keyboard focus. For example, make sure to avoid using `tabindex=\"0\"` on elements that should not receive focus. If you need the non-interactive elements to be capable of receiving focus through the `focus` method, use `tabindex=\"-1\"`. For example:\n\n```\n<h1 tabindex=\"-1\">Send me a link so I can create my LEGO® Account</h1>\n```\n\nUsing `tabindex=\"-1\"` allows elements to used as a target for the `focus` method without adding them to the focus order. For more information, see [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-28",
    "Summary": "VN - MFD - current date and selected date is not marked up",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nWhen non-text content communicates functional that is not available through text, the non-text content must pass colour contrast requirements with adjacent colours. For example, when using icon buttons that have no text, the icon used must pass the colour contrast requirements. \n\nThe required contrast ratio is 3:1. There is functional non-text content that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the component that fails the colour contrast requirements.\n\n## \n\nThis can be seen on page 7 and 8. On the Show/Hide password button. \n\n![Page 7: Show/Hide button fails contrast](image1.png)\n\n## \n1. Get the colour values of the functional non-text content.\n2. Insert these values into a colour contrast analyser.\n3. Observe that the analyser reports that the contrast ratio is not sufficient. \n4. Observe that there is not an alternative way to access the same information.\n \n## \n\nWhen using functional non-text content, make sure that the colours pass 3:1 colour contrast requirements. \n\nAdjust the button outline colour and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative would be providing a button with text on it, assuming that the colour of the text passed the colour contrast requirements. \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-35",
    "Summary": "There are empty headings",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are radio buttons that are not associated with their visual group label. The purpose of the form fields may be unclear to users. \n\n## \n\nThis can be seen on page 10. On the verification radio buttons. \n\n![Page 10: Radio buttons not associated with visual group label](image1.png)\n![Page 10: Markup of radio buttons](image2.png)\n\n## \n1. Observe the visual group label for the radio buttons. \n2. Inspect the radio buttons and review the DOM. \n3. Observe that the visual group label is not associated with the radio buttons.\n4. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that form fields are associated with their visual labels. This can be done with `<fieldset>` and `<legend>`. For example:\n\n```\n<fieldset>\n<legend>Verify you're a grown up</legend>\n  <input type=\"radio\" name=\"example\" id=\"exampleOne\" checked>\n  <label for=\"exampleOne\">I am the first radio button</label>\n  <input type=\"radio\" name=\"example\" id=\"exampleTwo\">\n  <label for=\"exampleTwo\">I am the second radio button</label>\n</fieldset>\n```\n\nIf this is not possible, you can use `aria-labelledby`. This can be used with custom radio buttons created with ARIA. For example:\n\n```\n<h2 id=\"radioGroupLabel\">Verify you're a grown up</h2>\n<div role=\"radiogroup\" aria-labelledby=\"radioGroupLabel\">\n// custom radio buttons //\n</div>\n```\n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Grouping Controls](https://www.w3.org/WAI/tutorials/forms/grouping/) and [Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-34",
    "Summary": "Active pagination button is not marked up",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationship to users. Content may otherwise seem unstructured or disorganised.\n\nThere are radio buttons that are not correctly associated with their visual labels. The purpose of the radio buttons may be unclear to users. \n\n## \n\nThis can be seen on page 10. On the credit card/ ID verification radio buttons.\n\n![Page 10: Radio buttons not associated with visual label](image1.png)\n![Page 10: Markup of radio buttons ](image2.png)\n\n## \n1. Observe the visual labels for the form fields. \n2. Inspect the radio buttons and review the DOM. \n3. Observe that there is an attempt to associate the visual labels and radio buttons.\n4. Observe that the association has not been implemented correctly.\n5. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that radio buttons are associated with their visual labels. This can be done with `label` or `aria-labelledby`. Make sure that the `for` and `id` match correctly. For example: \n\n```\n<label for=\"firstName\">Credit Card Verification. Use a valid credit or debit card to verify via Adyen.</label>\n<input id=\"firstName\" type=\"text\" autocomplete=\"given-name\">\n```\n\nNote that `aria-labelledby` is useful when you need to construct the label using multiple elements. For example:\n\n```\n<span id=\"firstPart\">Credit Card Verification</span>\n<span id=\"secondPart\">Use a valid credit or debit card to verify via Adyen.</span>\n<input aria-labelledby=\"firstPart secondPart\" type=\"radio\">\n```\n\nIf the above is not possible, you can add the visual label information to an `aria-label`. This has the same effect of adding to the accessible name of the form field. This solution is less elegant, but it is particularly useful when there is no visible text. For example: \n\n```\n<button class=\"magnifyingGlass\" aria-label=\"search\"></button>\n``` \n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-42",
    "Summary": "Focus order illogical in sub menu",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "LEGO",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images with no `alt` attribute whatsoever. \n\nWe have classed the images as informative as they communicate unique or meaningful information.\n\n## \n\nThis can be found on page 11. On the Visa logo. \n  \n![Page 11: Visa logo does not have an alt attribute](image2.png)\n![Page 11: Markup of VIsa logo](image1.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that they do not have an `alt` attribute.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Informative images that convey meaningful or unique information need a descriptive alt attribute. For example:\n\n```\n<img src=\"visa.png\" alt=\"Visa logo\">\n```\n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9636-24",
    "Summary": "Focus order on the menu is illogical",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Link",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "LEGO",
    "Description": "## \n\nInteractive elements must be entirely compatible with a keyboard. \n\nUsers should never need to use a mouse. Otherwise, screen reader, keyboard, and switch users, may be unable to control the interactive element. There are interactive elements that that do not receive focus when tabbing through the page. As a result, they cannot be operated with a keyboard. \n\n## \n\nThis can be seen on pages 7 and 8. On the \"Terms and conditions\" link. \n\n![Terms and conditions link](image2.png)\n![Link which does not receive keyboard focus](image1.png)\n\nThis can also be seen on page 10. On the custom accordion expand button.\n\n![Page 10: Custom accordion expand buttons that do not receive keyboard focus](image3.png)\n![Page 10: Markup of accordion](image4.png)\n\n## \n1. Observe the interactive elements. \n2. Attempt to navigate onto it with a keyboard using Tab. \n3. Observe that the elements does not receive keyboard focus.\n4. Observe that there is not an alternative way to access the same information or functionality.\n\n## \n\nMake sure that interactive elements can be navigated onto with a keyboard. They should receive focus when tabbing through the page. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` which can be tabbed onto by default. \n\nTo add custom components into the focus order, use `tabindex=\"0\"`. Make sure that this is used on the container with the interactive role. For example:\n\n```\n<span tabindex=\"0\" role=\"button\">Submit</span>\n```\n\nMake sure that when the component has been added to the focus order that it responds to keyboard commands. For example, make sure that it can be tabbed onto and activated with Return or Space. \n\nFor more information, see [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex), [MDN - Keyboard Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard-navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), and [WAI ARIA - Developing a Keyboard Interface](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard). For practical examples, see [WAI ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/) and [Inclusive Components](https://inclusive-components.design).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-296",
    "Summary": "Screen reader focus does not follow into expanded content",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are informative images implemented using the CSS `background-image` property. Images implemented in this way are often omitted from the page when Windows High Contrast mode is enabled. Users may miss out on the information conveyed by the images. \n\nWe have classed the images as functional because they have functionality associated with them.\n\n## \n\nThis can be seen on ...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Using the Edge browser, navigate onto the functional images.\n2. Enable High Contrast mode by navigating Windows Settings > Ease of Access > High Contrast. \n3. Observe that the functional images are omitted from the page.\n\n## \n\nUse `<img>` or `<svg>` elements to add functional images to the page. As well, make sure that the images have appropriate alternative text. Functional images need alternative text that communicates the action or outcome of the functionality, such as the destination with image links.\n\nWith `<img>` elements, this is done with the `alt` attribute. Inline SVG images use `<title>`, `<desc>`, and `aria-labelledby` for the same purpose. For example: \n\n```\n<a href=\"#\"><img src=\"acmeLogo.png\" alt=\"ACME homepage\"></a>\n```\n\nInline SVG images can use `<title>`, `<desc>`, and `aria-labelledby` for the same purpose. For example:\n\n```\n<svg aria-labelledby=\"uniqueTitleID uniqueDescID\">\n<title id=\"uniqueTitleID\">The title of the SVG</title>\n<desc id=\"uniqueDescID\">A longer, more complete description for complex graphics.</desc>\n...\n</svg>\n``` \n\nFor more information, see [Web Accessibility Tutorials - Functional Images](https://www.w3.org/WAI/tutorials/images/functional/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs in High Contrast Mode](https://css-tricks.com/accessible-svgs-high-contrast-mode/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-294",
    "Summary": "Informative icon fails non-text content contrast",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are informative images implemented using the CSS `background-image` property. Images implemented in this way are often omitted from the page when Windows High Contrast mode is enabled. Users may miss out on the information conveyed by the images. \n\nWe have classed the images as informative as they communicate unique or meaningful information.\n\n## \n\nThis can be seen on ...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Using the Edge browser, navigate onto the informative images.\n2. Enable High Contrast mode by navigating Windows Settings > Ease of Access > High Contrast. \n3. Observe that the informative images are omitted from the page.\n\n## \n\nUse `<img>` or `<svg>` elements to add informative images to the page. As well, make sure that the images have appropriate alternative text. Informative images that convey meaningful or unique information need a descriptive alt attribute.\n\nWith `<img>` elements, this is done with the `alt` attribute. Inline SVG images use `<title>`, `<desc>`, and `aria-labelledby` for the same purpose. For example: \n\n```\n<img src=\"profilePicture.png\" alt=\"A middle-aged man wearing a tuxedo\">\n```\n\nInline SVG images can use `<title>`, `<desc>`, and `aria-labelledby` for the same purpose. For example:\n\n```\n<svg aria-labelledby=\"uniqueTitleID uniqueDescID\">\n<title id=\"uniqueTitleID\">The title of the SVG</title>\n<desc id=\"uniqueDescID\">A longer, more complete description for complex graphics.</desc>\n...\n</svg>\n``` \n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs in High Contrast Mode](https://css-tricks.com/accessible-svgs-high-contrast-mode/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7452-45",
    "Summary": "Form fields and multiple visual labels are not associated",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. There are complex graphs. The data can be accessed by dragging your finger around the graph. \n\nHowever, there are no instructions explaining that this is the required behaviour. This may be particularly confusing with a screen reader. When VoiceOver or TalkBack users need to perform gestures other than swiping left, right, up, and down, or double tapping, instructions should be provided. \n\n## \n\nThis can be seen on the graph on page 9. You drag your finger around the graph to access the information. You do the same when accessing the graph with VoiceOver or TalkBack. The screen reader cursor can be moved onto the data points by moving your finger around the screen.\n\n![Graph without instructions that you can drag your finger to get information at that point](image1613129833514.png)\n\nThis less usable than graphs that can be found elsewhere. For example, on iOS, graphs on the stock and health apps, allow you to swipe through the graph and access columns of data. You can also use the data comprehension options to be presented with the data in various ways.\n\n![VoiceOver navigating the graph in small chunks](image2.png)\n![VoiceOver rotor option where users can hear the graph through pitch going up and down](image.png)\n\n## \n1. navigate onto the pages above with VoiceOver and TalkBack on\n2. observe that there are no instructions that you can drag your finger on the graph to get information\n\n## \n\nAt a minimum, make sure you that provide instructions for using this graph. For example, add text to the screen explaining this. You can use `accessibilityLabel` on IOS and `android:contentDescription` on Android to provide the information for those using assistive technology.\n\nIf possible, we suggest making the graph more user friendly with assistive technology. You can use the iOS stock and health apps as an example. Apple provides documentation, such as the [CareKit Overview - Charts](https://developer.apple.com/design/human-interface-guidelines/carekit/overview/views/#charts).\n\nFor more information specifically about the data comprehension option, see [Apple Vis - Whats New in iOS 13](https://www.applevis.com/blog/whats-new-ios-13-accessibility-individuals-who-are-blind-or-deaf-blind). \n\nEnsure that you provide instructions that screen reader users can drag their finger over the graph to access the data at that point. Ideally, this information should be visible to all users. However, the core requirement is to provide these instructions to assistive technology users. \n\nFor more information, see [BBC Mobile Guidelines - Alternatives for non text content](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/alternatives-for-non-text-content/)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-338",
    "Summary": "Headings not marked up semantically",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe current date and selected date is not marked up on the date picker\n\n## \n\nThis can be found on the VN – MFD page, on the date picker within the search panel. \n\n![date picker current date and selected date is not marked up](image1.png)\n![markup of selected date without aria-selected](image2.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nEnsure that `aria-selected` attribute is used on the selected date. As well, `aria-current` attribute should be used on the current date. \n\nFrom the example screenshot, 16/02/2021 should have `aria-current=\"date\"` and 17/02/2021 should have `aria-selected`. \n\nFor more information, see [ARIA specification for aria-selected](https://www.w3.org/TR/wai-aria-1.1/#aria-selected), [WAI ARIA Practicies - Picker example](https://w3c.github.io/aria-practices/examples/dialog-modal/datepicker-dialog.html) and [Data Grid example](https://www.w3.org/TR/wai-aria-practices/examples/grid/dataGrids.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-42",
    "Summary": "Informative images have no alternative",
    "Success Criteria": "Additional Issue",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are empty headings. In other words, there are heading tags with no content in them. This is not a strict WCAG failure because the headings do not visually appear on the page and empty headings are generally ignored by assistive technology. Nonetheless, some users may come across the headings and find them confusing. \n\n## \n\nThis can be seen on the arrow icon next to the \"Sort by\" component on pages 4, 9, and 11.\n\n![Page 4: Empty heading indicated by headings map](image4.png)\n\n![Page 4: Markup of empty heading](image5.png)\n\n## \n1. Navigate to the above pages.\n2. Inspect the page and review the headings in the DOM.\n3. Observe the use of heading tags with no internal content\n\n## \n\nWhen elements title or categorise other content, use headings with appropriate heading levels. Make sure that the headings have content within them, such that users can better understand the structure of the page. For example:\n\n```\n<h1>Main Heading</h1>\n<h2>Parent Heading</h2>\n<h3>Child Heading</h3>\n```\n\nIf you have no intention to add content to these headings, you can instead remove them from the DOM or programmatically hide them. This can be done with `hidden`, `aria-hidden`, or `display:none`.  For example:\n\n```\n<h2 id=\"nullHeading\" hidden></h2>\n```\n \nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/) and [Hidden Content and Accessibility](https://cloudfour.com/thinks/see-no-evil-hidden-content-and-accessibility/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-72",
    "Summary": "Link that triggers download does not warn users that it opens a new window",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are disabled elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the disabled state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on the \"Next\" button on page 7.\n\n![Page 7: Visually disabled \"Next\" button](image3.png)\n\n![Page 7: DOM of \"Next\" button with no disabled markup](image4.png)\n\nThis can also be found on the \"Previous\" and \"Next\" buttons on the slider of page 8.\n\n![Page 8: Example of \"Previous\" slider button in disabled state](image5.png)\n\n![Page 8: DOM of \"Previous\" button with no disabled markup](image6.png)\n\nThis can also be found on page 15 with the \"Get advice\" button.\n\n![Get advice button not marked up with disabled state](image1.png)\n![Markup of disabled button](image2.png)\n\n## \n1. Observe the inoperable interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the disabled state is not programmatically determined. \n\n## \n\nMake sure that the disabled state is programmatically determined. \n\nUse `disabled`, or `aria-disabled` and `tabindex=\"-1\"`. These techniques remove elements from the focus order and programmatically determine the elements as inoperable. Make sure that the attributes are used on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<button disabled>This is disabled and excluded from the focus order</button>\n<button aria-disabled=\"true\" tabindex=\"-1\">This is disabled and excluded from the focus order</button>\n<span role=\"button\" aria-disabled=\"true\" tabindex=\"-1\">This is disabled and excluded from the focus order</span>\n```\n\nWhen an element become operable, make sure that these attributes get removed or updated. For example:\n\n```\n<button>This is enabled and included from the focus order</button>\n<button aria-disabled=\"false\">This is enabled and included from the focus order</button>\n<span role=\"button\" aria-disabled=\"false\" tabindex=\"0\">This is enabled and included from the focus order</span>\n```\n\nFor more information, see [MDN - disabled attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) and [Google Developer - Using tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-38",
    "Summary": "Search button with no accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe currently active pagination item is visually indicated. However, this state has not been marked up.\n\n## \n\nThis can be seen on pages 8 and 10. On the active pagination button. \n\n![visual cues are used on second pagination buttons to indicate active state](image1.png)\n![markup of pagination buttons](image2.png)\n\n## \n1. navigate onto one of the pagination elements\n2. visually note the state of the element\n3. inspect them and note that the state has not been marked-up\n\n## \n\nMake sure that the currently active button is marked up. You can use the `aria-current` attribute to achieve this. For example:\n \n``` \n<button class=\"active\" href=\"#\" aria-current=\"true\"></button>\n```\n\nThis must be updated and removed as the value changes. For more information, see [WAI ARIA - aria current](https://www.w3.org/TR/wai-aria-1.1/#aria-current).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-27",
    "Summary": "Keyboard focus is not managed when a new modal dialog is opened",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that have inappropriate accessible names. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is inappropriate may confuse or mislead users.\n\n## \n\nThis can be found on page 9 (iOS). On the close button of product type modal dialog. The exact same component is also present on page 11. \n\n![Close button with the accessible name of x](image1.png)\n\n![Disclosure expand/ collapse button has accessible name of -/+](image2.png)\n\nThis can also be found on the \"sort by\" button that is below the product type button. The exact same component is also present on page 11. \n\n![Sort by button has an inappropriate name](image3.png)\n\nThis can also be seen on pages 8 and 10. On the pagination buttons. \n\n![Pagination buttons with accessible name of *2](image4.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nMake sure that interactive elements have an appropriate name. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` and provide them with an accessible name through labels or internal text. For example:\n\n```\n<button>Close</button>\n<button aria-expanded=\"false\">Hair type</button>\n<button aria-expanded=\"false\">Hair care</button>\n```\n\nUse these techniques to provide appropriate accessible names. Accessible names should succinctly describe purpose and functionality. \n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-31",
    "Summary": "Background elements can be accessed with a screen reader",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button, Hamburger Menu",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Motor",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere are off-screen interactive elements that receive focus. This may particularly disadvantage keyboard users who often navigate by tabbing through the interactive elements. That invisible interactive elements receive focus may confuse or frustrate users. \n\n## \n\nThis can also be seen on the sort menu on page 9. The exact same component is also present on page 11. \n\n![Off screen sort options receiving screen reader focus](image1.png)\n\nThis can also be seen on the accordion within the modal triggered by the product type button. The radio buttons within the accordion receive focus even though the accordion is collapsed. The exact same component is also present on page 11. \n\n![Shamoo radio button receives focus when the accordion is collapsed](image3.png)\n\nThis can also be seen on page 2, whereby the hidden product banner (which only becomes visible when scrolling down the page) is in the focus order.\n\n![Page 2: Off-screen product banner is in the focus order (items 4 and 5 in the screenshot)](image4.png)\n\n![Page 2: Elements that are receiving the focus when off-screen](image5.png)\n\n## \n1. When using iOS, use VoiceOver and swipe through the above.\n2. When using desktop, tab through the above using the keyboard.\n2. Observe that focus goes onto elements that are not visible on the page. \n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in meaningful order. \n\nIn this case, make sure that off-screen elements do not receive keyboard focus.\n\nIf they are not meant to be interactive at any point, remove the elements from the DOM, comment them out, or remove them from the focus order. If they are meant to be interactive at some point, make sure that they are excluded from the focus order and included in the focus as appropriate.\n\nRemoving elements from the focus order can be achieved with the HTML `hidden` or CSS `display:none`. Both will hide the element from all users. This same can be programmatically achieved by using both `aria-hidden=\"true\"` and `tabindex=\"-1\"` on the same element. For example:\n\n```\n<button hidden> ... </button>\n<button class=\"visuallyOffScreen\" aria-hidden=\"true\" tabindex=\"-1\"> ... </button>\n```\n\nHowever, note that `aria-hidden=\"true\"` and `tabindex=\"-1\"` will not visually remove elements from the page. \n\nRemoving these attributes will re-insert the elements into the focus order based on their location in the DOM, allowing users to navigate onto them with a keyboard. Make sure that this is done as appropriate, such as when the user toggles a parent control that shows and hides these interactive elements. \n\nFor more information, see [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex), [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), and [MDN - hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-21",
    "Summary": "Text does not have sufficient contrast",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Hamburger Menu",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Motor",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nThe screen reader focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\n## \n\nThis can be seen on the sub-menu on iOS. For example, when activating the menu button, and swiping right the focus moves to the next menu button instead of the sub menu item. VoiceOver users have to swipe past all of the menu buttons to get to the sub menu. \n\n![Illogical focus order in sub menu instead of being set to start of sub menu](image2.png)\n\n## \n1. Using VoiceOver on iOS, swipe through the above.\n2. Observe the screen reader focus order.\n3. Observe that it does not match the visual order.\n4. Observe that it does not independently make sense. \n\n## \n\nWhen activating a menu button and swiping right, the focus should go into the submenu instead of the menu button below. The DOM order should be modified. As well, the off-screen elements need to be removed from the focus order. See linked issue ADR_9585 - 13.\n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows VoiceOver users to swipe to tab through the menu in a logical order.\n\nFor more information, see [WCAG - G59 Placing the interactive elements in an order](https://www.w3.org/WAI/WCAG21/Techniques/general/G59), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), [Google Developer - DOM Order Matters](https://developers.google.com/web/fundamentals/accessibility/focus/dom-order-matters), and [Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-20",
    "Summary": "Heading not marked up semantically",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Motor",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nThe screen reader focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere are instances where the focus order appears to move around the page randomly. This may particularly disadvantage screen reader users who often navigate by tabbing through the interactive elements. The illogical focus order may make the page difficult to understand and interact with. \n\nWhen swiping right on the \"Shop product\" menu, focus moves to the back button instead of to \"Product type\". Swiping right again sets focus to \"Product type\", then the back button again. Focus is set to the back button between each \"Shop product\" item.\n\n## \n\nThis can be seen on the menu on iOS. \n\n![Back button that receives focus between each menu item](image1.png)\n\n![Markup of back button](image2.png)\n\n## \n1. Using just your screen reader, swipe through the above.\n2. Observe the screen reader focus order.\n3. Observe that it does not match the visual order.\n4. Observe that it does not independently make sense. \n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows screen reader users to swipe through the page in meaningful order. \n\nThere is a focusable back button between each list item. Remove them from the DOM. \n\nFor more information, see [WCAG - G59 Placing the interactive elements in an order](https://www.w3.org/WAI/WCAG21/Techniques/general/G59), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-15",
    "Summary": "Interactive elements do not have a visible focus indicator",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Hamburger Menu",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Motor",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nThe Screen reader focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere is expanding and collapsing content. The focus order does not travel from the parent control and onto the child options. Swiping right with VoiceOver causes offscreen elements to receive focus instead of menu items. This may particularly disadvantage screen reader users. The illogical focus order may make the page difficult to understand and interact with. \n\n## \n\nThis can be seen on the menu on iOS. When the user opens the menu, off-screen elements receive focus when swiping right, instead of menu items. \n\n![Menu expanded and off-screen elements receiving focus](image1.png)\n\n## \n1. Using just your screen reader, swipe through the above.\n2. Observe the expanding and collapsing content. \n3. Observe the screen reader focus order.\n4. Observe that the focus order does not go from the menu button onto the menu items.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows screen reader users to swipe through the page in meaningful order. \n\nIn this case, make sure that the child options are placed as the next elements in the DOM. For example:\n\n```\n<button aria-expanded=\"false\">Navigation Menu</button>\n<ul>\n  <li><a href=\"...\">Home</a></li>\n  <li><a href=\"...\">About</a></li>\n...\n</ul>\n```\nAlternatively, the focus could be dynamically set to the menu using `.focus` method.  For more information, see [MDN - Focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus)\n\nFor more information, see [WCAG - G59 Placing the interactive elements in an order](https://www.w3.org/WAI/WCAG21/Techniques/general/G59), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), [Google Developer - DOM Order Matters](https://developers.google.com/web/fundamentals/accessibility/focus/dom-order-matters), and [Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-65",
    "Summary": "Interactive elements do not indicate keyboard focus",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "Slider",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nWhen non-text content communicates information that is not available through text, the non-text content must pass colour contrast requirements with adjacent colours. For example, when the progress bar has no text, the colours used must pass the colour contrast requirements. \n\nThe required contrast ratio is 3:1. There is functional non-text content that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the component that fails the colour contrast requirements.\n\n## \n\nThis can be seen on the \"Overall Rating\" empty stars found on page 3.\n\n![Page 3: Empty ratings stars with insufficient colour contrast](image6.png)\n\nThis can also be seen on the progress bar of page 14:\n\n* The completed, and the uncompleted part of the progress bar has insufficient contrast against the background\n\n![completed section against background](image2.png)\n\n![uncompleted section against background](image3.png)\n\n* The completed section of the progress bar has insufficient contrast against the uncompleted section.\n\n![completed section against uncompleted section](image1.png)\n\nThis can also be seen on the slider on page 14. (desktop & mobile)\n\n![selected option lacks contrast against the slider line](image4.png)\n\n![selected option lacks contrast against the background](image5.png)\n\n## \n1. Get the colour values of the functional non-text content.\n2. Insert these values into a colour contrast analyser.\n3. Observe that the analyser reports that the contrast ratio is not sufficient. \n4. Observe that there is not an alternative way to access the same information.\n \n## \n\nWhen using functional non-text content, make sure that the colours pass 3:1 colour contrast requirements. \n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative would be providing a button with text on it, assuming that the colour of the text passed the colour contrast requirements. \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-33",
    "Summary": "Functional elements do not have a visible focus indicator",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nWhen non-text content communicates information that is not available through text, the non-text content must pass colour contrast requirements with adjacent colours. For example, when using icons to communicate states, priority, and so on, the icon must pass the colour contrast requirements.\n\nThe required contrast ratio is 3:1. There is informative non-text content that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the component that fails the colour contrast requirements.\n\n## \n\nThis can be seen on the stars used to indicate rating, found throughout pages 2, 3, 4, 8, and 9.\n\n![Star has a colour contrast ratio of 1.5:1 which is less than 3:1 (example from page 9)](image1.png)\n\nThis can also be seen with the view count eye icon found on pages 2 and 8.\n\n![Page 2: View count eye icon with insufficient colour contrast](image2.png)\n\n## \n1. Get the colour values of the stars\n2. Insert these values into a colour contrast analyser.\n3. Observe that the analyser reports that the contrast ratio is not sufficient. \n4. Observe that there is not an alternative way to access the same information.\n\n## \n\nWhen using informative non-text content, make sure that the colours pass 3:1 colour contrast requirements. \n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative is to use native semantics and default browser stylings, which this success criterion considers to be out of scope. For examples, see [Native Form Elements](http://nativeformelements.com). \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-64",
    "Summary": "US Add Biller (6F) - Button does not have visible focus indicator",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Slider",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationship to users. Content may otherwise seem unstructured or disorganised.\n\nThere is a slider that is not associated with their visual labels. In this case, the slider is visually labelled by multiple elements. The slider is however not associated with all these visual labels. The purpose of the slider may be unclear to users.\n\n## \n\nThis can be seen on page 14. On the \"How would you define your hairstyle?\" slider.\n\n![Page 14: No labels associated with the slider](image1.png)\n![Page 14: Markup of slider and labels not associated](image2.png)\n\n## \n1. Observe the visual labels for the slider. \n2. Observe that the slider is labelled by multiple elements. \n3. Inspect the form fields and review the DOM. \n4. Observe that the visual labels are not all associated with the slider\n \n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that the slider is associated with their visual labels. The `aria-labelledby` attribute can be used when you need to construct the label using multiple elements. For example:\n\n```\n<span id=\"firstPart\">How would you define your hair style?</span>\n<span id=\"secondPart\">One being classic, elegant, refined</span>\n<span id=\"thirdPart\">Five being I have to work to make my hair look and feel the way I want</span>\n<input aria-labelledby=\"firstPart secondPart thirdPart\" type=\"range\" ...>\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/), [Grouping Controls](https://www.w3.org/WAI/tutorials/forms/grouping/), and [MDN - aria-labelledby](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute). \n\nIf the above is not possible, you can add the visual label information to an `aria-label`. This has the same effect of adding to the accessible name of the form field. This solution is less elegant, but it is particularly useful when there is no visible text. For more information, see [MDN - aria-label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-16",
    "Summary": "Control triggers on key down",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere are elements that title or categorise other content. These elements have not been marked up as headings. \n\n## \n\nThis can be seen on the menu headings on iOS. \n\n![Heading level not announced on VoiceOVer](image1.png)\n\nSimilarly, on Desktop, the sub-menu items within the main navigation are visually structured as headings.\n\n![All pages: Example of \"Shop Products\" sub-menu items visually structured as headings](image4.png)\n\n![All pages: DOM of visual headings not marked up](image8.png)\n\nThis can also be seen on the \"Country/region\" selector modal heading, found within the header across all pages.\n\n![All pages: \"Country/region\" selector modal with visual heading](image2.png)\n\n![All pages: DOM of \"Country/region\" selector modal heading not marked up](image3.png)\n\nThis can also be seen on the \"What's New?\" and \"Our Story and Mission\" headings within the footer.\n\n![All pages: \"What's New?\" and \"Our Story and Mission\" visual headings within the footer](image5.png)\n\n![All pages: DOM of visual headings not marked up](image9.png)\n\nThis can also be seen on the \"The Hair Advisor\" and \"Our Favourites\" headings on page 1.\n\n![Page 1: \"The Hair Advisor\" and \"Our Favourites\" are visual headings](image6.png)\n\n![Page 1: DOM of visual headings not marked up](image7.png)\n\nThis can also be seen on the sub-headings under the \"Our Pro-V Nutrient Story\" heading, and the \"Meet The People Behind Our Brand\" heading, on page 5.\n\n![Page 5: Visual sub-headings](image13.png)\n\n![Page 5: DOM of visual headings not marked up](image14.png)\n\n![Page 5: \"Meet The People Behind Our Brand\" is a visual heading](image15.png)\n\n![Page 5: DOM of visual heading not marked up](image16.png)\n\nFurther on page 5, there are headings where only part of the text is set as a heading. The entire object needs to be grouped into one heading tag.\n\n![Page 5: Example of headings that are visually grouped as one object](image17.png)\n\n![Page 5: DOM example of grouped heading that has been split into heading and plain text](image18.png)\n\nThis can also be seen on page 12. On the \"Is Pantene cruelty-free\" heading. \n\n![Page 12: Heading not marked up](image10.png)\n![Page 12: Headings not marked up](image12.png)\n![Markup of heading](image11.png)\n\n## \n1. Visually note the headings.\n2. Inspect the elements in the DOM.\n3. Note that the headings have not been marked up, such as `<h1>`, `<h2>`, and so on.\n\n## \n\nWhen elements title or categorise other content, use headings with appropriate heading levels. Make sure that the heading levels used correctly communicate the structure of the page, such as the parent and child relationship between the headings. For example:\n\n```\n<h2>Shop Products</h2>\n...\n<h3>Product Type</h3>\n...\n<h3>Hair Needs</h3>\n```\n\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9585-51",
    "Summary": "Unable to dismiss search results",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Procter and Gamble (P & G)",
    "Description": "##  \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images without a descriptive alternative text. \n\nWe have classed the eye and star icons as informative as they communicate unique or meaningful information. \n\n## \n\nThis can be found on pages 2 and 11. On the eye icon.\n\n![Eye icon lacks alt attribute](image1.png)\n![Markup of image](image2.png)\n\nThis can also be found on pages 2, 4, 8, 9, and 10.\n\n![Example of star rating icons with no alternative](image3.png)\n\n![DOM of star rating icons](image4.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that they do not have a text alternative.\n\n## \n\n Informative images that convey meaningful or unique information need a descriptive alternative text. Inline SVG images can use `<title>`, `<desc>`, and `aria-labelledby` for the same purpose. For example:\n\n```\n<svg aria-labelledby=\"uniqueTitleID uniqueDescID\">\n<title id=\"uniqueTitleID\">The title of the SVG</title>\n<desc id=\"uniqueDescID\">A longer, more complete description for complex graphics.</desc>\n...\n</svg>\n``` \n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-412",
    "Summary": "Focus trapped in draggable overlay",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determined. This enables assistive technology to communicate the relationship to users. Content may otherwise seem unstructured or disorganised.\n\nThe date input field is not correctly associated with their visual label. The field's label is set to \"Date (DD/MM/YYYY)\" using an `aria-label`. The visual label. The purpose of the form fields may be unclear to users. \n\n## \n\nThis can be seen on the US - Existing M2NMD page. \n\n![\"Start date\" not associated with input field](image.png)\n![Markup of the visual label not associated with the date input field](image1.png)\n\n## \n1. Observe the visual labels for the form fields. \n2. Inspect the form fields and review the DOM. \n3. Observe that there is an attempt to associate the visual labels and form fields.\n4. Observe that the association has not been implemented correctly.\n5. Observe that there is an alternative labelling method, but does not include the visual label \"Start date\"\n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that form fields are associated with their visual labels. This can be done with `label` or `aria-labelledby`. Make sure that the `for` and `id` match correctly. For example: \n\n```\n<label for=\"startDate\">Start date (DD/MM/YYYY)</label>\n<input id=\"startDate\" type=\"text\"...>\n```\n\nIf the above is not possible, you can add the visual label information to an `aria-label`. This has the same effect of adding to the accessible name of the form field. This solution is less elegant, but it is particularly useful when there is no visible text. For example: \n\n```\n<input ... aria-label=\"Star date (DD/MM/YYYY)\"></button>\n``` \n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9195-6",
    "Summary": "Common used fields are not using autocomplete attribute",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. \n\nThe download button opens a page with the transcript in a new window. The icon and the text of the button communicate that they will trigger a download, but not that this will happen in a new window, which is triggered by the link having `target=\"_blank\"` on them.\n\n## \n\nThis can be found on page 1 with the \"download transcript\" link. \n\n![Link which does not have text alternative](image.png)\n![Markup of link](image1.png)\n\n## \n1. Observe that the links open in a new window.\n2. Observe that there is an icon that visually communicates that the link prompts a down\n3. Observe that this behaviour is not communicated visually or programmatically.\n\n## \n\nYou could avoid launching a new window. You could remove  `target=\"_blank\"` from the anchor tag and instead use the `download` flag. For example:\n\n```\n<a href=\"transcript.pdf\" download>Download Transcript</a>\n```\n\nAlternatively, make sure that users are aware that the link prompts a new window. This can be done with text or an icon.\n\n```\n<a href=\"…\" target=\"_blank\">Download Transcript <img src=”…” alt=\"transcript opens in a new window\"></a>\n<a href=\"…\" target=\"_blank\">Download Transcript (opens in a new window)</a>\n```\n\nAs well, in this instance, you may wish to replace the download icon with an icon that instead communicates that it opens a new window. For more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9195-9",
    "Summary": "Input fields do not use autocomplete attribute",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThe search button does not have an accessible name. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is not programmatically updated may confuse or mislead users.\n\n## \n\nThis can be found on page 5. On the search button. \n\n![Search button with no name](image.png)\n![Markup of search button with no name](image1.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is not programmatically determined. \n\n## \n\nMake sure that interactive elements have an appropriate name. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` and provide them with an accessible name through labels or internal text. For example:\n\n```\n<button>Search</button>\n```\n\nIf this is not possible, use `aria-label` to manually name elements. For example:\n\n\n```\n<button class=\"searchIcon\" aria-label=\"Search\"></button>\n```\n\nUse these techniques to provide appropriate accessible names. Accessible names should succinctly describe purpose and functionality. \n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9195-3",
    "Summary": "Text spacing is not supported",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nWhen closing the tour, the keyboard focus is not set to the top of the \"Close the tour\" modal. Instead, the keyboard focus is set on \"Resume the tour\" which is after a block of text. Users have to navigate backwards to access the content of the new modal. \n\n## \n\nThis can be seen on page 4. On the \"Close the tour\" modal. \n\n![Example tour page with close button](image1.png)\n![Page 4: keyboard focus set to resume button](image.png)\n\n## \n1. Using just your keyboard, close the tour\n2. Observe the keyboard focus is on the resume button\n3. Observe that it is not at the start of the modal\n\n## \n\nSet the focus to the start of the modal when the tour is closed. This can be done using the `.focus()` method.  You should set focus on the heading of the page. This would require using `tabindex=\"-1\"` on the element.\n\nFor more information, see [MDN - .focus() method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9195-2",
    "Summary": "Background elements receive keyboard focus",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The current focus order is illogical.\n\nThere are modal dialogs where the background elements can be accessed with a screen reader when arrowing upwards. This may particularly disadvantage these users. The illogical focus order may make the page difficult to understand and interact with.\n\n## \n\nThis can be seen on the modals of pages 2 and 3.\n\n![Page 2: Modal](image1.png)\n\n![Page 3: Modal](image.png)\n\n## \n1. Trigger the modal with a screen reader one.\n2. Use the up arrow key to navigate.\n3. Observe that background elements receive focus.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in a meaningful order. \n\nIn this case, when the modal dialog is open, make sure that keyboard focus is temporarily restricted to the dialog. This can be done with the following techniques. \n\n* Send the focus to the first element on the modal container. This can be done using the JavaScript `.focus()` method.\n* Hide all of the other content of the page with `aria-hidden=\"true\"`.\n* Remove the interactive elements in the background from the focus order with `tabindex=\"-1\"`.\n* Revert the above when the modal is closed. Removing the `aria-hidden` and `tabindex` properties.\n* When the dialog is dismissed, use the `.focus()` method to set focus back onto the element that opened it.\n\nThe use of `aria-hidden` and `tabindex` can be supplemented with an inert polyfill. \n\nFor examples, see [WAI ARIA - Dialog Example](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html), [GitHub - WICG - Inert](https://github.com/WICG/inert), and [inert-polyfill](https://github.com/GoogleChrome/inert-polyfill). \n\nFor more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets), [Google Developer - DOM Order Matters](https://developers.google.com/web/fundamentals/accessibility/focus/dom-order-matters), and [Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9195-8",
    "Summary": "VN - MFD - Focus is inconsistently set when going to another page",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInformative text must pass colour contrast requirements. For regular text, the required contrast ratio is 4.5:1. Regular text is defined as the following.\n\n* Less than 18pt or 24px with regular font weight (less than 700).\n* Less than 14 point or 18.5px with bold font weight (at least 700). \n\nFor large text, the required contrast ratio is 3:1. Large text is defined as the following.\n\n* At least 18pt or 24px with regular font weight (less than 700).\n* At least 14 point or 18.5px with bold font weight (at least 700). \n\nThere is text that does not meet the contrast ratio when receiving focus. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the text that fails the colour contrast requirements. \n\n## \n\nThis can be seen on page 5. On the description text under the \"System Administrator Quick Start Guide\" heading.\n\n![regular sized text: description that lacks colour contrast against the background image](image.png)\n\n![large text: part of the text does not meet colour contrast requirement of 3:1](image1.png)\n\n## \n1. Focus on the above elements. \n2. Get the colour values of the text and background colours.\n3. Insert these values into a colour contrast analyser.\n4. Observe that the analyser reports that the contrast ratio is not sufficient. \n\n## \n\nEnsure that the text has sufficient colour contrast against the background image for the entire text. This may be done by having an opaque background behind the text to give the text more contrast and separate it from the background image. \n\nThe colour contrast ratio between foreground and background colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9195-10",
    "Summary": "US Add Biller - Background elements receive screen reader focus",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere are elements that title or categorise other content. These elements have not been marked up as headings. \n\n## \n\nThis can be seen on page 5. On the \"The help centre contains many resources\" heading at the bottom of the page. \n\n![Page 5: heading not marked up](image.png)\n![Markup of visual heading that is not marked up semantically](image1.png)\n\n## \n1. Visually note the headings.\n2. Inspect the elements in the DOM.\n3. Note that the headings have not been marked up, such as `<h1>`, `<h2>`, and so on.\n\n## \n\nWhen elements title or categorise other content, use headings with appropriate heading levels. Make sure that the heading levels used correctly communicate the structure of the page, such as the parent and child relationship between the headings. For example:\n\n```\n<h1>Main Heading</h1>\n<h2>Parent Heading</h2>\n<h3>Child Heading</h3>\n```\n\nIn this case, the \"The help centre may contain many resources\" heading should be marked up using `<h2>`. For more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-16",
    "Summary": "Non-interactive elements are in focus order",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "Virgin Media",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. \n\nThe play and close button do not indicate keyboard focus.\n\n## \n\nIt happened on the Virgin Best Bits page. On the video play button and close button. \n\n![Play button does not indicate focus](image2.png)\n\n![Close button does not ind icate focus](image1.png)\n \n## \n1. keyboard tab onto the above elements\n2. note that there is no visible focus indication \n\n## \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not this `a { outline: none; }`. \n\nEnsure that the focus indicator has a colour contrast ratio of 3:1 against the background. \n\nFor more information, see [W3 - Undertstanding Focus Visible](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-visible.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-8",
    "Summary": "US - M2MI - Focus does not return to triggering element",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Link",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "University of Oxford",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. There are elements which do not indicate focus.\n\nThis appears to be a widespread issue across the website. It appears that most elements do not indicate focus due to the use of `outline:none`. We have provided a few examples, but these not the only instance of the problem. We strongly encourage that you review this issue across all pages.\n\nWe have raised this as a high priority issue due to how prevalent it is across the website. \n\n## \n\nThis can be seen on page 1 (Homepage), on the navigation menu links. \n\n![navigation links do not indicate keyboard focus](image.png)\n\nOn the same page (homepage), it can be seen with the \"What's on\" cards.\n\n![whats on sidebar do not indicate focus](image1.png)\n\nOn the same page (homepage), it can be seen with the links in the footer, such as those under \"Useful Links\". \n\n![footer links do not indicate focus](image2.png)\n\nThis appears to be due to `outline:none` being used throughout the website. \n\n![code showing use of outline none](image3.png)\n\n## \n1. keyboard tab onto the above elements\n2. note that there is no visible focus indication \n\n## \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not this `a { outline: none; }`.\n\nFor more information, see [MDN - focus](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus) and [CSS Tricks - Focusing on Focus Tricks](https://css-tricks.com/focusing-on-focus-styles/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_578-58",
    "Summary": "Focus inconsistent when moving to another page",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "Arts Council England",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. There are elements that do not indicate focus.\n \nFunctional `svg` elements within iframes do not have a visible focus indicator, which may confuse keyboard users as to which element they are currently focused on. \n\n## \n\nThis can be seen on the issuu `iframe` on page 7 where buttons do not have a visible focus indicator \n\n![Buttons have no focus indicator](image.png)\n\nThe 'Find' button opens this panel which contains buttons without visible focus indicators\n\n ![Buttons have no focus indicator](image1.png)\n\nThe 'Share' button opens this panel which contains buttons without visible focus indicators\n\n![Buttons have no focus indicator](image2.png)\n\nThis can also be seen in the maps `iframe` on page 17 where buttons do not have a visible focus indicator \n\n![Buttons have no visible focus indicator](image3.png)\n\n![Range adjuster has no visible focus indicator](image5.png)\n\n![Checkbox does not have visible focus indicator](image6.png)\n\n## \n1. Navigate onto the above examples with a keyboard\n2. Note that they do not have a visible focus indicator\n\n## \n\nEnsure that the functional `svg` elements have a visible focus indicator. \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS shows how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nThe W3C provide further guidance. See: [W3C - Focus visible](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-visible.html) and [How to make svg button accessible](https://www.freecodecamp.org/news/how-to-make-your-fancy-svg-button-accessible-83c9172c3c15/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-132",
    "Summary": "Hong Kong - Statement Preference - Non-interactive elements receive keyboard focus",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. There is a button which does not indicate focus.\n\n## \n\nThis is on US - Add Biller (Six Factor).\n\nThe button is on the top right of the 'Validate payee' dialog, which can be accessed by adding a new biller with a provided address.\n\n![Close button](image.png)\n\n## \n1. keyboard tab onto the above element\n2. note that there is no visible focus indication \n\n## \n\nEnsure that the element exhibits focus indication. As an example, see the dialog below where the close button receives focus. \n\n![example button](image1.png)\n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not this `a { outline: none; }`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-29",
    "Summary": "Search result item receives focus twice",
    "Success Criteria": "2.5.2: Pointer Cancellation [A]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nWhen triggering the tab by clicking, users may make accidental or erroneous pointer input, resulting in unwanted changes without a mechanism to prevent it. \n\nClicking on elements triggers the expected behavior on key down which means that there is no mechanism to prevent accidental triggering. Users with disabilities may inadvertently initiate touch or mouse events with unwanted results.\n\n## \n\nOn page 15 - Annual report and accounts. In financial reports and Unilever sustainable living plan tab panels. \"Group results, Beauty & Personal care...\" tabs. \n\n![tab](image.png)\n\n![tab DOM](image1.png)\n\nOn page 16 - Results presentations. In the \"sort results by\" dropdown.  \n\n![Show results control](image2.png)\n\nOn page 13 - Careers landing page. In the countries dropdown.\n\n![Countries](image3.png)\n\nOn page 14 - Careers power of you. In the countries dropdown.\n\n![Countries](image4.png)\n\n## \n\nEnsure that there is a mechanism in place to allow pointer cancellation. Use onkeyup events instead of onkeydown for button event listeners. \n\nFor further guidance, see [W3C - Pointer cancellation](https://www.w3.org/WAI/WCAG21/Understanding/pointer-cancellation.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8137-11",
    "Summary": "Text not accessible in screen reader browse mode",
    "Success Criteria": "2.1.2: No Keyboard Trap [A]",
    "Component": "Not Applicable",
    "Priority": "High",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nApps must be entirely operable by swiping. If screen reader focus becomes trapped on components, screen reader, keyboard, and switch users may be unable fully traverse and operate content. \n\nOn the search results screen, it is not possible to dismiss the page. The \"Cancel\" and \"Search\" field do not receive focus, as the focus is stuck on the search result list. \n\n## \n\nThis can be seen on page 3 (Select issuing country), after entering some text in the search field to display search results. \n\n![Input field and cancel button not focusable by swiping](image.png)\n\n## \n1. navigate to the mentioned element with screen reader enabled\n2. note that you become stuck.\n3. note that you have to disable screen reader to dismiss the screen\n\n## \n\nDo not trap focus inappropriately. Provide a mechanism for screen reader users to be able to dismiss the search results screen. \n\nYou can make the \"cancel\" button on the top of the screen available to screen reader users by setting:\n\n* On iOS:  `isAccessibilityElement` value to true.\n* On AOS:  `android:focusable` attribute to `true`. Additionally, set the `importantForAccessibility` to `yes`.\n\nAlternatively, this is the preferred alternative, make the \"Can't find your country\" section which has a close button from \"Select issuing country\" screen available at the bottom of the search results screen. This will enable users to remain in the search flow. \n\nFor more information, see [BBC Mobile Guidelines - Focusable elements](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/focusable-elements/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6893-4",
    "Summary": "Interactive element does not receive keyboard focus",
    "Success Criteria": "2.1.2: No Keyboard Trap [A]",
    "Component": "Not Applicable",
    "Priority": "High",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe app must be entirely compatible with swipe navigation. If screen reader focus becomes trapped on components, screen reader, keyboard, and switch users may be unable to proceed further. \n\nTriggering the 'Life insured' tooltip on iOS renders a draggable overlay. When using a screen reader, the user is unable to dismiss the overlay as this can only be done using drag down swipe navigation. \n\n## \n\nOn the draggable overlay. On the medical card page. \n\n![Draggable overlay which cannot be dismissed using screen reader](image.png)\n\n## \n1. with a screen reader, swipe and navigate through the above example\n2. note that you become stuck on the overlay \n3. note that the use of drag down gesture is required to get out or continue.\n\n## \n\nEnsure that the user is able to dismiss the overlay using a screen reader, without the use of gestures such as drag down. This can be achieved using buttons to dismiss the overlay on double-tap, as done on Android.\n\nFor more information, see [BBC Mobile Guidelines - Actionable elements](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/design/actionable-elements)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-23",
    "Summary": "Filter event radio buttons are not keyboard operable",
    "Success Criteria": "1.3.5: Identify Input Purpose [AA]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Motor, Cognitive",
    "Customer": "Virgin Media",
    "Description": "## \n\nInput fields must use the `autocomplete` attribute when collecting certain personal information about the user. This enables browsers to auto-fill commonly requested information. \n\nThe fields are not using this attribute. \n\n## \n\nOn the login page. \n\n![Input fields without autocomplete attributes](image.png)\n\n![Markup of input fields](image1.png)\n\n## \n1. Inspect the mark-up for the relevant input fields.\n2. Note that they do not use the relevant autocomplete attribute\n\n## \n\nUse the `autocomplete` attribute with an appropriate value. For example, an email field can be marked up as `<input type=\"email\" autocomplete=\"email\">` \n\nNote that this is only required for common fields. \n\nFor a list of autocomplete attributes that need to be used where relevant see [W3 - Input Purposes](https://www.w3.org/TR/WCAG21/#input-purposes).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-32",
    "Summary": "Filter buttons are not keyboard operable",
    "Success Criteria": "1.3.5: Identify Input Purpose [AA]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Motor, Cognitive",
    "Customer": "University of Oxford",
    "Description": "## \n\nInput fields must use the `autocomplete` attribute when collecting certain personal information about the user. For example, first name, surname, address, and so on. This enables browsers to auto-fill commonly requested information.\n\nThere are input fields that need to use the `autocomplete` attribute with an appropriate value. They currently do not use the attribute at all.\n\n## \n\nThis can be seen on pages 6 (Contract details), 8 (Add Referee) and page 20 (Referral Form). None of the input fields use autocomplete attributes. \n\n![input fields that are not using autocomplete attribute](image.png)\n\n![Forename input field without autocomplete attribute](image1.png)\n\n![Postcode input field without autocomplete attribute](image2.png)\n\n## \n1. Inspect the mark-up for the relevant input fields.\n2. Note that they do not use the relevant autocomplete attribute\n\n## \n\nUse the `autocomplete` attribute with an appropriate value. Make sure to only do this when collecting information about the user. Do not do it when you are collecting information about someone else, such as a reference, emergency contact, and so on. For example:\n\n* `given-name`, first name or given name.\n* `additional-name`, middle name(s).\n* `family-name`, surname or family name. \n* `new-password`, a new password (e.g., when creating an account or changing a password).\n* `current-password`, the current password (e.g. when logging in).\n\nFor a list and explanation of the `autocomplete` values, see [WCAG - Input Purposes for User Interface Components](https://www.w3.org/TR/WCAG21/#input-purposes).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-2",
    "Summary": "Link does not receive keyboard focus",
    "Success Criteria": "1.4.12: Text Spacing [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Cognitive",
    "Customer": "Virgin Media",
    "Description": "## \n\nUsers should be able to adjust the style of the author specified text to improve their reading experience. No loss of content or functionality should occur when the following style properties are set:\n\n* Line height (line spacing) to at least 1.5 times the font size.\n* Spacing following paragraphs to at least 2 times the font size.\n* Letter spacing (tracking) to at least 0.12 times the font size.\n* Word spacing to at least 0.16 times the font size.\n\nThese style properties not supported across the website.\n\n## \n\nIt happened on the login page. \n\n![Text spacing not changed after using the bookmarket](image.png)\n\n## \n1. navigate onto the pages affected\n2. with a text spacing tool, bookmarklet or custom stylesheet, confirm that elements do not support text spacing\n\n## \n\nEnsure that text spacing is supported using containers that either allow enough space for text spacing and text wrap or that they expand to fit the text. See W3C Techniques [Allow for text spacing without wrapping](https://www.w3.org/WAI/WCAG21/Techniques/css/C35) and [Allow for text spacing override](https://www.w3.org/WAI/WCAG21/Techniques/css/C36) for more information.\n\nFor an example text spacing bookmarklet see [CodePen - Text Spacing Bookmarklet](https://codepen.io/stevef/pen/YLMqbo/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_578-62",
    "Summary": "Button within the iframe is not keyboard accessible",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "Arts Council England",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The current focus order is illogical.\n\nIn the Issuu iframe, there are background elements that receive keyboard focus as the user tabs through the content. This may confuse users as they will be unaware of where their focus currently is on the page. This issue also applies to screen reader users as the background elements are announced without context. \n\nFor video, when users open an overlay for 'More options', tabbing past the close button focus moves out of the overlay onto the parent page elements. This is undesired as screen reader users would expect focus to remain inside the overlay elements until they explicitly close it.\n\nIn addition, on all pages (desktop and mobile) when the menu and search panels receive focus, the background elements will also receive focus. \n\nOn all pages: When the menu navigation panels are activated, the elements receive focus and are announced by the screen reader.  The background content is then announced, when the user is not navigating through the main page. \n\nIn addition, the above issue also occurs when the search panel is activated and the background content is announced. In both circumstances, the user is not expecting to hear background content, which is likely to be confusing to users who cannot see the page. \n\n\n## \n\nThis can be seen on the issuu iframe. Thjs has an overlay which appears visually when the 'Find' button is pressed. However, the background SVG buttons and input field in this overlay receive keyboard focus even when they are not visible. \n\n![Background elements receive keyboard focus](image.png)\n\nOn video, tabbing from the close button, focus moves out of the overlay which is not desired.\n\n![Focus do not stay on the overlay elements](image1.png)\n\nOn all pages, when the menu panel is activated background content receives focus and is announced.  \n\n![When the Submenu navigation panel is activated background content is announced (All pages, background content is announced)](MenuNav.png) \n\nIn addition, on all pages, when the search panel is activated, background content receives focus and is announced.  \n\n![When the search panel is activated background content is announced (All pages, background content is announced) ](searchbar.png) \n\n## \n1. Tab through the above page using a keyboard \n2. Observe that the focus order isn't logical\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). The visual layout and DOM structure must correspond. Focus should not leave an overlay until it is closed by the user.\n\nKeyboard and screen reader focus should be contained in the modal container using the techniques below:\n\n* Hide background content that is not currently visible from screen readers using the `aria-hidden` attribute \n* All actionable elements in the background of a page that are not currently visible should be assigned with `tabindex=“-1”` to remove the elements from keyboard focus order\n* When the modal is closed remove the `aria-hidden` and `tabindex=“-1”` attributes from the background elements so that the user can logically focus onto them\n\nFor more information see [WAI-ARIA Practices Dialog](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-340",
    "Summary": "Selected element is not programmatically identified",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom.  \n\nWhen activating the view or delete option from the table options to view or delete a record, the focus is inconsistently set to different elements on the modal. However, note that focus does correctly return to the triggering element on the table once the modal is closed. \n\n## \n\nThis can be found on the VN – MFD page. On the view, or edit option within the table. \n\n![activating view option sets focus on text inconsitently on the next page](image.png)\n\n## \n1. tab through the mentioned elements\n2. observe that focus is inconsistently set to different elements on the pages\n\n## \n\nSet the screen reader focus to the start of the page when activating view, or delete option. This can be done using the `.focus()` method.  You could set focus onto the main heading of the page. This would require using `tabindex=\"-1\"` on the heading.\n\nFor more information, see [MDN - .focus() method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-121",
    "Summary": "Responsive target planning elements do not have an interactive role or state",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen modal dialogs are used, focus needs to be restricted to them. This works correctly on desktop. However, on mobile, screen reader users can access information behind full-page model dialogs. This may confuse users, particularly partiality sighted screen reader users, as they are navigating onto off-screen elements. \n\n## \n\nOn US - Add Biller, with the \"Are you sure you want to cancel\" modal dialog, the screen reader user can left swipe or right swipe past the ‘Are you sure you want to cancel?’ modal dialog and interact with background elements. \n\n![Background elements receiving screenreader focus](image.png) \n\n## \n1. swipe through the  modal dialog on mobile\n2. note that you can access the background\n\n## \n\nScreen reader focus should be contained in the modal container using the techniques below:\n\n* Hide background content that is not currently visible from screen readers using the `aria-hidden` attribute\n* All actionable elements in the background should be assigned with `tabindex=“-1”` to remove the elements from the focus order\n* When the modal is closed remove the `aria-hidden` and `tabindex=“-1”` attributes from the background elements so that the user can logically focus onto them\n\nAlternatively, use the WICG `inert` polyfill. See [WICG inert polyfill on Github](https://github.com/WICG/inert) and [Intro to the inert attribute](https://dev.to/hybrid_alex/intro-to-the-inert-attribute-3d25), which performs the same action.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-260",
    "Summary": "There are parsing errors",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-interactive elements should not be included in the keyboard focus order. Inclusion in the focus order implies that the elements are interactive. There are list items are included in the keyboard focus order despite not being interactive. \n\n## \n\nThis occurs on US - US Details - Transaction History\n\n![List items receiving keyboard focus](image.png)\n![DOM for list items.](image1.png)\n\n## \n1. tab through to the mentioned element using a keyboard\n2. observe that the list items receive keyboard focus\n\n## \n\nThese elements use `tabindex=\"0\"`. This adds them to the focus order. If you need the list items to be able to receive focus when using the skip links at the top of the page, you instead need to use `tabindex=\"-1\"`. For more information, see [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-386",
    "Summary": "Page title is not descriptive",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. Pressing the close button on the \"Choose your own account or beneficiary\" modal dialog does not return keyboard focus to its triggering element, and instead sets it to the body of the page. \n\n## \n\nThis can be seen on the US - M2MI page. On the \"Edit\" button on the \"To\" section. \n\n![keyboard focus does not return to edit button when closing modal](image.png)\n\n## \n1. using a keyboard, close the modal \n2. observe that the focus does not return to the triggering element\n\n## \n\nKeyboard focus should return to the triggering element, that is the Edit button. \n\nThis can be done by using the `.focus()` method. For more information, see [MDN - focus method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7787-20",
    "Summary": "Download bulk reports not descriptive",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. However, during the single page application, the focus is inconsistently moved to different elements on the page.\n\n* When activating the back button to go from page 2 to page 1, the screen reader focus is set inconsistently to different elements on the page. \n* Pressing the continue button on pages 1 and 2 causes screen reader focus to be set to an element part-way down the page. \n* Proceeding to page 4 causes screen reader focus to set inconsistently to different elements on the page. \n\nWe cannot test whether this happens on desktop as the back button on page 2 is not keyboard operable (see issue ADR_7787 - 3).\n\n## \n\nIt can be seen on the \"Back\" and \"Continue\" buttons on the bottom of pages 1, 2, 3, and 4 after the inputs on each page. \n\n![Pressing back button on page 2 sets the VoiceOver focus on \"I've not moved yet\" on page 1](image.png)\n![Proceeding to page 4 sets focus inconsistently to different elements on the page](image1.png)\n\n## \n1. tab through the mentioned elements\n2. observe that focus is inconsistently set to different elements on the pages\n\n## \n\nSet the screen reader focus to the start of the page when pressing the continue or back button. This can be done using the `.focus()` method.  You could set focus onto the main heading of the page. This would require using `tabindex=\"-1\"` on the element.\n\nFor more information, see [MDN - .focus() method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-41",
    "Summary": "Dropdown selected count is not communicated",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere are off-screen interactive elements that receive focus. This may particularly disadvantage keyboard users who often navigate by tabbing through the interactive elements. That invisible interactive elements receive focus may confuse or frustrate users. \n\n## \n\nThis can be seen on the sub-navigation menu on mobile on page 4. The off-screen links receive focus and can be activated with VoiceOver on. \n\n![off-screen element that receives focus](image.png)\n![the links that receive focus](image1.png)\n\n## \n1. Using just your VoiceOver on iOS, swipe through the above.\n2. Observe that focus goes onto elements that are not interactive.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in meaningful order. \n\nIn this case, make sure that the non-interactive elements do not receive keyboard focus. \n\nWhen elements are off-screen, make sure that they are excluded from the focus order. This can be achieve with with the HTML `hidden` or CSS `display:none`. Both will hide the element from all users. This same can be achieved by using both `aria-hidden=\"true\"` and `tabindex=\"-1\"` on the same element. For example:\n\n```\n<button class=\"visuallyOffScreen\" aria-hidden=\"true\" tabindex=\"-1\"> ... </button>\n```\n\nHowever, note that `aria-hidden=\"true\"` and `tabindex=\"-1\"` will not visually remove elements from the page. \n\nIf an element is on-screen but is meant to be inoperable, the `disabled` attribute will keep the element on-screen, but remove it from the focus order and programmatically identify it as disabled. This same can be achieved by using both `aria-disabled=\"true\"` and `tabindex=\"-1\"` on the same element.  For example:\n\n```\n<button aria-disabled=\"true\" tabindex=\"-1\"> ... </button>\n```\n\nFor more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute), [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard), [Keyboard Navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-438",
    "Summary": "Element pressed state is not marked up",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe keyboard focus order must be meaningful. It does not need to mirror the visual order. However, interactive elements must receive focus in a way that makes some sort of sense. The focus order must not be totally illogical or make the operability of components more challenging. \n\nThere are elements that receive focus that are not interactive. This is illogical as only interactive elements should receive focus. This may particularly disadvantage keyboard users. The illogical focus order may make the page difficult to understand and interact with.\n\n## \n\nThis can be seen on the Hong Kong - Statement preference page.\n\nOn the account cell within the \"Accounts eligible for statements and/or advices\" table. \n\n![Account information receiving keyboard focus](image.png)\n![Block of text marked up using tabindex=\"0\"](image1.png)\n\nOn the \"Important Information\" heading, as well as the block of under the heading. \n\n![\"Important information\" heading receiving keyboard focus](image2.png)\n![Markup of the heading and block of text below it](image3.png) \n\nThis can also be seen on the  \"Important information\" modal by activating the \"Important notice\" link for joint accounts. As well as the \"scenarios\" link under the \"Important information\" section. \n\n## \n1. Using just your keyboard, tab through the above.\n2. Observe that focus goes onto elements that are not interactive.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). Make sure that the interactive elements are placed in the DOM in a logical sequence that allows keyboard users to tab through the page in meaningful order. \n\nIn this case, make sure that the non-interactive elements do not receive keyboard focus. For example, make sure to avoid using `tabindex=\"0\"` on elements that should not receive focus. If you need the elements to be capable of receiving focus through the `focus` method, use `tabindex=\"-1\"`. For example:\n\n```\n<h1 tabindex=\"-1\">Main Heading</h1>\n```\n\nUsing `tabindex=\"-1\"` allows elements to used as a target for the `focus` method without adding them to the focus order. For more information, see [Yale University - Web Accessibility - Focus and Keyboard Operability](https://usability.yale.edu/web-accessibility/articles/focus-keyboard-operability), [MDN - Keyboard](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_WCAG/Keyboard) and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-13",
    "Summary": "Checkboxes are not associated with their label",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Radio Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. \n\nThere are hidden radio buttons that receive keyboard focus. Within the label of each radio button, there is a link element. As a result, each list item receives focus twice. The current focus order is illogical. \n\n## \n\nThis can be seen on pages 7 and 8, on the autocomplete results list. \n\n![Page 8 - Link receiving keyboard focus](image.png) \n\n![Page 8 - Radio button receiving keyboard focus](image1.png) \n\n## \n1. Tab through the above pages — use just your keyboard.\n2. Observe that each list item receives focus twice.\n\n## \n\nThe focus order is determined by the location of focusable elements in the Document Object Model (DOM). The visual layout and DOM structure must correspond.\n\nEnsure that the search result item only receives focus once. This can be achieved using `tabindex=\"-1\"` on either of the interactive elements.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-44",
    "Summary": "There are multiple parsing errors",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision, Motor",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nWebsites must be entirely compatible with just a keyboard. Do not rely on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate them. \n\nThere are elements that cannot be accessed with screen reader arrow keys. This means that the text is inaccessible to screen reader users. \n \nAdditionally, the hero title should be marked up as a heading (ADR_6045-38) to communicate it's structure and purpose to screen reader users. \n\n## \n\nOn page 11 (News landing page). The story hero summary text under the main link, starting with \"Ten years ago we set out on a journey...\".\n\n![Text](image.png)\n\n![Text DOM](image1.png)\n\n![News features](image2.png)\n\n## \n1. Navigate onto the above pages with a screen reader.\n2. Using a keyboard in a screen reader browse mode, attempt to arrow onto the above text.\n3. Note that the text is skipped and not announced.\n\n## \n\nEnsure that the story hero summary text can be announced using browse mode on a screen reader. This may be accomplished by moving the `<p>` element out of the `<a>`, as this has an `aria-label` value that overwrites the paragraph text. \n\nAs for the link text, this could be assigned to a heading as it is done currently.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-5",
    "Summary": "Combobox is not programmatically associated with label",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "Virgin Media",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not relying on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it.  \n\nShow/Hide button has not been marked up as focusable. Keyboard users are unable to operate it.  \n\n## \n\nThis happened on the login page. \n\n![Login page](image.png)\n\n![Markup of Show/Hide button](image2.png)\n\n![Element not keyboard focusable](image1.png)\n\nThis also happened on the Virgin Media Best Bits page. On the \"Your Telly\" tab panel.  \n\n![Video start button is not keyboard focusable](image3.png)\n\n![Markup of start video button](image4.png)\n\n![Close button is not keyboard focusable on video modal](image5.png)\n\n![Markup of close button](image6.png)\n\n## \n1. navigate onto the above pages\n2. using a keyboard, attempt to operate the above components.\n3. note that the element is not in the keyboard focus order \n\n## \n\nUse native elements such as `<button>` to markup the element. This will provide native keyboard support. \n\nIf this is not possible and the control cannot be replicated with native elements, the following are required for keyboard/ swipe support:\n\n* scripted event listeners that support key presses\n* Use `tabindex=\"0\"` on elements that should receive focus\n* Ensure that focus is visible when the element receives focus.\n* Use WAI-ARIA roles and states, to also communicate how the widget works to assistive technology users.\n\nUsers will expect specific keys to work with certain widgets. Expected keyboard commands and ARIA roles for common custom widgets are provided by the W3C in the [WAI-ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.1/).\n\nFor further information about keyboard support refer to the [Developing a Keyboard Interface](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard) section in the same document.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-19",
    "Summary": "Radio group is not associated with legend",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Button",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "University of Oxford",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not relying on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. The filter event radio buttons cannot be operated with a keyboard. \n\n## \n\nThis can be seen page 4 (Events Lists), with the Filter Events radio buttons.\n \n![Radio buttons that are not keyboard operable](image.png)\n\n![Markup of the radio buttons](image1.png)\n\n## \n1. navigate onto the above radio buttons\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that inputs or controls cannot be operated with a keyboard.\n\n## \n\nIf custom elements serve the same purpose and operation as standard elements, use standard elements. Do not rely on scripting to make keyboard elements operable if equivalent native elements can be used instead. For example:\n\n```\n<fieldset>\n<legend>Filter Events: </legend>\n  <div>\n    <input type=\"radio\" name=\"format\" id=\"forthcoming\" value=\"\" checked>\n    <label for=\"forthcoming\">FORTHCOMING EVENTS</label>\n  </div>\n  <div>\n    <input type=\"radio\" name=\"format\" id=\"past\" value=\"\">\n    <label for=\"past\">PAST EVENTS</label>\n  </div>\n</fieldset>\n```\n\nFor more information, see [WAI Tutorials - Grouping controls](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-46",
    "Summary": "Combobox has missing ARIA attributes",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Button",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "University of Oxford",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. Buttons cannot be operated with a keyboard. \n\n## \n\nThis can be seen on page 8 (Fellows) with the Fellows sort by surname (A-Z) buttons.\n \n![Buttons that are not keyboard operable](image2.png)\n\n![Markup of the buttons](image.png)\n \n## \n1. navigate onto the above radio buttons\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that inputs or controls cannot be operated with a keyboard.\n\n## \n\nIf custom elements serve the same purpose and operation as standard elements, use standard elements, such as `<button>` or an anchor tag. Do not rely on scripting to make keyboard elements operable if equivalent native elements can be used instead. For example:\n\n```\n<nav aria-label=\"Fellow filter\">\n<span>Surname</span>\n<ul>\n <li><button><span class=\"hiddenText\">Filter by surname starting with</span>A</button></li>\n...\n</ul>\n</nav>\n```\n\nFor more information, see [WAI Examples - Buttons](https://www.w3.org/TR/wai-aria-practices-1.1/examples/button/button.html). \n\nYou can also use provide additional context for this widget using a `<nav>` region and hidden text. Note that this is not a requirement for WCAG, but it would make using it more user-friendly. For more information, see [MDN - Navigation role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Navigation_Role).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-68",
    "Summary": "US - Existing M2NMD - Selected element is not programmatically identified",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Link",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "University of Oxford",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not relying on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. \n\nThe dismiss overlay link cannot be operated with a keyboard. The element does not receive keyboard focus because it lacks a `href` attribute.  \n\n## \n\nThis can be seen on page 7 (Student Profiles), with the dismiss overlay link. Any video from the twitter embed can be activated to open this overlay. \n\n![Dismiss overlay link which is not keyboard operable](image.png)#\n\n![Markup of link without href](image1.png)\n\n## \n1. navigate onto the twitter embed\n2. using a keyboard (and only the keyboard) attempt to operate the above components.\n3. note that the dismiss link does not receive keyboard focus\n\n## \n\nFor every anchor tag, include an `href` attribute with an appropriate value. For example:\n\n```\n<a href=\"...\">Close</a> \n```\n\nAlternatively, use a native `<button>` element.  For more information, see [MDN - Anchor Tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) as well as [MDN - Button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_578-63",
    "Summary": "US - Existing M2NMD - Current date is not programmatically identified",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Button",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision, Motor",
    "Customer": "Arts Council England",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not rely on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate certain items. There are elements that cannot be operated with a keyboard.\n\nA button does not receive keyboard focus so sighted keyboard users cannot use the button. This prevents keyboard users from accessing certain functionality within the site. \n\n## \n\nThis issue can be seen on the top-top left of the maps iframe. Clicking on the button opens a sidebar, but this cannot be done using only a keyboard. \n\n![Button is not keyboard accessible](image.png)\n\n## \n1. Navigate onto the above page.\n2. Using a keyboard (and only the keyboard) attempt to operate the above components.\n3. Note that inputs or controls cannot be operated with a keyboard.\n\n## \n\nThe +/- zoom button also cannot be focused on using a keyboard. However, the keys +/- keys on the keyboard can be used as a substitute. You could provide this as extra information (optional).\n\nUse native elements such as a `<button>`. Do not rely on scripting to make keyboard elements operable if equivalent native elements can be used instead.\n\nOn widgets where this is not possible and controls cannot be replicated with native elements, the following are required for keyboard support:\n\n* Scripted event listeners that support key presses.\n* Use `tabindex=\"0\"` on elements that should receive focus.\n* Ensure that focus is visible when the element receives focus.\n* Use WAI-ARIA roles and states, to also communicate how the widget works to assistive technology users.\n\nUsers will expect specific keys to work with certain widgets. Expected keyboard commands and ARIA roles for common custom widgets are provided by the W3C in the [WAI-ARIA Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.1/).\n\nFor further information about keyboard support refer to the [Developing a Keyboard Interface](https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard) section in the same document.",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-84",
    "Summary": "US - M2MI - Selected and current date is not marked up",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are selectable elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the selected state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Note the components are visually highlight as selected.\n2. Inspect the element and review the DOM. \n3. Note that the selected state is not programmatically determined. \n4. Observe that the state is not available through text. \n5. Observe that the state is not available through text. \n\n## \n\nMake sure that the selected state is programmatically determined. \n\nUse `aria-selected` and update the `true` and `false` value appropriately. The value should be `true` when an element is selected and `false` when it is not selected. As well, make sure that the attribute is on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<button role=\"tab\" aria-selected=\"true\"> ... </button>\n```\n\nMake sure that `aria-current` and `aria-selected` are not used interchangeably.\n\nFor example, `aria-current=\"date\"` should be used for dates that are highlighted without the user interacting with them, such as the current day. When the user actively selects an element, it should use `aria-selected=\"true\"`. The nuance is explained in [aria-current - examples and best practices](https://www.aditus.io/aria/aria-current/#date-picker-widget). \n\nFor more information, see [W3C - aria-selected](https://www.w3.org/TR/wai-aria-1.1/#aria-selected) and [WAI ARIA Practices - Tabbed Interface](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-87",
    "Summary": "US - Existing M2NMD - There are multiple parsing errors",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are elements that are visually highlighted as currently relevant. They are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the current page state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Observe the elements visually highlighted are currently relevant.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the current state is not programmatically determined. \n5. Observe that the state is not available through text. \n\n## \n\nMake sure that the current state is programmatically determined. Use `aria-current` or hidden text. The possible specific values are `page`, `step`, `location`, `date`, `time`. As well, `true` and `false` can be used a catch-all values to determine whether an element is current or not. For example:\n\n```\n<ul>\n  <li><a href=\"...\">Home</a></li>\n  <li><a href=\"...\" class=\"highlighted\" aria-current=\"page\">Blog</a></li>\n  <li><a href=\"...\">Shop</a></li>\n  <li><a href=\"...\">Contact</a></li>\n</ul>\n```\n\nMake sure that `aria-current` and `aria-selected` are not used interchangeably.\n\nFor example, `aria-current=\"date\"` should be used for dates that are highlighted without the user interacting with them, such as todays date. When the user actively selects an element, it should use `aria-selected=\"true\"`. The nuance is explained in [aria-current - examples and best practices](https://www.aditus.io/aria/aria-current/#date-picker-widget). \n\nFor more information, see [ADG - Marking elements as the current one](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6021-55",
    "Summary": "Users are not notified of search results",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button, Radio Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that do not have an accessible role and value. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programatically updated may confuse or mislead users.\n\n## \n\nOn mobile, this can also be found on page 2 with buttons to select different lifestyles for expenses. The buttons do not have a button role and programmatic definition for when the user selects one of the buttons. \n\n![Page 2: Lifestyle buttons that are not marked up](image.png)\n![Page 2: Markup of the buttons](image1.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the role and value are not programmatically determined. \n\n## \n\nThe \"Basic lifestyle\", \"Modest lifestyle\", \"Comfortable lifestyle\" \"Affluent lifestyle\" and \"Personalise your living expenses\" buttons should have their role and pressed state exposed to assistive technologies. This can be done with a button role and `aria-pressed`. For example:\n\n```\n<button aria-pressed=\"true\">Basic Lifestyle</button>\n<span tabindex=\"0\" aria-pressed=\"true\">Basic Lifestyle</button>\n```\n\nAnother option would be converting these elements into radio buttons. This would be semantically valid it is a group of elements where the user can only select one option. Note that you can entirely re-style radio buttons, as shown in this [WAI - Custom Controls - Star Example](https://www.w3.org/WAI/tutorials/forms/custom-controls/#a-star-rating).\n\nAs well, it would be helpful to provide a warning that selecting the \"Personalise your living expenses\" button opens a modal dialog. This is not strictly required for conformance, but would make the component more user-friendly. For example: \n\n```\n<button aria-press=\"false\">Personalise your living expenses <img src=\"opensDialogIcon\" alt=\"Opens a modal dialog)\"></button>\n```\n\nFor more information, see [MDN - aria-pressed](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role) and [WAI Tutorials - Grouping radio buttons](https://www.w3.org/WAI/tutorials/forms/grouping/)\n\nFor a list of the ARIA roles available, see [ARIA Specification - Role Definitions](https://www.w3.org/TR/wai-aria-1.1/#role_definitions) and [MDN - Using ARIA Roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques). \n\nFor more information, see [WAI-ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/), [Inclusive Components](https://inclusive-components.design), [a11y Project](https://a11yproject.com/), and [Accessibility Developer Guide](https://www.accessibility-developer-guide.com/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7888-2",
    "Summary": "Tooltip text not automatically announced",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nParsing errors were found \n\n## \n\nIt happened on the Securities Services Reports widget.  \n\n![18 errors that may impact accessibiltiy flagged by Nu Validator](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7888-3",
    "Summary": "Image has inappropriate alt text",
    "Success Criteria": "2.4.2: Page Titled [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nGood page titles have several benefits. For example, when pages load, screen readers announce page titles. It is used to orientate such users — communicating the nature of the loaded page. All users use page titles in a similar fashion and benefit from descriptive page titles.\n\nThe page title is not descriptive \n\n## \n\nIt happened on the Securities Services Reports widget.  \n\n![Page title not descriptive](image.png)\n\n## \n1. navigate onto the above page\n2. note the inappropriate page title \n\n## \n\nEnsure that pages have accurate page titles.\n\nThis can be done with a `<title>` in the `<head>` section. Consider a page name, page category, site name format. For example: `<title>Securities Services Reports | HSBC Evolve | HSBC</title>`. Whatever format you use, use it consistently throughout. \n\nWith single page applications, if you thoroughly update content and functionality, the page title needs to be dynamically updated, as well. This can be done in scripting using `document.title = \"My new title.\";`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7888-4",
    "Summary": "Buttons are not descriptive",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen labels are used, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged.  \n\nThe bulk download button has an accessible name as the individual download buttons for reports\n\n## \n\nIt happened on the Securities Services Reports widget. On the bulk download button. \n\n![Buttons with same accessible name](image.png)\n\n![Download individual report button](image1.png)\n\n![Download bulk report button](image2.png)\n \n## \n1. navigate through the above labels\n2. note they they do not descriptively describe the purpose of the button\n\n## \n\nEnsure that they adequately describe the control or expected input. For example:\n```\n<button aria-label=\"download selected reports\">\n...\n</button>\n```\n\nThe W3C provide further guidance on writing and providing effective labels\n\n* [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure)\n* [Providing descriptive headings](https://www.w3.org/TR/WCAG20-TECHS/G130.html)\n* [Providing descriptive labels](https://www.w3.org/TR/WCAG20-TECHS/G131.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7888-6",
    "Summary": "Description list borders have low colour contrast",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe dropdown selected count has an `aria-label` which provides more information about the count. However, as the `aria-label` is on a `<div>` which is neither a landmarks nor interactive content, the text will not be communicated to assistive technology users. \n\n## \n\nIt happened on the Securities Services Reports widget. On the filter dropdown count. \n\n![Selected count](image.png)\n\n![Selected count markup](image1.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nVisually hidden text can be used to provide more context on filter selected count. For example:\n\n```\n<div class=\"visuallyhidden\">\n   8 selected categories  \n</div>\n```\nFor information on creating visually hidden text, see [WAI Tutorial - Note on hiding elements](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7888-5",
    "Summary": "Tooltip expanded and collapsed state not declared",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe element which contains the toggle switch and label is not marked up with the pressed state. \n\nColour alone is being used to identify that the element is selected. When selected, pressing the \"Up\" or \"Down\" button moves the column position in the table. Assistive technology users may be unable to discern which column header is currently selected. \n\n## \n\nIt happened on the Securities Services Reports widget. On the column customise menu. \n\n![Toggle switch pressed state shown visually using colour](image.png)\n\n![Markup of buttons](image1.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nEnsure that the pressed state is programmatically determined. This can be done using the `aria-pressed=\"true\"` to communicate to assistive technologies that the button is selected. \n\nFor example,\n```\n   <button aria-pressed=“true”>\n      Fund / account title\n   </button>\n```\n\nAs well, ensure that the toggle switch button and the button used to communicate pressed state are not nested within each other. This may cause parsing issues. \n\nFor more information, see [Scott O'hara  - Toggle Button Switch](https://scottaohara.github.io/a11y_styled_form_controls/src/toggle-button-switch/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7888-1",
    "Summary": "Form is automatically submitted",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe checkboxes are not programmatically associated with with their visual labels. \n\n## \n\nIt happened on the Securities Services Reports widget. \n\nOn the toggle switches within the customise view overlay. \n\n![Toggle switches that are not programmatically associated with their visual labels](image.png)\n\n![Markup of labels and toggle switches](image1.png)\n\nOn the checkboxes within the filter dropdowns. This occurs on all of the dropdowns. \n\n![Example: Fund Service ID filter checkboxes](image2.png)\n\n![Markup of checkboxes](image3.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship is not communicated\n\n## \n\nEnsure that the toggle switches are associated with their visual labels. For example: \n```\n<label for=\"label-filetype\">File type</label>\n<input type=\"checkbox\" id=\"label-filetype\">...</input>\n```\n\nFor more information, see [WAI - Labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9202-1",
    "Summary": "Text not translated to French",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nThere are parsing errors due to:\n* Invalid nesting \n\n## \n\nThis can be seen on page 2. \n\n![Page 2: Parsing errors found on page 2](image1.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements do not have duplicate attributes. \n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9202-6",
    "Summary": "Interactive element has no role",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Combobox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\n\"Cheque Payment Method\" combobox is not associated with its visual label. \n\n## \n\nThis can be seen on page 2. On the \"Cheque Payment Method\" combobox. \n\n![Page 2: Cheque payment method combobox not associated with label](image.png)\n![Page 2: Markup of label and combobox](image1.png)\n\nAlso on page 2, this can be seen on the \"Debit account\" combobox\n\n![Page 2: Debit account combobox not associated with label](image3.png)\n![Page 2: Markup of label and combobox](image2.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship is not communicated\n\n## \n\nMake sure that combobox components are programmatically determined. If possible, use a native `<select>` element. These have out-of-the-box accessibility. If this is not possible, create a combobox with ARIA. \n\nOn the combobox, use `role=\"combobox\"`. Where possible, expand a native `<input>`. Make sure that the `<input>` is labelled. This can be done with `<label>` or `aria-labelledby`. For example: \n\n```\n<label for=\"ex\">Payment Method</label>\n<input id=\"ex\" type=\"search\" role=\"combobox\" \n  aria-activedescendant=\"01\" aria-autocomplete=\"list\"\n  aria-expanded=\"true\" aria-controls=\"results\" aria-haspopup=\"listbox\" value=\"Select Payment Method\">\n<ul id=\"results\" role=\"listbox\" aria-label=\"Payment List\">\n  <li id=\"01\" role=\"option\" aria-selected=\"true\">Payment Method 1</li>\n  <li id=\"02\" role=\"option\">Payment Method 2</li>\n...\n</ul>\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/), [WAI ARIA Practices - Combobox](https://www.w3.org/TR/wai-aria-practices-1.2/#combobox) and [24a11y - Select Your Poison](https://www.24a11y.com/2019/select-your-poison/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9202-3",
    "Summary": "Interactive element has the wrong role",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are radio buttons that are not associated with their visual group label. The purpose of the form fields may be unclear to assistive technology users. \n\n## \n\nThis can be seen on page 2. On the cheque outsourcing radio buttons.\n\n![Page 2: Radio group and legend](image1.png)\n![Page 2: Radio group and legend grouping not associated](image.png)\n\n## \n1. Observe the visual group label for the radio buttons. \n2. Inspect the radio buttons and review the DOM. \n3. Observe that the visual group label is not associated with the radio buttons.\n4. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that form fields are associated with their visual labels. This can be done with `<fieldset>` and `<legend>`. For example:\n\n```\n<fieldset>\n<legend>Cheque Outsourcing type</legend>\n  <input type=\"radio\"  id=\"cashier\" checked>\n  <label for=\"cashier\">In country cashier S order</label>\n    ...\n  <input type=\"radio\" id=\"company\">\n  <label for=\"company\">Company cheque</label>\n</fieldset>\n```\n\nIf this is not possible, you can use `aria-labelledby`. This can be used with custom radio buttons created with ARIA. For example:\n\n```\n<h2 id=\"radioGroupLabel\">Cheque outsourcing type</h2>\n<div role=\"radiogroup\" aria-labelledby=\"radioGroupLabel\">\n// custom radio buttons //\n</div>\n```\n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Grouping Controls](https://www.w3.org/WAI/tutorials/forms/grouping/) and [Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_9202-8",
    "Summary": "Add to cart message not programmatically identified",
    "Success Criteria": "Additional Issue",
    "Component": "Combobox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThere is a combobox that is missing some nice to have ARIA attributes. It does not have the following attributes:\n\n* `aria-autocomplete=\"list\"`\n* `aria-controls` that is associated with the combobox using an `id`.\n\nThis has been raised as an Additional Issue because the core required ARIA (e.g. `role=\"combobox\"`) has been used. \n\n## \n\nThis can be seen on page 2. On the cheque payment method and debit account combobox\n\n![Page 2: cheque payment combobox](image.png)\n![Markup of the combobox](image1.png)\n![Page 2: Debit account combobox](image2.png)\n![Markup of Debit account combobox](image3.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nOn the `<input>` add the `aria-autocomplete=\"list\"` attribute to indicate that the autocomplete behavior of the text input is to both show an inline completion string and suggest a list of possible values in the listbox popup. \n\nProgrammatically associate the listbox popup to the `<input>` using `aria-controls` attribute to indicate that it serves as the popup. \n\nAs well, refactor the `aria-label` on the selected option to not include the state, as this state is already programmatically marked up using `aria-selected`. \n\n```\n<label for=\"paymentMethod\">Cheque payment method</label>\n<input id=\"paymentMethod\" type=\"search\" role=\"combobox\" \n  aria-activedescendant=\"01\" aria-autocomplete=\"list\"\n  aria-expanded=\"true\" aria-controls=\"results\" aria-haspopup=\"listbox\">\n  Payment methods\n</input>\n<ul id=\"results\" role=\"listbox\" aria-label=\"Payment methods\">\n  <li id=\"01\" role=\"option\" aria-selected=\"true\" aria-posinset=\"1\" aria-setsize=\"2\">\n    Pay with an existing\n  </li>\n  <li id=\"01\" role=\"option\" aria-posinset=\"2\" aria-setsize=\"2\">\n    Pay with a new\n  </li>\n...\n</ul>\n```\n\nFor more information, see [WAI ARIA Practices - Editable Combobox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/combobox/combobox-autocomplete-both.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-419",
    "Summary": "Hong Kong - Statement Preference - Links do not visually or programmatically indicate that they open in a new window",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are selectable elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be found on the US - Existing M2NMD page. On the \"Start date\" date picker. \n\n![selected date visual affordance that is not programmatically marked up](image.png)\n![markup of the selected date](image1.png)\n\n## \n1. Note the components are visually highlight as selected.\n2. Inspect the element and review the DOM. \n3. Note that the selected state is not programmatically determined. \n4. Observe that the state is not available through text. \n\n## \n\nMake sure that the selected state is programmatically determined. Use `aria-selected` and update the `true` and `false` value appropriately. Make sure that the attribute is on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<table role=\"grid\" ...>\n  ...\n  <td tabindex=\"0\" aria-selected=\"true\">Monday 1st January\"</td>\n  <td tabindex=\"-1\">Tuesday 2nd January</td>\n  ...\n</table>\n</div>\n```\n\nMake sure that `aria-current` and `aria-selected` are not used interchangeably.\n\nFor example, `aria-current=\"date\"` should be used for dates that are highlighted without the user interacting with them, such as todays date. When the user actively selects an element, it should use `aria-selected=\"true\"`. The nuance is explained in [aria-current - examples and best practices](https://www.aditus.io/aria/aria-current/#date-picker-widget). \n\nFor more information, see [W3C - aria-selected](https://www.w3.org/TR/wai-aria-1.1/#aria-selected) and [WAI ARIA Practices - Tabbed Interface](https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-417",
    "Summary": "Hong Kong - Statement Preference - Block of text with inappropriate name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are elements that are visually highlighted as currently relevant and selected. They are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be found on the US - Existing M2NMD page. On the \"Start date\" date picker. \n\n![current date visual affordance that is not programmatically marked up](image.png)\n![markup of current date](image1.png)\n\n## \n1. Observe the elements visually highlighted are currently relevant.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the current date state is not programmatically determined. \n\n## \n\nMake sure that the current state is programmatically determined. Use `aria-current` or hidden text. The possible specfic values are `page`, `step`, `location`, `date`, `time`, and when there are not relevant `true` and `false` should be used. For example:\n\n```\n<table role=\"grid\" ...>\n  ...\n  <td aria-current=\"date\" ... >Monday 2nd January</td>\n  ...\n</table>\n</div>\n```\n\nMake sure that `aria-current` and `aria-selected` are not used interchangeably.\n\nFor example, `aria-current=\"date\"` should be used for dates that are highlighted without the user interacting with them, such as todays date. When the user actively selects an element, it should use `aria-selected=\"true\"`. The nuance is explained in [aria-current - examples and best practices](https://www.aditus.io/aria/aria-current/#date-picker-widget). \n\nFor more information, see [ADG - Marking elements as the current one](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-388",
    "Summary": "Hong Kong - Statement Preference - Table not marked up semantically",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. On the date picker, the selected and current visual affordance is not programmatically marked up.\n\n## \n\nThis can be seen on the US - M2MI page. On the date picker. \n\n![selected and current date indicated by colour](image1.png)\n![selected and current date state is not marked up](image2.png)\n\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that the selected and current date state is not marked up \n\n## \n\nUse `aria-selected=\"true\"` on the grid cell element that is currently selected. Remove the attribute when the option is no longer selected or set it to `false`. \n\nAs well, `aria-current` attribute should be used for dates that are highlighted without the user interacting with them. For example, if you highlight today's date, it should use `aria-current=\"date\"`.\n\nFor an example, see [WAI ARIA - Date picker example](https://w3c.github.io/aria-practices/examples/dialog-modal/datepicker-dialog.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-414",
    "Summary": "Hong Kong - Statement Preference - There are multiple parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element not nested correctly according to HTML specification. \n* Elements with duplicate `id`. \n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on the US - Existing M2NMD page. \n\n![parsing errors flagged by nu validator](image.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note the multiple different parsing errors.\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-14",
    "Summary": "Block quotes are not marked up",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nWhen a user begins to enter text into the search input, the results below get automatically filtered. However, screen reader users may be unaware that it is happening. This is especially important when the text yields no results as users may continue typing unnecessarily.\n\n## \n\nThis can be seen on pages 7 and 8, on the autocomplete results list.\n \n![Users not notified of search results](image.png)\n\n![Markup of the search input field and message](image1.png)\n\n## \n1. Navigate onto the above component using a screen reader.\n2. Type text into the input.\n3. Observe that the user is not notified of the change of content.\n\n## \n\nProvide an `aria-live` region notifying users of the number of results left. This should be a polite region unless there are no results, which in that case should be assertive. This could be implemented using 2 live regions. These regions do not need to be visible. For example:\n\n```\n<!-- When results are found -->\n<div class=\"sr-only\" role=\"status\">\n  3 results found\n</div>\n\n<!-- When no results remain -->\n<div class=\"sr-only\" role=\"status\">\n   No results found. Enter a name or account number to try again. \n</div>\n```\n\nFor more information, see [MDN - ARIA live regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).\n\nFor visually hiding elements, see [WAI Tutorials - Visually hidden class](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-8",
    "Summary": "Informative icon has inappropriate text alternative",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Tooltip",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe tooltip text is visually presented when users activate the button. However, the tooltip text is not automatically announced by the screen reader. Users have to press the keyboard arrow down key to read the text. \n\n## \n\nOn OLB_PAY_3.1.2 - COP check: No match. On the \"More information\" tooltip button.\n\n![Tooltip text not automatically announced](image.png)\n\n![Markup of tooltip button](image1.png)\n\n\n## \n1. Navigate onto the above elements with a screen reader.\n2. Note that tooltip text is not automatically announced. \n\n## \n\nProvide `role=\"status\"` to the tooltip text container so that it can be automatically announced by screen readers.\n\nFor more information, see [Inclusive Components - Tooltips and Toggletips](https://inclusive-components.design/tooltips-toggletips/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-35",
    "Summary": "Decorative icon not hidden from assistive technology",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere is an image that has an inappropriate text alternative. The alt text is delimited using hyphen which may cause unintended speech output for assistive technology users. \n\n## \n\nOn page 12 with the \"Take five, to stop fraud\" logo under the \"Could this be a scam?\" text. \n\n![Image which has inappropriate alt text](image.png)\n\n![Markup of the image's alt text](image1.png)\n\n## \n1. Inspect the non-text content.\n2. Confirm that it contains text which is separated using hyphens.\n\n## \n\nRemove the hyphens from the image's alternative text. \n\nFor example:\n\n```\n<img alt=\"take five to stop fraud\"...>\n```",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-5",
    "Summary": "Button element has no role",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nFor interactive elements, ensure that they are appropriately descriptive. A label such as \"Download\" would only signal what behaviour will be triggered when the button is activated. There could be ambiguity about what will be downloaded. \n\n## \n\n![Buttons which are not descriptive of their purpose](image.png)\n\n## \n1. Navigate through the above labels.\n2. Note they do not descriptively describe the topic or purpose.\n\n## \n\nUse descriptive labels to appropriately communicate the topic and purpose for interactive elements. A noun such as \"transaction receipt\" should be appended in the label to provide more context. \n\nFor example:\n\n```\n<button aria-label=\"Download transaction receipt\"/>\n```\n\nThe W3C provide further guidance on writing and providing effective headings and labels:\n\n* [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure).\n* [Providing descriptive labels](https://www.w3.org/TR/WCAG20-TECHS/G131.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-4",
    "Summary": "Focus is not set to the respective section on link activation",
    "Success Criteria": "Additional Issue",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe description list borders have low colour contrast. Users with low vision or cognitive impairments may find it difficult to perceive the faint lines. \n\nWhile this is not a WCAG failure, the lines help users understand the division of content so it might help some users if they contrast sufficiently.\n\n## \n\nOn page 1 (OLB_Pay_8.0.2) - On the Review your payment description list.\n\n![Borders with low colour contrast](image.png) \n\n## \n1. Navigate to the above list.\n2. Use a colour contrast analyser to inspect the contrast between the list borders against its background.\n3. Note that there is a very low contrast ratio.\n\n## \n\nDarken the borders to pass at least 3:1.\n\nThe colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-7",
    "Summary": "Text spacing causes content or functionality to be lost",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Tooltip",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nTooltip states such as expanded or collapsed are not declared with appropriate ARIA properties.\n\n## \n\nOn OLB_PAY_3.1.2 - COP check: No match. On the \"More information\" tooltip button. \n\n![Tooltip is expanded](image.png)\n\n![Tooltip button markup](image2.png)\n\n## \n1. Navigate onto the above elements with a screen reader.\n2. Note that their purpose and operation are not entirely communicated.\n\n## \n\nProvide an `aria-expanded` property to the tooltip button. The value of the property should be updated accordingly as the state of the tooltip changes. \n\nFor more information, see [Accessible Developer Guide - Tooltip widgets](https://www.accessibility-developer-guide.com/examples/widgets/tooltips/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6737-9",
    "Summary": "Text spacing causes content or functionality to overlap",
    "Success Criteria": "3.2.2: On Input [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInputs should not prompt behavior or changes that may not be obvious to all users. This can particularly disadvantage screen reader and keyboard users who use keystrokes to navigate, operate widgets, and control their assistive technology. Unexpected behaviour happening when inputting keystrokes may disorient or confuse users.  \n\nOnce all of the form fields are filled in, moving keyboard focus out of any form field results in the form being automatically submitted. \n\n## \n\nOn OLB_PAY_3.0.0 - Pay someone new - Personal.  On the form fields. \n\n![Form which submits when all entries are inputted](image.png)\n\n## \n1. Navigate onto the above components.\n2. Input as advised / required.\n3. Note the unexpected behavior. \n\n## \n\nInputs should not change pages unexpectedly. Ensure that operating everything is predictable. There are multiple ways to achieve this. For example, include instructions about any non-standard behavior.\n\nWhere relevant, enable users to confirm changes. For example, instead of submitting a form when entries are inputted, allow users to activate the \"Continue\" button.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6120-8",
    "Summary": "US - Feedback Modal - Description list not sematically declared",
    "Success Criteria": "3.1.2: Language of Parts [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSpecific sections on the site do not have appropriate language settings. Knowing the language of a page enables assistive technology to correctly pronounce content. It is used by screen readers, Braille displays and other text-to-speech programs. Such technology may mispronounce content. It can also affect other aspects such as spellcheckers in editable areas. The \"Design school\" text is not translated to French.\n\n## \n\nOn the personal information section on the right side of the page. \n\n![Lang](image.png)\n\n![Markup](image1.png)\n\n## \n1. Inspect these above elements.\n2. Note that they do not have an appropriate language settings.\n\n## \n\nSpecify a `lang` attribute for any text that is in a different language to the rest of the page. For example, `<div lang=\"fr\">` would be used for a container which has French text within it. For an exhaustive list of 2-letter language codes, refer to this [list of ISO 639-1 codes](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n\nThe W3C also provide guidance on [Authoring HTML: Language declarations](http://www.w3.org/TR/i18n-html-tech-lang/#overall) and [Choosing a Language Tag](http://www.w3.org/International/questions/qa-choosing-language-tags).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-88",
    "Summary": "US - Feedback Modal - Elements have invalid nesting",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that do not have an accessible role. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the role has not been programmatically determined may confuse or mislead users.\n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the role is not programmatically determined. \n\n## \n\nMake sure that interactive elements have an appropriate role. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` which have an accessible role by default.  To add roles onto custom components, use the `role` attribute with an appropriate value. For example:\n\n```\n<span tabindex=\"0\" role=\"button\">Submit</span>\n```\n\nFor a list of the ARIA roles available, see [ARIA Specification - Role Definitions](https://www.w3.org/TR/wai-aria-1.1/#role_definitions) and [MDN - Using ARIA Roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques). \n\nFor more information, see [WAI-ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/), [Inclusive Components](https://inclusive-components.design), [a11y Project](https://a11yproject.com/), and [Accessibility Developer Guide](https://www.accessibility-developer-guide.com/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-90",
    "Summary": "US - Feedback Modal page - Form fields and visual labels are not associated",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that have a role. However, they use the wrong role. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the role is not programmatically updated may confuse or mislead users.\n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the role is inappropriate.\n\n## \n\nMake sure that interactive elements have an appropriate role. Where possible, use native elements, such as `<button>`, `<input type=\"...\">`, `<a href=\"...\">`, and ` <select>` which have an accessible role by default. To add roles onto custom components, use the `role` attribute with an appropriate value. For example:\n\n```\n<span tabindex=\"0\" role=\"button\">Submit</span>\n```\n\nFor a list of the ARIA roles available, see [ARIA Specification - Role Definitions](https://www.w3.org/TR/wai-aria-1.1/#role_definitions) and [MDN - Using ARIA Roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques). \n\nFor more information, see [WAI-ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/), [Inclusive Components](https://inclusive-components.design), [a11y Project](https://a11yproject.com/), and [Accessibility Developer Guide](https://www.accessibility-developer-guide.com/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-91",
    "Summary": "US - Feedback Modal page - Informative image has inappropriate text alternative",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nDynamic updates need to be programmatically determined.\n\nThere are add to cart messages that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the updates are not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on...\n\n## \n1. Observe the add to cart updates that are visually communicated.\n2. Inspect the update and review the DOM. \n3. Note that the status message is not programmatically determined. \n4. Observe that focus or not moved and a new page is not loaded.\n5. Observe that the update will not otherwise be immediately obvious to all users.\n\n## \n\nMake sure that status messages are programmatically determined. To achieve this, use a polite live region. For example:\n\n```\n<span role=\"status\">Item added to basket</span>\n```\n\nAnother solution is to move focus or prompt a page load. In such cases, you do not need to programmatically determine the status message as the change of context, such as focus moving to the new content or a new page being loaded, provides an acceptable call-to-action. \n\nFor more information, see [MDN - Using the status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role) and [MDN - ARIA Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-85",
    "Summary": "US - Feedback Modal - Interactive elements with placeholder names",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are expandable elements that are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the expandable state is not programmatically determined may confuse or mislead users. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Observe the expandable interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the expandable state is not programmatically determined. \n5. Observe that the state is not available through text. \n\n## \n\nMake sure that the expandable state is programmatically determined. \n\nUse `aria-expanded` and update the `true` and `false` value appropriately. Make sure that the attribute is on the interactive elements themselves, rather than parent or child elements. For example:\n\n```\n<button aria-expanded=\"true\">This is expanded</button>\n<button aria-expanded=\"false\">This is collapsed</button>\n<span role=\"button\" aria-expanded=\"true\" tabindex=\"0\">This is expanded</span>\n<span role=\"button\" aria-expanded=\"false\" tabindex=\"0\">This is collapsed</button>\n```\n\nFor more information, see [WAI-ARIA Practices - Accordion](https://www.w3.org/TR/wai-aria-practices-1.2/#accordion), [WAI ARIA - Disclosure](https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure), and [ADG - Marking elements expandable](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/expanded/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-442",
    "Summary": "Address lines are not marked up as a list",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nLinks must be self-explanatory or be disambiguated by their surrounding context.\n\nThere are links that open in a new window. The links do not visually or programmatically indicate that they open in a new window. This may disadvantage several user groups. For example, it may be disorientating for those that find navigating the web cognitively challenging, as well as keyboard and screen reader users.\n\nThis is not a strict WCAG failure. However, HSBC DCE have identified that this issue fails the HSBC Accessibility Framework. \n\n## \n\nThis can be seen on the Hong Kong - Statement preference page. On the \"Public website\" link under the \"Important information\" section. \n\n![Public website link that does not visually or programmatically indicate that they open in a new window](image1.png)\n![Markup of the link](image2.png)\n\n## \n1. Observe that the links open in a new window.\n2. Inspect the links and review the DOM.\n3. Observe that the behaviour is not visually or programmatically indicated\n\n## \n\nMake sure that the links communicate that they open a new window. \n\nMake sure that this information is available to all users. It is not acceptable to have the link warn users through just hidden text. That is because hidden text is not immediately available to all users. Where possible, update the link text to communicate that they links open in a new window. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings (opens in a new window)</a>\n```\n\nWhen this is not possible, provide icons that communicate the same information. Make sure that it is alternative text. For example:\n\n```\n<a href=\"...\" target=\"_blank\">Read More about our quarterly earnings <img src=\"windowIcon\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [WCAG - G201 Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html), [NC State University - Links and new windows](https://accessibility.oit.ncsu.edu/it-accessibility-at-nc-state/developers/accessibility-handbook/mouse-and-keyboard-events/links/links-and-new-windows/), [Yale - Web Accessibility - Links](https://usability.yale.edu/web-accessibility/articles/links), [University of Washington - Using Meaningful Link Text](https://www.washington.edu/accessibility/links/), [A11y Project - Valid and Accessible Links](https://www.a11yproject.com/posts/2019-02-15-creating-valid-and-accessible-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-440",
    "Summary": "Date picker abbreviation not supported by VoiceOver",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programmatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere is a block of text that is made keyboard focusable using the `\"tabindex=\"0\"` attribute. Please see 3804 - 438. As a result of the block of text becoming focusable, the inappropriate accessible name is exposed to assistive technologies. \n\nThis may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the accessible name is inappropriate may confuse or mislead users.\n\n## \n\nThis can be found on Hong Kong - Statement preference page. On the \"Important information\" block of text. \n\n![Block of text that has an inappropriate accessible name](image.png)\n![Markup of text with bad accessible name](image1.png)\n![JAWS speech output](image2.png)\n\nThis can also be seen on the block of text under the \"Important information\" modal by activating the \"Important notice\" link for joint accounts. As well as the \"scenarios\" link under the \"Important information\" section. \n\n![Another example of text with inappropriate accessible name](image3.png)\n![Markup of text with inappropriate accessible name](image4.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nRemove the `aria-label` from the `<div>`.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-435",
    "Summary": "US - Existing M2NMD - Inappropriate page titles",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Table",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere is content that is visually communicated as being tabular data. However, this structure has not been programmatically determined.\n\n## \n\nThis can be seen on the Hong Kong - Statement Preference page. On the \"Accounts eligible for statements and/or advices\" table. \n\n![Table that is not marked up semantically](image.png)\n![Markup of table](image1.png)\n\n## \n1. Visually note the tabular data\n2. Inspect the elements in the DOM\n3. Observe that the tabular data has not been marked up, such as `table`, `tr`, `th`, and `td`.\n\n## \n\nMark up the tabular data using `<table>`, `<th>` and `<td>`. Make sure that set of tabular data is contained in a single `<table>`. Make sure that each row uses `<tr>` and that the table headers use `<th>` to be programmatically determined. Make sure that the standard data cells use `<td>`. For example:\n\n```\n<table>\n  <tr>\n    <th>Item</th>\n    <th>Quantity</th>\n  </tr>\n  <tr>\n    <td>Pears</td>\n    <td>3</td>\n  </tr>\n  ...\n</table>\n```\n\nEnsure that both row headers (Account details) and column headers (Accounts, Format) are marked up semantically. For example, use the `scope` attributre. See the [WAI Tutorials - table with two headers](https://www.w3.org/WAI/tutorials/tables/two-headers/)\n\nAs well, where possible, provide a `<caption>`. If you cannot add one visually, you can use CSS to visually name the `<caption>` but keep it available to assistive technologies. Using a `<caption>` is not a strict requirement but is strongly encouraged. \n\nFor more information, see [WAI Tutorials - Tables](https://www.w3.org/WAI/tutorials/tables/). When working with complicated tables, see [Two Header Tables](https://www.w3.org/WAI/tutorials/tables/two-headers/), [Irregular Header Tables](https://www.w3.org/WAI/tutorials/tables/irregular/), and [Multi-level Header Tables](https://www.w3.org/WAI/tutorials/tables/multi-level/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-434",
    "Summary": "US - M2MI - Radio buttons not associated with group label",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element missing start or end tag. \n* Element not nested correctly according to HTML specification. \n* Element with duplicate attributes.  \n* Elements with duplicate `id`. \n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on Hong Kong - Statement Preference. \n\n![6 parsing errors flagged by nu validator](image.png)\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note the multiple different parsing errors.\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-43",
    "Summary": "US - M2MI - Button does not have an accessible name",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere is plain text that is visually styled as a block quote, but it is not marked up as such.\n\n## \n\nThis can be seen on the \"What our members say\" section of page 3. There are three quotes by members.\n\n![Page 3: quotes by members](image.png)\n![Example markup of quote that is not marked up as block quote](image1.png)\n\n## \n1. Observe the visual block quote style \n2. Inspect the elements and review the DOM. \n3. Observe that they are not marked up as block quote\n\n## \n\nEnsure that content relationships expressed with visual cues are also programmatically determined. Use the `<q>` element for short or inline quotes and the `<blockquote>` element for longer and more complex quotes. For example:\n\n```\n<blockquote>\"I’ve learnt more about the industry through IET resources...”</blockquote>\n<cite>Michael Angibo BEng MSc MIET</cite>\n```\n\nFor more information, see: [Web Accessibility Tutorials - Blockquote](https://www.w3.org/WAI/tutorials/page-structure/content/#blockquote)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-40",
    "Summary": "Chart alternative text should be refactored",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images with inappropriate text alternatives. \n\nThe ticket icon is informative as it communicates meaningful information. \n\n## \n\nThis can be found on page 5. On the ticket image that has an `alt` value of \"Register\".\n \n![The decorative ticket image has an inappropriate alt attribute value](image.png)\n![Markup of decorative ticket image](image1.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that the images have inappropriate text alternatives.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Informative images that convey meaningful or unique information need a descriptive alt attribute. For example:\n\n```\n<img src=\"ticket.png\" alt=\"Ticket\">\n```\n\n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-27",
    "Summary": "Content is only shown once per journey",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are decorative icons that have not been hidden from assistive technology. \n\nThere are decorative icons that do not communicate any information that is not otherwise available on the page.\n\n## \n\nThis can be found on page 3. On the arrow icons next to links. \n\n![Decorative icons that are not hidden form assistive technologies](image4.png)\n![Markup of decorative icons](image5.png)\n\nThis can be found on page 4. On the arrow icons that are on each of the navigation links. \n\n![Decorative icon that is not hidden from assistive technologies](image.png)\n![Markup of icons with redundant text alternative](image1.png)\n\n## \n1. Observe the icons.\n2. Observe that they do not visually communicate any more information than is other available.\n3. Observe that they do not provide any further context or clarity than the information on the page. \n4. Inspect the icons.\n5. Confirm that they have not been hidden from assistive technology. \n\n## \n\nDecorative icons that do not convey meaning or unique information need to be hidden from assistive technologies. \n\nThe `aria-hidden` attribute can also be used with icon fonts. For example:\n\n```\n<span id=\"errorText\">\n<i class=\"fas fa-exclamation-triangle\" aria-hidden=\"true\"></i>\nError: The email address field cannot be left blank\n</span>\n```\n\nFor decorative images that are marked up with`<img>`, provide an empty `alt` attribute. For example:\n```\n<img src=\"spacer.png\" alt=\"\">\n```\nOn the first example that has the arrow icons which is defined by CSS style `::after`, the textual content should be removed so that the text is not repeated.\n\nFor example:\n```\n<div class=\"primary-btn-arrow-right\">\n::after\n</div>\n```\n\nFor more information, see [Web Accessibility Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/), and [MDN - using the aria-hidden attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-30",
    "Summary": "US Add Biller -  Billers heading not marked up semantically",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThe link referring to the current page is visually highlighted on the navigation links. They are not programmatically determined as such. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. \n\nThat the state is not programatically determined may confuse or mislead users. \n\n## \n\nThis can be found on pages 3 and 4 on the breadcrumb navigation. As well, on page 4, this can be seen on the link referring to the current page on the navigation menu. \n\n![Page 4: Initial Professional Development links](image.png)\n![Page 3: Breadcrumb that is not programmatically identified](image3.png)\n![Markup of the current page link in the navigation menu](image1.png)\n![Markup of the current page link on the breadcrumb](image2.png)\n\n## \n1. Observe the elements visually highlighted are currently relevant.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the current page state is not programmatically determined. \n\n## \n\nMake sure that the current state is programmatically determined. Use `aria-current` or hidden text. The possible specfic values are `page`, `step`, `location`, `date`, `time`, and when there are not relevant `true` and `false` should be used. In this case, `aria-current=\"page\"` can be used. For example:\n\n```\n<ul>\n  <li><a href=\"...\">Career & Learning</a></li>\n  <li><a href=\"...\" class=\"highlighted\" aria-current=\"page\">Inital Professional Development</a></li>\n  <li><a href=\"...\">Mentoring</a></li>\n  <li><a href=\"...\">Contuining Professional Development</a></li>\n</ul>\n```\n\nFor more information, see [ADG - Marking elements as the current one](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-26",
    "Summary": "US - M2MI - There are parsing errors",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button, Accordion or Disclosure",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are buttons elements that do not have an appropriate accessible role. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users. That the role has not been programatically determined may confuse or mislead users.\n\n## \n\nThis can be found on the \"Add to calendar\" button on page 5. \n\n![button with no role](image.png)\n![markup of button](image1.png)\n\nThis can also be seen on the footer accordions (e.g. \"About the IET\") when the page is in mobile responsive view.\n\n![All pages: Accordions when website is in mobile responsive view](image3.png)\n\n![All pages: DOM of accordions with missing role](image2.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the button role is not programmatically determined. \n\n## \n\nMake sure that interactive elements have an appropriate role. Where possible, use native elements, such as `<button>` or `<a href=\"...\">` as they have an accessible role by default.  \n\n```\n<button>Add to calendar</button>\n```\nTo add roles onto custom components, use the `role` attribute with an appropriate value. For example:\n```\n<span tabindex=\"0\" role=\"button\">Add to calendar</span>\n```\nNote that for custom components it is necessary to ensure that they respond to the appropriate keyboard and mouse input.  For example, make sure that it can be tabbed onto and activated with Return or Space. Also ensure that it responds to a mouse click.\n\nFor a list of the ARIA roles available, see [ARIA Specification - Role Definitions](https://www.w3.org/TR/wai-aria-1.1/#role_definitions) and [MDN - Using ARIA Roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques). \n\nFor more information, see [WAI-ARIA Practices](https://www.w3.org/TR/wai-aria-practices-1.2/), [Inclusive Components](https://inclusive-components.design), [a11y Project](https://a11yproject.com/), and [Accessibility Developer Guide](https://www.accessibility-developer-guide.com/). As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8949-32",
    "Summary": "Us Add Biller (6F) - Loading message instance not announced on VO",
    "Success Criteria": "2.4.1: Bypass Blocks [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "The Institution of Engineering and Technology (IET)",
    "Description": "## \n\nThere are non-functional bypass blocks that do not correctly set keyboard focus to the target region. \n\nThis may particularly disadvantage sighted keyboard users. The lack of a mechanism to bypass the blocks of content may make navigating the pages much more time consuming. \n\n## \n\n\nThis can be seen when activating the \"The event\", \"Speakers\", \"Location\" and \"Register\" links at the top of the page on page 5.  These are same-page links. However, the focus remains on this link instead of moving to the respective sections on the page. \n\n![Links that do not set keyboard focus](image.png)\n\n## \n1. Observe the repeated block of content.\n2. Observe that there is not a mechanism to bypass the block of content.\n\n## \n\nMake sure the focus moves to the respective event section when the \"The event\", \"Speakers\", \"Location\" and \"Register\" links are triggered. You could set the focus to the heading of each of the sections. \n\nThis can be achieved with the same page link `href=\"#id\"` or with the JavaScript `focus` method. When using the `focus` method, you will need to use `tabindex=\"-1\"` on the element if it is not natively in the focus order, such as setting focus onto a heading. For example:\n\n```\n<nav aria-label=\"Event details\">\n   <ul>\n      <li>\n         <a href=\"#theEvent\">The Event</a>\n      </li>\n      <li>\n         <a href=\"#speakers\">Speakers</a>\n      </li>\n      ...\n   </ul>\n</nav>\n<h2 id=\"theEvent\" tabindex=\"-1\">The Event</h2>\n<h2 id=\"speakers\" tabindex=\"-2\">Speakers</h2>\n...\n```\n\nFor more information, see [MDN - focus method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus), and [Google Developer - Using Tabindex](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex).\n\nFor more information on skip links, see [a11y Project - Skip Links](https://www.a11yproject.com/posts/2013-05-11-skip-nav-links/#toc_Example), [WCAG - G1 Adding a link at the top of each page](https://www.w3.org/WAI/WCAG21/Techniques/general/G1) and [Axess Labs - Your Skip Links are Broken](https://axesslab.com/skip-links/).\n\nIf the above is not possible, providing headings or regions that can be used to bypass the blocks when using assistive technology, such as screen readers. For more information, see [WCAG - ARIA11 Using ARIA landmarks to identify regions of a page](https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA11) and [H69 Providing heading elements at the beginning of each section of content](https://www.w3.org/WAI/WCAG21/Techniques/html/H69).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-101",
    "Summary": "US Add Biller (6F) - Parsing errors",
    "Success Criteria": "1.4.12: Text Spacing [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Cognitive",
    "Customer": "Internal",
    "Description": "## \n\nUsers must be able to adjust certain text properties. This is particularly important for users with dyslexia as it can allow them to make text more readable. No loss of content or functionality should occur when the following style properties are adjusted.\n\n* Line height (line spacing) to at least 1.5 times the font size.\n* Spacing following paragraphs to at least 2 times the font size.\n* Letter spacing (tracking) to at least 0.12 times the font size.\n* Word spacing to at least 0.16 times the font size.\n\nThese style properties not supported at all across the website.\n\n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Navigate on the content.\n2. Adjust the style properties with an extension, bookmarklet, or custom stylesheet.\n3. Note that the style properties are not supported.\n\n## \n\nMake sure that the style properties are supported. Example techniques are provided by [WCAG Techniques - Allow for text spacing without wrapping](https://www.w3.org/WAI/WCAG21/Techniques/css/C35), [Allow for text spacing override](https://www.w3.org/WAI/WCAG21/Techniques/css/C36), and [Orange Developer Guidelines - Allow Text Spacing](https://a11y-guidelines.orange.com/en/web/develop/layout/#allow-text-spacing). \n\nTesting can be done with a bookmarklet, such as [CodePen - Text Spacing Bookmarklet](https://codepen.io/stevef/pen/YLMqbo/) or setting the following CSS rules.\n\n```\n* {\n  line-height: 1.5!important;\n  letter-spacing:.12em!important;\n  word-spacing: .16em !important;\n}\n\np {\n  margin-bottom: 2em!important;\n}\n```\n\nAs well, use modern, flexible layouts techniques. For more information, see [CSS Tricks - Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), [MDN - Basic Concepts of Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox), and [CUBE CSS](https://cube.fyi).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-102",
    "Summary": "US Add Biller - Unsuitable markup for navigation menu",
    "Success Criteria": "1.4.12: Text Spacing [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Cognitive",
    "Customer": "Internal",
    "Description": "## \n\nUsers must be able to adjust certain text properties. This is particularly important for users with dyslexia as it can allow them to make text more readable. No loss of content or functionality should occur when the following style properties are adjusted.\n\n* Line height (line spacing) to at least 1.5 times the font size.\n* Spacing following paragraphs to at least 2 times the font size.\n* Letter spacing (tracking) to at least 0.12 times the font size.\n* Word spacing to at least 0.16 times the font size.\n\nAdjusting these properties causes content or functionality to be lost. \n\n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Navigate on the content.\n2. Adjust the style properties with an extension, bookmarklet, or custom stylesheet.\n3. Note that the content or functionality is lost.\n\n## \n\nMake sure that the style properties are supported. Example techniques are provided by [WCAG Techniques - Allow for text spacing without wrapping](https://www.w3.org/WAI/WCAG21/Techniques/css/C35), [Allow for text spacing override](https://www.w3.org/WAI/WCAG21/Techniques/css/C36), and [Orange Developer Guidelines - Allow Text Spacing](https://a11y-guidelines.orange.com/en/web/develop/layout/#allow-text-spacing). \n\nTesting can be done with a bookmarklet, such as [CodePen - Text Spacing Bookmarklet](https://codepen.io/stevef/pen/YLMqbo/) or setting the following CSS rules.\n\n```\n* {\n  line-height: 1.5!important;\n  letter-spacing:.12em!important;\n  word-spacing: .16em !important;\n}\n\np {\n  margin-bottom: 2em!important;\n}\n```\n\nAs well, use modern, flexible layouts techniques. For more information, see [CSS Tricks - Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), [MDN - Basic Concepts of Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox), and [CUBE CSS](https://cube.fyi).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-103",
    "Summary": "US Add Biller - Parsing errors",
    "Success Criteria": "1.4.12: Text Spacing [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Cognitive",
    "Customer": "Internal",
    "Description": "## \n\nUsers must be able to adjust certain text properties. This is particularly important for users with dyslexia as it can allow them to make text more readable. No loss of content or functionality should occur when the following style properties are adjusted.\n\n* Line height (line spacing) to at least 1.5 times the font size.\n* Spacing following paragraphs to at least 2 times the font size.\n* Letter spacing (tracking) to at least 0.12 times the font size.\n* Word spacing to at least 0.16 times the font size.\n\nAdjusting these properties causes content or functionality to overlap. \n\n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Navigate on the content.\n2. Adjust the style properties with an extension, bookmarklet, or custom stylesheet.\n3. Note that the content or functionality overlaps.\n\n## \n\nMake sure that the style properties are supported. Example techniques are provided by [WCAG Techniques - Allow for text spacing without wrapping](https://www.w3.org/WAI/WCAG21/Techniques/css/C35), [Allow for text spacing override](https://www.w3.org/WAI/WCAG21/Techniques/css/C36), and [Orange Developer Guidelines - Allow Text Spacing](https://a11y-guidelines.orange.com/en/web/develop/layout/#allow-text-spacing). \n\nTesting can be done with a bookmarklet, such as [CodePen - Text Spacing Bookmarklet](https://codepen.io/stevef/pen/YLMqbo/) or setting the following CSS rules.\n\n```\n* {\n  line-height: 1.5!important;\n  letter-spacing:.12em!important;\n  word-spacing: .16em !important;\n}\n\np {\n  margin-bottom: 2em!important;\n}\n```\n\nAs well, use modern, flexible layouts techniques. For more information, see [CSS Tricks - Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/), [MDN - Basic Concepts of Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox), and [CUBE CSS](https://cube.fyi).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-422",
    "Summary": "Delete button has inappropiate label",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determined. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThat are elements that are visually communicated as being key and value pairs. However, this structure has not been programmatically determined.\n\n## \n\nThis can be seen on the US - Feedback Modal page. On the review section of the dropdown after feedback is completed. \n\n![Employment type and role description list not marked up programmatically](image.png)\n![Markup of description list](image1.png)\n\n## \n1. Observe description list items.\n2. Inspect the elements in the DOM.\n3. Observe that the list items have not been marked up, such as `dl`, `dt`, and `dd`.\n\n## \n\nMark up the description list using `<dl>`, `<dt>`, and `<dd>`. Make sure that each set of list items is contained in a single `<dl>`, contain each individual term within `<dt>` tags and each descriptions within `<dd>` tags. Only use separate `<dd>` tags when the list items are contained logically and visually in separate, distinct lists. For example:\n\nMark up the list using description list semantics to communicate the relationship between terms and their descriptions. For example:\n\n```\n<dl>\n  <dt>\n    Employment type\n  </dt>\n  <dd>\n    Full time\n  </dd>\n  <dt>\n    Role type\n  </dt>\n  <dd>\n    Manager\n  </dd>\n</dl>\n```\n\nFor more details, see [WAI Tutorials - Description Lists](https://www.w3.org/WAI/tutorials/page-structure/content/#description-lists).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-420",
    "Summary": "Buttons marked up in different lists",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors.  More specifically, there are elements with invalid nesting. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\nThis has been raised as an Additional Issue as HSBC DCE require that parsing issues be raised as such.\n\n## \n\nThis can be found on the US - Feedback Modal page. \n\n![invalid nesting parsing errors flagged by nu validator](image.png)\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include elements with duplicate attributes.\n\n## \n\nMake sure that the nesting of elements is allowed by the HTML specification. For example:\n\n```\n// you cannot nest interactive items within each other\n// in this example, the issue is created by the link within the button\n\n<button><a href=\"...\">Submit</a></button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-421",
    "Summary": "US Add Biller (6F) - List not marked up semantically",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determined. This enables assistive technology to communicate the relationship to users. Content may otherwise seem unstructured or disorganised.\n\nThere are form fields that are not associated with their visual labels. The purpose of the form fields may be unclear to users. \n\n## \n\nThis can be seen on the US - Feedback Modal page. On the employment status and role dropdowns. \n\n![dropdowns that are not associated with visual labels](image1.png)\n![markup of dropdowns](image.png)\n\n## \n1. Observe the visual labels for the form fields. \n2. Inspect the form fields and review the DOM. \n3. Observe that the visual labels are not associated with the form fields.\n4. Observe that there is not an alternative labelling method that serves the same purpose.  \n\n## \n\nAny relationship presented through visual cues must also use the appropriate semantics. Make sure that form fields are associated with their visual labels. This can be done with `label` or `aria-labelledby`. \n\nUsing a `<label>`, make sure that the `for` and `id` match correctly. For example: \n\n```\n<label for=\"employment-status\">Please select an option that describes your current employment status</label>\n<select id=\"employment-status\"...>\n```\nOtherwise using `aria-labelledby`:\n```\n<p id=\"employment-status-label\">Please select an option that describes your current employment status</p>\n<select aria-labelledby=\"employment-status-label\">\n```\nIf the above is not possible, you can add the visual label information to an `aria-label`. This has the same effect of adding to the accessible name of the form field. This solution is less elegant, but it is particularly useful when there is no visible text. For example: \n\n```\n<button class=\"magnifyingGlass\" aria-label=\"search\"></button>\n``` \n\nAvoid using multiple labelling techniques on the same form field. For example, using `<label>` and `aria-label` together will cause the `aria-label` to overwrite the `<label>`. As well, using `aria-labelledby` will overwrite any other labelling techniques. \n\nFor more information, see [WAI Tutorials - Labeling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-426",
    "Summary": "US Add Biller - Non-interactive element incorrectly announced as interactive",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images with inappropriate text alternatives. \n\nWe have classed the icon as informative as it communicates meaningful information.\n\n## \n\nThis can be found on the US - Feedback Modal page. On the important notice logo. \n\n![Icon with inappropriate alt text](image.png)\n![Markup of icon](image1.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that the images have inappropriate text alternatives.\n\n## \n\nImages marked up with an `<img>` tag must have an alt attribute. Use the attribute to provide an appropriate text alternative. Informative images that convey meaningful or unique information need a descriptive alt attribute. For example:\n\n```\n<img src=\"\" alt=\"Important notice\">\n```\n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-424",
    "Summary": "Placeholder text lacks colour contrast",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive elements need a programatically determined name, role, and value. These properties must also be accurate and appropriate. \n\nThere are interactive elements that have inappropriate accessible names. Additional hidden text has been included for assistive technologies that is clearly placeholder. This may particularly disadvantage users that interface with the accessibility properties of elements, such as screen reader and voice recognition users since it introduces additional unnecessary clutter.\n\n## \n\nThis can be found on the US - Feedback Modal page. These buttons have hidden \"screen reader text\" as part of the accessible name.\n* On the close button at the top of the page. \n* On the confirm button\n* On the edit button after feedback is made\n\n![Close button with inappropriate name](image1.png)\n![Close button with aria-label of \"close icon alt text\"](image.png)\n![Confirm button with label \"screen reader text\"](image2.png)\n\n![Edit button with inappropriate name](image3.png)\n![Edit button with label \"screen reader text\"](image4.png)\n\n## \n1. Observe the interactive elements.\n2. Inspect the elements and review the DOM. \n3. Review the computed accessibility properties.\n4. Observe that the name is programmatically determined. \n5. Observe that the name is inappropriate. \n\n## \n\nRemove the hidden text from the DOM. Make sure that interactive elements have an appropriate name that describe its purpose. This should either be provided by the button text or by the accessible name for the image. For example:\n\n```\n<button>Confirm</button>\n```\nor\n```\n<button class=\"closeIcon\" aria-label=\"Close\"></button>\n```\n\nUse these techniques to provide appropriate accessible names. Accessible names should succinctly describe purpose and functionality. \n\nFor more information, see [WAI Tutorials - Labeling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).As well, for guidance on reviewing accessibility properties, see [Chrome - Accessibility properties](https://developer.chrome.com/docs/devtools/accessibility/reference/#computed), [Edge - Accessibility Pane](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/accessibility/reference#the-accessibility-panel), and [Firefox - Accessibility Inspector](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7787-30",
    "Summary": "Images defined using background-image is ommited in Windows High Contrast",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. The address lines are not marked up as a list. \n\n## \n\nThis can be seen on the address lines on page 1 and page 3 at the top of the page. \n\n![address on page 1](image1.png)\n![address on page 3](image3.png)\n![markup of address](image2.png)\n \n## \n1. navigate to the adresses\n2. inspect them \n3. note that they are not marked up as a list \n\n## \n\nAny relationship presented through visual cues must use the appropriate semantics. Use unordered lists for the address. For example:\n\n```\n<ul>\n   <li>2 Southmoor Road</li>\n   <li>Workshop</li>\n   <li>S80 2UR</li>\n    ...\n</ul>\n``` \n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7787-24",
    "Summary": "Informative image marked up using CSS",
    "Success Criteria": "Additional Issue",
    "Component": "Date Picker",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nThe days on the date picker are marked up using `<abbr>`. These are not well supported by screen readers on mobile. As a result, days are announced as \"So, Mo, Tu...\", and so on, instead of the full word. \n\nThis has been raised as an Additional Issue because technically the right semantics have been used. The issue is that certain screen readers do not support them.\n\n## \n\nOn pages 1 and 2, it can be seen with the days on the week in the date picker.\n\n![abbreviation announced](image.png)\n\n![markup of abbreviation](image1.png)\n\n## \n1. navigate to mentioned element with VoiceOver on\n2. observe that the full word is not announced \n\n## \n\nEnsure that the full word is announced. This can be done by providing a visually hidden text instead of a `title` or `aria-label` on the abbreviation. For example:\n\n```\n<abbr title=\"Sunday\"><span aria-hidden=\"true\">Su</span><span class=\"hiddenText\">Sunday</span></abbr>\n```\n\nFor more information, see [Open Inclusion - abbreviations for screen reader users](https://openinclusion.com/blog/presenting-abbreviations-acronyms-for-screen-reader-users/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-415",
    "Summary": "Custom focus indication fails contrast",
    "Success Criteria": "2.4.2: Page Titled [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWebpages must have accurate and descriptive page titles.\n\nThere are inappropriate page titles. They do not describe the topic or purpose of the page. Page titles orientate users, communicating the nature of the page. They are also used by assistive technology, such as screen readers that announce them on page load. Due to the inappropriate page titles, users may struggle to orientate themselves.\n\n## \n\nThis can be seen on the US - Existing M2NMD page. The page title is set to \"M2NMD Domestic Non-HSBC\".\n\n![inappropiate page title markup](image.png)\n\n## \n1. Observe the topic and purpose of the page.\n2. View the source of the page.\n3. Observe `<title>` element contains information that does not describe the topic or purpose of the page \n\n## \n\nMake sure that webpages have accurate and describe page titles. It is not required that every page title be unique or exhaustively descriptive. However, the page titles must accurately describe the topic or purpose of the page. \n\nWhere possible, use a consistent format, such as page name, page category, site name. For example:\n\n```\n<head>\n  <title>Pay or Transfer | HSBC</title>\n</head>\n```\n\nWhatever format you use, use it consistently throughout. With single page applications, if you meaningfully change the topic and purpose of the page, the page title needs to be dynamically updated, as well. This can be done with JavaScript using the `document.title` property.\n\nFor more information, see [Indiana University - Page Titles](https://accessibility.iu.edu/creating-content/web-content/titles.html), [Washington University - Informative Page Title](https://www.washington.edu/accessibility/page-or-document-titles/), and [MDN - Document Title element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-387",
    "Summary": "Graphical non-text content fails contrast",
    "Success Criteria": "Additional Issue",
    "Component": "Radio Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are radio buttons that are not programmatically associated to their group label. The `fieldset` element has been used, but the `<legend>` element has not been implemented. That said, this has been raised as an Additional Issue due to the `title` and `aria-label` attributes used.\n\nThe individual radio buttons have a label that communicates additional information, such as \"No, set up a stand alone payment or transfer\", in addition to the visual text. While this is helpful, it is best practice to associate radio group with a legend. \n\n##  \n\nThis can be seen with the \"Recurring\" radio buttons on the \"US - M2MI - Transfer between your international accounts\" page.\n \n![Transfer between your international accounts - \"Recurring\" radio buttons](image1.png)\n \n![Transfer between your international accounts - \"Recurring\" radio buttons in DOM without <legend> for group labelling](image.png)\n\n## \n1. Navigate through the above example with a screen reader.\n2. Note the group label is not communicated.\n\n## \n\nAny relationship presented through visual cues must use the appropriate semantics. Include a `<legend>` element and nested directly after the `<fieldset>` element.\n\n```\n<fieldset ...>\n   <legend>Recurring</legend>\n   ...\n</fieldset>\n```\n\nFor more information, see [WAI Tutorials - Grouping Radio buttons](https://www.w3.org/WAI/tutorials/forms/grouping/#radio-buttons).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-389",
    "Summary": "Interactive element fails contrast when receiving mouse hover",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. On mobile, the button above the \"Transfer between your international accounts\" heading does not have a descriptive accessible name. It may be a placeholder. \n\n## \n\nThis can be seen on the US - M2MI page. On the expand button next to \"PAY AND TRANSFER\".\n\n![navigation links button](image.png)\n![markup of the button](image1.png)\n\n## \n1. navigate onto the above elements and inspect it \n2. note that the aria-label text may be a placeholder \n\n## \n\nProvide an accessible name for the button that describes the purpose of the button. \n\nIn this instance, you can use `aria-labelledby` and derive the label from the \"PAY AND TRANSFER\" heading next to the button. For example:\n \n```\n<div id=\"link-text\">PAY AND TRANSFER</div>\n...\n<button aria-labelledby=\"link-text\"...>\n```\n \nAnother option would be to combine these elements into one object. For example:\n\n```\n<button aria-expanded=\"false\" ... >PAY AND TRANSFER</button>\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6021-63",
    "Summary": "Interactive element fails contrast when receiving keyboard focus",
    "Success Criteria": "Additional Issue",
    "Component": "Graph or Chart",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere is repeated alternative text. These are visually hidden and are hidden from assistive technologies using the `display:none` CSS style. There are some reports that very old version of screen readers omit the `display:none` rule.\n\nAs well, there is an `alt` attribute that is not exposed to assistive technologies but does not describe non-text content. While materially the functionality may not change, it is good to follow best practices.\n\nThis has been raised as an Additional Issue because there is an alternative way to access the information on the \"table\" tab. \n\n## \n\nThis can be found on page 2. On the pie chart. The canvas has an `aria-label` which contains information about every data point. The same is then internally within the canvas multiple times. There is also a redundant `alt` attribute.\n\n![Page 2: Pie chart](image1.png)\n![Page 2: Markup of duplicate aria-label and unnecessary alt attribute](image.png)\n\n## \n1. Navigate to the graph \n2. Inspect the code \n3. Observe that there are multiple `aria-label` attributes with duplicate text\n\n## \n\nWe recommend refactoring the code to remove duplicate `aria-label` attributes and removing the redundant `alt` attribute. Instead, provide the data points individually for each part of the pie chart. \n\nThis can be done by using `role=\"img\"` to identify individual segments as images and an `aria-label` to provide a name. For example:\n\n```\n<path ... role=\"img\" aria-label=\"Housing, 40%, HKD 500\" > ... </path>\n<path ... role=\"img\" aria-label=\"Domestic helper, 30%, HKD 400\"> ... </path>\n```\n\nFor an example, see [Highcharts - Accessible Pie Charts](https://www.highcharts.com/demo/accessible-pie).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6021-72",
    "Summary": "Elements have duplicate attributes",
    "Success Criteria": "Additional Issue",
    "Component": "Modal Dialog",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nOn mobile, the modal dialog which contains the chart on expected retirement spending is only shown once per user journey. Pressing back on page 6 and then next to go back to page 6 does not show the modal dialog again. \n\nThis has been raised as an Additional Issue as it affects all users. You have to refresh the page and restart to journey to view the page again. \n\n## \n\nThis can be found by navigating to page 6 on mobile. \n\n![Page 6 on iOS](image.png)\n\n## \n1. navigate to page 6 using iOS or Android \n2. observe that a modal dialog containing page 6 appears\n3. press the back button, then next to proceed back to page 6 \n4. note that the modal dialog does not display again and requires you to reload the page to view it again \n\n## \n\nMake sure that users are able to access the modal dialog containing page 6 if they return to a previous step in the user journey.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-131",
    "Summary": "Elements have missing start or end tags",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers, to communicate the relationships to users. There are visual headings that categorise content that does not use heading semantics. \n\n## \n\nOn US - Add biller, the Settings heading appears above the \"YOUR BILLERS\" tab.  It appears to be styled the same way as \"NEW PAYEE\" heading, which is marked up as a semantic heading.\n\n![billers heading](image.png)\n![heading markup](image1.png)\n\n## \n1. inspect the 'Your billers' heading\n2. note that it does not use heading semantics \n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. In this case, use heading semantics. For example, `<h2>YOUR BILLERS</h2>`. For more information see [Web Accessibility Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-390",
    "Summary": "VN - MFD - Decorative images are not hidden from assistive technologies",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element not nested correctly according to HTML specification.\n* Elements with duplicate id.\n* Unclosed elements\n\n## \n\nThis can be seen on the US - M2MI page. \n\n![12 errors flagged by nu valdiator](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-135",
    "Summary": "VN - MFD - There are parsing errors",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nAs you progress through the Add Biller user journey and go to the next page, a loading screen appears. On the Validate payee address instance, the screen reader does not read out the message as it does with other loading messages on other pages.\n\nThis visual cue should be conveyed to screen reader users. Otherwise, they may exit the page as only the close button receives focus and is announced. \n\n## \n\nThis is on US - Add Biller (Six Factor).\n\nOn the loading screen between the 'Validate payee address' and confirmation page. \n\n![Loading message does not announce](image.png)\n\n## \n1. navigate to mentioned loading screen\n2. observe that loading message is not announced on that page\n\n## \n\nEnsure that the loading message is conveyed by VoiceOver, as with the other loading messages. \n\nAn investigation is required on why this instance of the loading message is not announced. You can look at the implementation details of other working loading screens to ensure consistency. Note that the focus stays on the close button on this instance, but it is on the loading message on other instances.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-134",
    "Summary": "Iframes scrolling should not be disabled",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support. \n\n\n## \n\nThis is on US - Add Biller (Six Factor).\n\nParsing errors were found on the Add Biller flow. The same errors were flagged for the entire journey. \n\n![add a new biller](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [W3 - Markup Validation Service](http://validator.w3.org).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-128",
    "Summary": "iframe has missing title",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe sidebar has been marked up using role=\"menu\" with the elements within having role=\"menuitem\". This is not appropriate for this control. It is meant for application menus similar to system applications.\n\nAn example use case is Google Docs - which has a typical File, Edit, View application menu. This mark-up is not meant for a fly-out navigation, tabpanel, or sidebar. This is not best practice. \n\nHowever, there were no particular blockers when using a screen reader on the menu. As a result, this has been raised as an Additional Issue.\n\n## \n\nThis is on US - Add Biller.\n\n![sidebar](image1.png)\n![sidebar markup](image.png)\n\n## \n1. inspect the sidebar\n2. note the use of menu mark-up\n\n## \n\nRemove the role=\"menu\" and role=\"menuitem\" mark-up. For further explanation see [Dont use ARIA menu roles for site nav](https://adrianroselli.com/2017/10/dont-use-aria-menu-roles-for-site-nav.html). Instead use standard nav regions, lists, and links. For example:\n\n```\n<nav aria-label=\"Sidebar Navigation\">\n<h2>YOUR BILLERS</h2>\n<ul>\n  <li><a href=\"...\" aria-current=\"page\">Your payees</a></li>\n  ...\n</ul>\n</nav>\n\n```",
    "Votes": 0
  },
  {
    "Issue Id": "3804-127",
    "Summary": "Functional svg buttons within iframe do not have labels",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support. \n\nThe same errors were found later in the journey in the review and confirmation page. No parsing errors were found on 'Add a new biller' page. \n\n## \n\nThis is on US - Add Biller.\n\nOn the Review payee details and Confirmation page, after a biller has been added. \n\n![Confirmation page parsing issues](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [W3 - Markup Validation Service](http://validator.w3.org).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-251",
    "Summary": "Visually hidden text on link incorrectly identifies link destination",
    "Success Criteria": "2.4.6: Headings and Labels [AA]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen labels are used on interactive elements, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged. \nThe delete button has an inappropriate label. \n\nThis has been raised as a low priority label as the inappropriate label comes after the correct label. The button is still basically understandable. However, this is then following by a lot of information that may seriously confuse users.\n\n## \n\nThis occurs on US - US Details - Secure message. \n\n![Delete button on overlay](image.png)\n\n![Markup of delete button](image1.png)\n\n## \n1. navigate to the mentioned element\n2. note that it has an inappropriate label\n\n## \n\nEnsure that the label describes the purpose of the button appropriately. In this case, you could remove the hidden text as \"delete\" is fine by itself. If you want to provide more information or context, make sure to provide something human-readable in the hidden text. \n\nFor more information, see [WAI - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-264",
    "Summary": "Informative icon is missing text alternative",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nHeadings are not marked up programmatically for functions within the Manage panel. \n\n## \n\nThis occurs on US - US Details - Link and Launch\n\n![Heading not marked up semantically](image.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the heading relationship is not communicated\n\n## \n\nEnsure that the heading text ( \"Move Money\", \"Statement\", \"Check\" ) are marked up with appropriate heading semantics. For example:\n\n```\n<h2>Move Money</h2>\n...\n```\n\nFor more information, see [WAI tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-252",
    "Summary": "Valid entries are marked up with aria-invalid",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe Download and Print button are marked up in two different `<ul>` elements. \n\n## \n\nUS - US Details - OFX/ QFX \n\n![Dowload and Upload button which is marked up as a list](image.png)\n\n![Markup showing buttons marked up as sole list item](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the button is marked up as sole list item.\n\n## \n\nEnsure that buttons are not marked up in two different `<ul>` elements.  The Download and Print buttons could be marked together within a list. Alternatively, the list markup could be removed as there will only be two items within it. For example: \n\n```\n<ul>\n    <li> <download-transaction-history...>...</download-transaction-history> </li>\n    <li> <print-account-summary...>...</print-account-summary> </li>\n</ul>\n```\n \nFor more information, see [WAI - Page Structure](https://www.w3.org/WAI/tutorials/page-structure/content/)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-133",
    "Summary": "Visual asterisk is not include in accessible name",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised. There are visual lists in generic div elements. \n\n## \n\nOn the US - Add Biller 6 factor flow, there are items visually marked up as a list. On the Review page, there are a list of items regarding biller details.\n  \n![visual list](image.png)\n![Table markup](image1.png)\n\n## \n1. navigate onto the review page\n2. note the visual list\n3. inspect the list and note that lack of semantic list mark-up\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. In this case, use an unordered list. For example,\n\n```\n<ul>\n...\n  <li>Company's name: Cox communications</li>\n...\n</ul>\n``` \n\nAnother option would be to use a description / definition list. For example \n\n```\n<dl>\n...\n    <dt>Company's name</dt>\n    <dd>Cox communications</dd>\n...\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-119",
    "Summary": "Pagination combobox is not associated with labels",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nOn Android with TalkBack, the progress bar is announced as interactive (“Double-tap to activate”) despite being non-interactive. This may confuse users with visual or cognitive impairments who may assume that the progress bar is interactive. This is a known issue with TalkBack.\n\n## \n\nThis is on the US - Add Biller page.\n\nIn the 'new biller' page, between the 'NEW PAYEE' title and 'Add a new biller' heading, the progress bar receives screen reader focus and is announced with 'Double-tap to activate'. However, nothing happens when you double tap on the element.\n \n![Progress bar announced as interactive](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the progress bar is announced as interactive \n\n## \n\nThis is caused by the use of `tabindex=\"-1\"` on the component. TalkBack assumes that the user of `tabindex` means that the element is interactive. \n\nThis is an issue as `tabindex=\"-1\"` is often used to programmatically set focus on elements. It has been fixed in the latest version of Chrome Canary (the dev branch of the browser), so a Chrome update will fix it sooner or later. In the meantime, if you can remove the `tabindex` setting, then do so.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-253",
    "Summary": "Accessible names have not been translated to Spanish",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nPlaceholder colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without an accurate perception of colour or low vision may struggle to perceive the placeholder text. \n\n## \n\nThis occurs on US - US Details - Check Images. \n\nOn the check number input field's placeholder under Transactions. \n\n![Input field's placeholder lacking colour contrast](image1.png)\n \n## \n1. navigate onto the pages affected\n2. with a colour contrast analysis tool, confirm that the placeholder colours that do not contrast sufficiently.\n\n## \n\nThis is a requirement as the placeholder contains critical information. You may wish to instead use darker text within the field and implement it as a floating label. For examples, see [CSS Tricks - Float Labels](https://css-tricks.com/float-labels-css/). \n\nEnsure that the colours on the website contrast sufficiently. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6021-47",
    "Summary": "Required field is not marked as required",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInformative images, such as the HSBC logo, and the expand chevron on the languages dropdown are marked up using the `background-image` property in CSS. \n\nThese images are omitted by the some browsers with Windows High Contrast mode enabled. As a result, many low vision users who rely on High Contrast Mode may miss out on this information. \n\n## \n\nThis can be seen on all pages. On the HSBC logo. In Edge, the \"HSBC\" text is omitted with High contrast mode enabled. This can also be seen on the chevron on the language selection dropdown. \n\nThis has been given a low priority as the background images are not ignored in Firefox. \n\n![Background images omitted in Edge](image.png)\n \n\n## \n1. navigate to the above page with Edge \n2. go to Windows Settings > Ease of Access > High Contrast. Enable Windows High Contrast mode. \n3. observe that the images defined with `background-image` are omitted \n\n## \n\nUse the native image element`<img>` to mark up images, while also ensuring that they have appropriate alternative text. \n\nFor more information on images refer [WAI Web Accessibility Tutorials - Images Concepts](https://www.w3.org/WAI/tutorials/images/).\n\nIf it is not possible to use native images, you can use the css content property with `::before` and `::after` to render the background image when Windows High Contrast mode is enabled. For further information on CSS content property images, see [CSS Tricks - CSS Content](https://css-tricks.com/css-content/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6021-45",
    "Summary": "Error messages are not associated with form fields",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content must have appropriate alternatives. This is required for the content to be understood by all users. Images, icons and so on may otherwise be miscommunicated by assistive technology. There are informative images with no `alt` attribute whatsoever. \n\nWe have classed the image as informative as they communicate unique or meaningful information.\n\n## \n\nThis can be seen on all pages with the HSBC logo at the top of the page. \n\n![hsbc logo marked up using css](image.png)\n![hsbc logo defined using background-image style](image1.png)\n\n## \n1. Inspect the informative images.\n2. Confirm that they are defined with CSS. \n3. Note that there is no text alternative \n\n## \n\nImages should be marked up with an `<img>` tag and must have an alt attribute. Use the attribute to provide an appropriate text alternative. Informative images that convey meaningful or unique information need a descriptive alt attribute. For example:\n\n```\n<img src=\"logo.png\" alt=\"HSBC logo\">\n```\n\nIf this is not possible, you can use ARIA to define an image with `role=\"img\"` and an `aria-label`. For example:\n\n```\n<div role=\"img\" aria-label=\"HSBC Logo\"> ... </div>\n```\n\nInline SVG images can use `<title>`, `<desc>`, and `aria-labelledby` for the same purpose. For example:\n\n```\n<svg aria-labelledby=\"uniqueTitleID uniqueDescID\">\n<title id=\"uniqueTitleID\">The title of the SVG</title>\n<desc id=\"uniqueDescID\">A longer, more complete description for complex graphics.</desc>\n...\n</svg>\n``` \n\nFor more information, see [Web Accessibility Tutorials - Informative Images](https://www.w3.org/WAI/tutorials/images/informative/), [Alt Attribute Decision Tree](https://www.w3.org/WAI/tutorials/images/decision-tree/), and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-97",
    "Summary": "Form field labels do not resize to browser text size",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nWhen components have custom focus indication, such as a custom `outline`, the indication must pass colour contrast requirements with adjacent colours. The required contrast ratio is 3:1, unless the element uses default browser CSS.\n\nThere is custom focus indication that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the focus indication that fails the colour contrast requirements. \n\n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Get the colour values of the focus indication and background colours.\n2. Insert these values into a colour contrast analyser.\n3. Observe that the analyser reports that the contrast ratio is not sufficient. \n\n## \n\nWhen using components use custom focus indication, make sure that the indication passes 3:1 colour contrast requirements.\n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative is to use native semantics and default browser stylings, which this success criterion considers to be out of scope. For examples, see [Native Form Elements](http://nativeformelements.com). \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-96",
    "Summary": "Listbox accessible name has misleading aria label",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nWhen non-text content communicates functional that is not available through text, the non-text content must pass colour contrast requirements with adjacent colours. For example, when using icon buttons that have no text, the icon used must pass the colour contrast requirements. \n\nThe required contrast ratio is 3:1. There is functional non-text content that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the component that fails the colour contrast requirements.\n\n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Get the colour values of the functional non-text content.\n2. Insert these values into a colour contrast analyser.\n3. Observe that the analyser reports that the contrast ratio is not sufficient. \n4. Observe that there is not an alternative way to access the same information.\n \n## \n\nWhen using functional non-text content, make sure that the colours pass 3:1 colour contrast requirements. \n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative would be providing a button with text on it, assuming that the colour of the text passed the colour contrast requirements. \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-100",
    "Summary": "Malta Open Demand Deposit - Links opening in new window is not communicated",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nWhen graphic content communicates information that is not available through text, the graphic content must pass colour contrast requirements with adjacent colours. For example, when graphs or charts communicate information, the content must pass the colour contrast requirements.\n\nThe required contrast ratio is 3:1. There is graphical non-text content that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the graphical content that fails the colour contrast requirements.\n\n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Observe the graphical non-text content. \n2. Insert these values into a colour contrast analyser.\n3. Observe that the analyser reports that the contrast ratio is not sufficient. \n4. Observe that there is not an alternative way to access the same information.\n\n## \n\nWhen using informative and graphical non-text content, make sure that the colours pass 3:1 colour contrast requirements. \n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative is to provide the same information in alternative format, such as a table. For examples, see [Highcharts - Line Chart Accessibility Demo](https://www.highcharts.com/samples/highcharts/accessibility/accessible-line) and [GOV - Magna Charta Example](http://alphagov.github.io/magna-charta/).\n\nThe colour contrast ratio between adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-99",
    "Summary": "Armenia Manage Alert - Text does not resize",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nWhen components have custom styling that causes them to change colour on mouse hover, the colours used must pass colour contrast requirements with adjacent colours. The required contrast ratio is 3:1, unless the element uses default browser CSS.\n\nThere are component with custom styling that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the component that fails the colour contrast requirements. \n \n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Mouse hover on the above component. \n2. Observe the custom styling that causes the component to change colour.\n3. Get the colour values of the component.\n4. Insert these values into a colour contrast analyser.\n5. Observe that the analyser reports that the contrast ratio is not sufficient. \n\n## \n\nWhen using components with custom hover effects, make sure that the style rules pass 3:1 colour contrast requirements.\n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative is to use native semantics and default browser stylings, which this success criterion considers to be out of scope. For examples, see [Native Form Elements](http://nativeformelements.com). \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-98",
    "Summary": "Heading is not marked up semantically",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "No component",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nWhen components have custom styling that causes them to change colour on focus, the colours used must pass colour contrast requirements with adjacent colours. The required contrast ratio is 3:1, unless the element uses default browser CSS.\n\nThere are component with custom styling that does not meet the contrast ratio. This may particularly disadvantage low vision and colour blind users who may be excluded by the low contrast. Users might struggle to perceive the component that fails the colour contrast requirements. \n \n## \n\nThis can be seen on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Keyboard tab onto the above component. \n2. Observe the custom styling that causes the component to change colour.\n3. Get the colour values of the component.\n4. Insert these values into a colour contrast analyser.\n5. Observe that the analyser reports that the contrast ratio is not sufficient. \n\n## \n\nWhen using components with custom focus effects, make sure that the style rules pass 3:1 colour contrast requirements.\n\nAdjust the text and background colours accordingly to meet the contrast ratio requirements. If you cannot adjust the colours, an alternative is to use native semantics and default browser stylings, which this success criterion considers to be out of scope. For examples, see [Native Form Elements](http://nativeformelements.com). \n\nThe colour contrast ratio between the adjacent colours can be tested with tools such as [TPG - Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Tanaguru - Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor more information, see [GOV - Colour Contrast Why Does It Matter?](https://accessibility.blog.gov.uk/2016/06/17/colour-contrast-why-does-it-matter/) and [WAI - Colours with Good Contrast](https://www.w3.org/WAI/perspective-videos/contrast/).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-77",
    "Summary": "India BBPS - Heading is not marked up semantically",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are parsing errors. More specifically, there are elements with the duplicate ids. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note that the errors include elements with duplicate ids.\n\n## \n\nMake sure that elements have a unique id. For example: \n\n```\n<button id=\"accountAddCurrent\">Add New Current Account</button>\n<button id=\"accountAddSavings\">Add New Savings Account</button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-78",
    "Summary": "Visual lists are not marked up semantically",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are parsing errors. More specifically, there are elements with the duplicate attributes. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note that the errors include elements with duplicate attributes\n\n## \n\nMake sure that elements do not have duplicate attributes. For example:\n\n```\n<button aria-expanded=\"true\" aria-expanded=\"false\">incorrectly has two aria-expanded attributes</button>\n<button aria-expanded=\"true\">correctly has one aria-expanded attribute</button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-79",
    "Summary": "Malta Open Demand Deposit - Visual list not marked up semantically",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are multiple parsing errors. Browsers are generally forgiving of these errors and warnings. However, assistive technologies more-so struggle to process semantics that deviates from the HTML specifications. Users may experience strange behaviour or diminished accessibility. The parsing errors include the following.\n\n* Element missing start or end tag. \n* Element not nested correctly according to HTML specification. \n* Element with duplicate attributes.  \n* Elements with duplicate `id`. \n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results\n4. Note the multiple different parsing errors.\n\n## \n\nMake sure that there are no parsing failures. This includes the following.\n\n* Make sure that elements have complete start `<>` and end `</>` tags. \n* Make sure that elements are nested according to their HTML specifications.\n* Make sure that elements do not have duplicate attributes. \n* Make sure that elements use unique `id` values.\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "YTB-75",
    "Summary": "Visual list not marked up semantically",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "",
    "Users Affected": "Vision",
    "Customer": "Internal",
    "Description": "## \n\nThere are parsing errors. More specifically, there are missing start or end tags. Browsers may struggle to compile the accessibility tree and assistive technologies may be unable to parse elements. Users may experience strange behaviour or diminished accessibility.\n\n## \n\nThis can be found on...\n\n@TODO: explain where issue can be found - include screenshot(s).\n\n## \n1. Take the base URL OR copy the generated page source.\n2. Use the [Nu Html Checker](https://validator.w3.org/nu/) to check for validation errors. \n3. Use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/) to filter the results.\n4. Note that the errors include missing start and end tags.\n\n## \n\nMake sure that elements have complete start and end tags. For example: \n\n```\n<h2>About Us</h2>\n<p>We were founded in 1820</p>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML), [W3 - Syntax Errors](https://www.w3.org/TR/html/introduction.html#syntax-errors), [Attribute Values](https://www.w3.org/TR/html/introduction.html#restrictions-on-content-models-and-on-attribute-values), and [About the HTML Checker](https://validator.w3.org/nu/about.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-339",
    "Summary": "Armenia Manage Alert - Settings heading not marked up semantically",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nDecorative icons are not hidden from assistive technology users. These icons receive focus and are announced as unpronounceable on iOS and Android. \n\n## \n\nThis can be found on the VN – MFD page, on the decorative icons. For example, this occurs on the table sort order chevron search field dropdown chevron. These should be hidden from assistive technologies as the same information is communicated by the sorted/ expanded state of the elements. \n\nFor example:\n\n![table sort order chevron and search field dropdown chevron not hidden from assistive technologies](image2.png)\n\n## \n1. inspect the decorative icon\n2. note that it is not hidden from assistive technologies\n\n## \n\nEnsure that decorative icons are marked up with the `aria-hidden` attribute to hide them from assistive technologies. For example:\n```\n<i class = \"\" aria-hidden=\"true\">\n```\n\nFor more information, see [MDN - aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-337",
    "Summary": "Armenia Manage Alert - Visual list not marked up semantically",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\n* Multiple elements are using the same `id`. For example, `account-nickname`. \n* There is invalid nesting of elements\n\n## \n\nThis can be found on the VN – MFD page.  \n \n![Parsing errors flagged by nu validator](image.png)\n \n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nEnsure that elements have a unique `id`. \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_578-48",
    "Summary": "VN - MFDP - there are parsing issues",
    "Success Criteria": "1.4.4: Resize text [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Arts Council England",
    "Description": "## \n\nSome users with low vision use browser features, such as texting resize or browser zooming, to enhance the readability of content. The functionality is not available throughout, however. The product may disadvantage the aforementioned users.\n\nScrolling for the `<iframe>` is disabled using `scrolling='no'`. You should not disable scrolling for iframes as many users enlarge fonts or other page elements to increase their text visibility and accessibility.  \n\n## \n\nThis can be seen on all `<iframe>` elements throughout the website. \n\n![Iframe has scrolling disabled](scroll.png)\n\n## \n1. Navigate onto the above pages.\n2. Modify the text size in the browser menus or preference E.g. (in IE, with View > Text Size).\n3. Note that this does not change the size of the text.\n\n## \n\nThe default scrolling value `auto` should be used whenever possible so that enlarged content is not clipped for older browsers. \n**N.B.**: The `<iframe>` scrolling attribute is not supported in HTML5. Use CSS instead.\n`\ndiv {\n    overflow:auto;\n}\n`",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_578-54",
    "Summary": "Visually hidden text is inappropriately marked up",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Arts Council England",
    "Description": "## \n\niframes on the site have missing `title` attributes. Screen readers can rely on frame titles for a description of the iframe's content, so screen reader users may be disadvantaged by the lack of titles. \n\n## \n\nSee example of an iframe on page 16\n![iframe example](example.png)\n![iframe has missing title](sound.png)\n\nYouTube iframe on page 7\n![iframe has missing title](image.png)\n![iframe has missing title](youtube.png)\n\nIssuu iframe on page 7 \n![iframe has missing title](image1.png)\n![iframe has missing title](issu.png)\n\nMap iframe on page 17\n![iframe has missing title](image2.png)\n![iframe has missing title](image3.png)\n\n## \n1. navigate through the above iframe using a screen reader\n2. observe that they do not describe the content of the iframe\n\nNote that some screen readers may predict the value of `title`, while others may not- so it is good to explicitly define it for higher screen reader support. \n\n## \n\nAdd a descriptive`title` to communicate the topic and purpose of each iframe to screen reader users.\n\nFor example:\n`<iframe title=\"Map of Arts Council offices\"...>`",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_578-56",
    "Summary": "Input field has verbose description",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Arts Council England",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nFunctional `svg` buttons within an iframe do not have labels, which may confuse screen reader users on the purpose of the elements. \n\n## \n\nThis can be seen on the issuu `iframe` on page 7 \n\n![Page 7 - buttons have no labels](image.png)\n\n**Example:** On the download button, as you can see, there are no labels marked up in the code.\n\n![Buttons have no labels](image1.png)\n\nThe 'Find' button opens this panel where more buttons are unlabelled. \n\n![Buttons have no labels](image2.png)\n\nThe 'Share' button opens this panel where more buttons are unlabelled. \n\n![Buttons have no labels](image3.png)\n\n## \n1. Navigate onto the above examples \n2. Note that they do not include labels and instructions for all users.\n\n## \n\nEnsure that the `svg` buttons are labelled. This can be done by nesting each `svg` in a `<button>` element which should also contain a `<span>` of text to label the button. The text should be styled as follows to hide it visually but ensure it is still available to screen readers: \n\n```.sr-only {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n```\n\nThe W3C provide further guidance. See: [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/) and [How to make svg button accessible](https://www.freecodecamp.org/news/how-to-make-your-fancy-svg-button-accessible-83c9172c3c15/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-17",
    "Summary": "Button communicates expanded state twice",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nThe edit permission links opens a new page. However, it is marked up to say that the link opens in a new modal popup.\n \n## \n\nThis can be seen on the \"Edit permission\" links that are under the \"included accounts\" header within the Maintain signature and authorisation limits table.\n\n![link destination is incorrectly identified](image.png)\n![edit permissions link markup](image1.png)\n\n## \n1. navigate onto the edit permission link and inspect it \n2. observe that it says that the link will open in a modal popup\n3. activate the link and observe that it opens a new page, and not a modal popup\n\n## \n\nAs the edit permission link has a standard link behaviour, you should remove the icon which indicates that the link opens in a new window.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-16",
    "Summary": "Parsing errors",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users. The alert icon with \"i\" indicator does not have a text alternative.\n\nNote that we have raised this issue on the assumption that different types of messages can appear. For example, \"Information\", \"Warning\", and so on. If this is the only message type that will ever appear, you may wish to request DCE dispensation for this issue.\n\nWe have raised this as low priority as users can otherwise just navigate onto the text itself.\n\n## \n\nThis can be seen on the notification which is above the maintain signature and authorisation limits table.\n\n![alert icon missing text alernative](image.png)\n![alert icon markup with text alternative](image1.png)\n \n## \n1. inspect the icon\n2. note that it does not have text alternative \n\n## \n\nEnsure that informative images have alternative text so that they are communicated to assistive technologies. The alternative text could be \"Important information\" or similar. For example:\n\n```\n<i class=\"visuallyhidden\">Important Information</i> \n```\nOtherwise, for `<img>` elements an `alt` attribute can be provided:\n\n```\n<img src=\"\" alt=\"Important Information\">\n```\n\nMake sure that have appropriate, unique wording for all the possible icons that can appear on these messages.\n\nFor more information on providing text alternative see [WAI - Informative images](https://www.w3.org/WAI/tutorials/images/informative/). For information about visually hiding elements while ensuring they remain available to assistive technologies, see [WAI - Note on hiding elements](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements) and [A11yProject: How to Hide Content](https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-12",
    "Summary": "Listbox option labels create audio clutter for screen reader users",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. There are parsing errors due to the following:\n\n* incorrect nesting of elements\n* duplicate id for elements. \n\nUsers may experience strange behaviour or generally diminished support.\n\n## \n\nThis can be see on pages 1 and 6.\n\n![page 1 - parsing errors flagged by nu validator](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-24",
    "Summary": "Non-interactive element incorrectly announced as interactive",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There are valid fields are incorrectly use `aria-invalid=\"true\"`.\n\n## \n\nThis can be seen on page 5 on all of the input fields. These are below the \"Edit authorisation limits\" heading.\n\n![Input field with valid entries](image.png)\n![input field with aria-invalid=\"true\"](image1.png)\n \n## 1. navigate onto the above elements with a screen reader, or inspect them\n2. observe that valid input field entries are marked up with aria-invalid=\"true\"\n\n## \n\nWhen the input field entries are valid, remove the `aria-invalid` attrribute from it. For more information. see [MDN - using aria-invalid](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-invalid_attribute).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-22",
    "Summary": "Modal dialog button has redundant hidden text",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nAn `aria-label` is used to label the input field. However, the asterisk which indicates that the field is mandatory is missing from the label value. The currency label for authorisation limit is also not associated with the input field. \n\n## \n\nThis can be seen on page 5 on all of the input fields. These are below the \"Edit authorisation limits\" heading. \n\n![input fields which are missing label associations](image.png)\n![markup of input ACH debit input field labels](image1.png)\n \n## \n1. navigate through the above examples with a screen reader\n2. note the asterisk is not communicated\n\n## \n\nEnsure that the asterisk is included as a part of the associated label, along with the currency for authorisation limit. This can be done using the `aria-labelledby` attribute to reference two of the labels. For example:\n\n```\n<span id=\"authLabel\">ACH - Debit *</span>\n<label id=\"authLimit\">HKD</label>\n<input aria-labelledby=\"authLabel authLimit\" ... />\n```\n\nAlternatively, you could concatenate the asterisk in the end of the `aria-label`, and correctly associate the auth limit currency using the `aria-describedby` attribute. \n\nFor more information, see [WAI - Labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/) and [MDN - using the aria-labelledby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-13",
    "Summary": "Armenia Manage Alert - Unsuitable mark-up for navigation menu",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe pagination combobox is not programmatically associated with its labels\n\n## \n\nThis can be seen on pages 1 and 2 with the pagination comboxes. These are below the Maintain signature and authorisation limits table. \n\n![pagination comboboxes that are not associated with labels on page 1](image.png)\n![pagination comboboxes that are not associated with labels on page 2](image2.png)\n![markup of pagination combobox](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the labels are not communicated \n\n## \n\nEnsure that the labels are associated with the combobox. \n\nWe recommend using the native HTML `<select>` element as the combobox. The first label can be associated using the `for` and `id` attribute. The total number of pages can be associated using `aria-describedby`. For example:\n```\n<label for=\"goToPage\">Go to page</label>\n<select id =\"goToPage aria-describedby=\"totalPages\">\n    <option value=\"\">1</option>\n    ...\n<span id=\"totalPages\">of 3</span>\n```\n\nAlternatively, you can use the `aria-labelledby` attribute to reference the \"Go to page\" text and the \"of ...\" text on the combobox.\n\nFor more information, see [WAI - Labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/) and [MDN - using the aria-labelledby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8413-10",
    "Summary": "Armenia Manage Alert - Parsing errors",
    "Success Criteria": "Language Issue",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen the page language is set to Spanish, there are some hidden, accessible names that are not translated to Spanish. Note that this has been raised separately from ADR_8413 - 15 which is about the plain text on the page. \n\n## \n\nThis can be seen on page 1 with the Maintain signature and authorisation limits table. On the \"Ver\" link under the \"Nivel de cuenta\" table header. The link's label is overwritten to \"view\" for assistive technologies by the `aria-label`. The \"Editar Permisos\" link does not have an `aria-label` so is not overwritten.\n\n![table with \"Ver\" links](image2.png)\n![aria-label has description \"View\"](image.png)\n\nSimilarly, on page 2, the \"Editar\", \"Configar\" and \"Ver\" links are overwritten by `aria-label` elements with \"Edit\", \"Setup\" and \"View\" respectively.\n\n![links in the table on page 2 are overwritten by aria-label elements](image7.png)\n![an aria-label overwrites the Edit link text](image4.png)\n![an aria-label overwrites the configure link text](image5.png)\n![an aria-label overwrites the view link text](image6.png)\n\nOn both pages 1 and 2, the loading status text has been translated but is overwritten but an English `aria-label`:\n\n![loading indicator has been visually translated](image8.png)\n![an aria-label overwrites loading text](image3.png)\n\n## \n1. navigate to the elements above and inspect them\n2. observe that the text is in English\n\n## \n\nEnsure that all of the text is translated to Spanish, including those that are visually hidden and only available to assistive technologies, such as the table caption. In some cases, you can simply remove the `aria-label`. For example, for the \"Ver\" link, you can remove the initial `aria-label=\"view\"`, so the link's label will be set to \"Ver\".\n\nFor more information, see [WAI Tutorials - Labeling Controls](https://www.w3.org/WAI/tutorials/forms/labels/), [Heydon Pickering - aria label is xenophobic](https://heydonworks.com/article/aria-label-is-a-xenophobe/), and [Adrian Roselli - aria-label Does Not Translate](https://adrianroselli.com/2019/11/aria-label-does-not-translate.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6529-4",
    "Summary": "Menu button does not have an accessible name",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nSome form fields have no visual or programmatic indication that indicates the field is mandatory until the form is submitted.\n\n## \n\nOn page 1. On the first name and last name input fields. \n\n![Required First name field not communicated](image.png)\n\n![Markup showing no required attribute, First name](image1.png)\n\n## \n1. Navigate onto the above examples \n2. Note that they are not marked as mandatory either visually or programmatically\n\n## \n\nEnsure that all of the input fields which are mandatory include an asterisk next to them in the visual label and that these fields are programmatically marked as `required`. \n\nFor example:\n\n```\n<label for=\"FirstName\">First Name: *</label>\n<input id=\"FirstName\" type=\"text\" required />\n```\n\n\nFor more details on marking required fields, please see [Validating required input - W3C WAI Web Tutorials](https://www.w3.org/WAI/tutorials/forms/validation/#validating-required-input).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6529-2",
    "Summary": "Button does not have an accessible name",
    "Success Criteria": "3.3.1: Error Identification [A]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nErrors must described in text and compatible with assistive technology. Users may otherwise be unaware when they occur.\n\nSubmitting the form with invalid form entries renders error messages below each of fields with invalid entry. These error messages are not communicated to assistive technology users. \n\n## \n\nOn page 1. On all of the form fields. E.g. First name, Last name, Phone Number. \n\n![form entries error messages](image.png)\n\n![Markup](image1.png)\n \n## \n1. prompt the above errors\n2. note that they are not communicated to all users \n\n## \n\nEnsure that errors are associated with their relevant controls. Screen readers will announce an error when a control associated with an error receives focus. This can be done with `aria-describedby`. For example: \n\n```\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"fname\" aria-describedby=\"nameInvalidEntry\">\n<span id=\"nameInvalidEntry\">Please enter a valid first name</span>\n```\n\nEnsure that all users are told when errors occur. It may be visually obvious when they appear. However, this may disadvantage vision impaired users. You can use alerts. For example: `<span role=\"alert\">The form could not be submitted because invalid form entries.</span>`. Information on alerts and generally notifying users is provided by the W3C. See: [Web Accessibility Tutorials - User Notifications](https://www.w3.org/WAI/tutorials/forms/notifications/).\n\nAnother solution is `aria-invalid`. This allows assistive technology to communicate when a field is in an invalid state. For example:  `<input type=\"text\" aria-label=\"first name\" aria-invalid=\"true\">`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6529-6",
    "Summary": "Label is not associated with input field",
    "Success Criteria": "1.4.4: Resize text [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users with low vision use browser features, such as texting resize or browser zooming, to enhance the readability of content. The functionality is not available throughout, however. The product may disadvantage the aforementioned users.\n\nForm field labels do not resize based on the browser's text size setting. \n\n## \n\nOn page 1. On the label of each form field (`.card-activation-form label`)\n\n![Resize comparasion](image.png)\n\n![Markup](image1.png)\n \n## \n1. navigate onto the above pages\n2. modify the text size in the browser menus or preference (in IE, with View > Text Size)\n3. note that this does not change the size of the text\n\n## \n\nThe text size on the website is set using absolute units, for example `16px` on the form label. This means the text size cannot be dynamically changed.\n\nUse a relative text unit instead: `em`, `%`, `ex`, or `rem` (if the root is a relative unit too). For more details refer to the W3C technique [Using em units for font sizes](https://www.w3.org/TR/2008/NOTE-WCAG20-TECHS-20081211/C14).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-238",
    "Summary": "Malta Open Demand Deposit - aria-describedby not correctly associated",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Dropdown",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There is a listbox with \"undefined\" in its accessible name. \n\n## \n\nThis can be seent on the Bahrain - Consent Management page.\n\nOn the Authorizations page, on the 'active/ inactive' listbox. \n\n![listbox](image1.png)\n\n![Markup](image.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that the accessible name is announced as 'Inactiveundefined'\n\n## \n\nRemove 'undefined' from the listbox accessible name. For example:\n\n```\n<div ... aria-label=\"Active\"> \n```\n\nOtherwise, resolve whatever problem is causing the string to resolve to undefined. For example, you may be trying to add a variable to the `aria-label` that does not exist.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-156",
    "Summary": "Label is not correctly associated with input field",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within the context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back. \n\nLinks that open a new window do not make this behaviour known to all users. \n\n## \n\nThis is on Malta - Open Demand Deposit.\n\nThis can be seen with the \"Important information\" section of all flows. It happens with the \"online account opening link\".\n\n![Link without opening in new page text](image.png)\n\n## \n1. inspect the above link \n2. note that there is nothing that communications that it opens in a new window \n\n## \n\nThe link text should be made obvious. For example, For example: `<a href=\"#\">Online account opening (opened in a new window)</a>`. You could instead use an icon with alt text. For example, `<a href=\"#\">Online account opening<img src=\"...\" alt=\"opened in a new window\"></a>`.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-125",
    "Summary": "Singapore Update Customer Details - edit buttons with confusing labels",
    "Success Criteria": "1.4.4: Resize text [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users with low vision use browser features, such as texting resize or browser zooming, to enhance the readability of content. The functionality is not available throughout, however. The product may disadvantage the aforementioned users. \n\n## \n\nOn the Armenia - Manage Alerts page, under the Accounts and Account alert heading. The 'Savings account' and 'Term deposit' text does not resize. However, all of the other text on the website does resize as the body element has a relative text size unit (rem). \n\n![Text does not resize](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate onto the above pages\n2. modify the text size in the browser menus or preference (in IE, with View > Text Size)\n3. note that this does not change the size of the text\n\n## \n\nThe text size on the mentioned text is set using absolute units, (15px). This means the text size cannot be dynamically changed. \n\nUse a relative text unit instead: `em`, `%`, `ex`, or `rem` (if the root is a relative unit too). This has been done for the surrounding text. For more details refer to the W3C technique [Using em units for font sizes](https://www.w3.org/TR/2008/NOTE-WCAG20-TECHS-20081211/C14).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-311",
    "Summary": "Dropdown is not programmatically associated with visual label",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\n## \n\nThis can be found on the VN - Manage Payee page. On the \"Manage your existing payees\" page. \n\n![Heading not marked up semantically](image.png)\n\n![Markup of heading](image1.png)\n \n## \n1. navigate through the above example with a screen reader\n2. note that it does not announce as a heading \n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Ensure that native heading markup is used for headings. For example, `<h2>MANAGE ACCOUNTS</h2>`.\n\nFor more information see [Web Accessibility Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-191",
    "Summary": "List of steps hidden from assistive technology",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nThere are headings that are used to categorize the page content but do not have an appropriate heading semantic. \n\n## \n\nThis is on Setting up one time payments and Manage future dated under India - BBPS.\n\nOn the heading of the navigation menu, at the top left of the screen. On the Pay and transfer - select a biller, review, and confirmation pages. \n\n![heading](image.png)\n\n![code](image1.png)\n\nOn the heading of the navigation menu, at the top left of the screen. On the future dated requests page. \n\n![heading](image2.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the heading role is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Ensure that native heading markup is used for headings. For example, `<h2>MOVE MONEY</h2>`.\n\nFor more information see [Web Accessibility Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-159",
    "Summary": "Singapore Update Customer Details - Labels are not correct associated with input field",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised. \n\nVisual lists have been marked up using generic containers `<div>` and `<span>`.\n\n## \n\nOn Singapore - Change IB Limits\n\n![Singapore - IB](image.png)\n\n![Code](image1.png)\n\nOn Account Opening - Bermuda\n\n![Bermuda - AODD](image2.png)\n\nOn Singapore - Update Customer Details \n\n![Singapore - Update Customer Details](image3.png)\n\nOn India - Payment Gateway review\n\n![India - Payment Gateway](image4.png)\n\n![India - Payment Gateway DOM](image5.png)\n\n## \n1. visually note the list content\n2. inspect the elements\n3. note that they are not contained within list mark-up\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\n```\n<ul>\n  <li>For your own accounts    SGD 4,999</li>\n  <li>For 3rd Party/FAST/PayNow with transaction signing    SGD 4,999</li>\n</ul>\n``` \n\nAlternatively, you could use a description list to display and describe the terms. \n\n```\n<dl>\n    <dt>For your own accounts</dt>\n    <dd>SGD 4,999</dd>\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-158",
    "Summary": "Navigation links are not translated",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nThere are headings that are used to categorize the page content but do not have appropriate heading semantics. \n\n## \n\nThis is on Account Opening - Bermuda, Singapore - Change IB Limits, Singapore - Update Customer Details (UCD).\n\nOn the heading of the navigation menu, at the top left of the screen. \n\nOn Singapore - Change IB Limits page\n\n![IB limits](image.png)\n\n![Code](image1.png) \n\nThere is a heading that is visually styled similarly and is marked up semantically as well. For example, see \"Online Banking Limits\"\n\n![OBL](image2.png)\n\nOn Bermuda - AODD page \n\n![Bermuda AODD](image3.png)\n\nOn Singapore - Update Personal details page \n\n![Singapore UPD](image4.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the heading role is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Ensure that native heading markup is used for headings. For example, `<h2>MANAGE YOUR ACCOUNTS</h2>`.\n\nFor more information see [Web Accessibility Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-155",
    "Summary": "Hidden text and image alt attributes are not translated",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised. \n\nVisual lists have been marked up using generic containers `<div>`. \n\n## \n\nThis can be seen throughout the Malta Open demand deposit journeys. There are multiple instances under 'Account' and 'Deposit details' heading. This can be seen in the E2E, Insufficient balance, FATCA Noncompliant,  Student account, and More than 30 accounts. \n\nThe example below is from the E2E flow - Open a demand deposit review page. \n\n![account list not marked up semantically](image.png)\n\nAnother example is from the \"You cannot open more than 30 accounts\" flow. \n\n![more than 30 accounts](image1.png)\n\n## \n1. visually note the list content\n2. inspect the elements\n3. note that they are not contained within list mark-up\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\n```\n<ul>\n  <li>Account    Current Joint Account - Taxable</li>\n  <li>Amount    EUR 1.0</li>\n</ul>\n``` \n\nAlternatively, you could use a description list to display and describe the terms. \n\n```\n<dl>\n    <dt>Current Joint Account - Taxable</dt>\n    <dd>EUR 1.0</dd>\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-139",
    "Summary": "SVG used as a source for images are ignored by VoiceOver",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised. There are visual lists in generic div elements. \n\n## \n\nOn the India - BBPS - BBPS Quick Pay flow, there are items visually marked up as a list. On the Pay a bill page, there is a list of items regarding bill details. This can be rendered by triggering the 'Click to fetch your bill details' link which is under the Details heading.\n  \n![List example](image.png)\n\nOn the Review and Confirmation page which can be accessed by viewing the Review and confirming the bill on the Review page.\n\n![Review and confirnmation page](image6.png)\n\nMarkup of visual list \n\n![list markup](image1.png)\n\n## \n1. navigate onto the review page\n2. note the visual list\n3. inspect the list and note that lack of semantic list mark-up\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. In this case, you could use an unordered list. For example,\n\n```\n<ul>\n...\n  <li>Bill Date: 17/02/2020</li>\n...\n</ul>\n``` \n\nAnother option would be to use a description / definition list. For example \n\n```\n<dl>\n...\n    <dt>Bill Date</dt>\n    <dd>17/02/2020</dd>\n...\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-130",
    "Summary": "Text is not translated to page language",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers, to communicate the relationships to users. There are visual headings that categorise content that does not use heading semantics. \n\n## \n\nOn Armenia - Manage alerts, the Settings heading appears above the \"Mobile alerts\" tab.  It appears to be styled the same way as \"Mobile alerts\" heading, which is marked up as a semantic heading.\n\n![settings heading](image.png)\n![settings heading markup](image1.png)\n\n## \n1. inspect the Settings heading\n2. note that it does not use heading semantics \n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. In this case, use heading semantics. For example, `<h2>Settings</h2>`. For more information see [Web Accessibility Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-124",
    "Summary": "Visually hidden text is not translated",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised. \n\nVisual lists have been marked up using generic containers `<div>`. \n\n## \n\nOn the Armenia - Manage Alert page, there are multiple instances of visual list items under 'Account alert' and 'Account' headings, which have not been marked up semantically.\n\n![Visual lists on Manage Alert page](image.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship is not communicated\n3. this can be observed by pressing (L) to navigate to the next list\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\n```\n<ul>\n  <li>Nickname test</li>\n  <li>Credit notification over AMD 5.08</li>\n</ul>\n``` \n\nAlternatively, you could use a description list to display and describe the terms. \n\n```\n<dl>\n    <dt>Nickname</dt>\n    <dd>Test</dd>\n    <dt>Credit notification over</dt>\n    <dd>AMD 5.08</dd>\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-246",
    "Summary": "Potential typing error found",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology.\n\nThere are decorative images with informative alt text. \n\n## \n\nThis can be seen on the following India Soft Token pages\n\n* M2M Domestic transfer \n* Add Payee \n* Insta Bill Pay with ReAuth\n* Add Biller for TDS\n* Payment Gateway review\n\n![Phone image](image.png)\n\n![Markup with alt attribute](image1.png)\n\n## \n1. inspect the non-text content.\n2. confirm that the image alt text can be described by adjacent text and is not unique.\n\n## \n\nAs the decorative phone image is sufficiently described by adjacent text, there is no need to repeat this information.  The token image should be marked up using an `alt` attribute.  For example:\n\n```\n<img src=\"\" alt=\"\">\n```\n\nFor more information, see [WAI Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-236",
    "Summary": "Radio buttons labels have redundant text",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is inappropriately marked up. The image of a phone with a lock icon has been marked up using `alt=\"token\"`. This does not provide additional context to the page as the adjacent text describes the same information. This could also confuse assistive technology users or cause audio clutter. \n\n## \n\nThis can be see on the following TDS Components:\n* Add M2NMI Payee\n* Add Biller\n* Add M2NMD-Credit Card\n* Add M2NMD-Non Payee\n* Add M2NMD-Other Payee\n* Existing M2C (IRAS-Other taxes)\n* HSBC Corporate Accounts\n* HSBC Corporate Credit Card\n* PayNow\n* Change MM Limits\n\nOn the phone image of the TDS component, at the bottom of the page. \n\n![Phone image](image.png)\n\n![Markup](image1.png)\n\n## \n1. inspect the non-text content.\n2. confirm that the image alt text can be described by adjacent text and is not unique. \n\n## \n\nAs the decorative phone image is sufficiently described by adjacent text, there is no need to repeat this information.  The token image should be marked up using an `alt` attribute.  For example:\n\n```\n<img src=\"\" alt=\"\">\n```\n\nFor more information, see [WAI Tutorials - Decorative Images](https://www.w3.org/WAI/tutorials/images/decorative/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-315",
    "Summary": "Link does not communicate that it opens in an external application",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nIssues include elements using duplicate `id` and invalid nesting. \n\n## \n\nThis can be found on the Vietnam - Manage Future Dated Payment page. \n\n![Parsing issuesflagged by Nu Validator](image.png)\n \n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-310",
    "Summary": "Link is not declared as such",
    "Success Criteria": "Additional Issue",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nUpon successfully deleting a payee from the manage payee list, an alert is automatically triggered.  A `<span>` element is inserted into the live region with the text content \"[Ljava.lang.String;@2fb078c5\". \n\n## \n\nThis can be found on the VN - Manage Payee page. On the \"Manage your existing payees\" page. Press the delete payee button and proceed to delete any payee. \n\n![Confirmation page with alert text](image.png)\n\n![Markup of alert text](image1.png)\n \n## \n1. inspect the success message\n2. note that there is a visually hidden text as follows \"[Ljava.lang.String;@2fb078c5\"\n\n## \n\nIf this is meant to be helpful text, update the text. Otherwise, remove it from the DOM.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-308",
    "Summary": "Button not defined with accessible name and role",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nMultiple elements are using the same `id` `countryNameIdentifier`. Assistive technologies may be unable to retrieve information that is associated with the `id`. \n\nElement `ul` is nested as a child of element `h1`. \n\n## \n\nThis can be found on the VN - Manage Payee page. \n\n![Parsing errors flagged by nu validator](image.png)\n \n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nEnsure that elements have a unique `id`. \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-248",
    "Summary": "Headings are not declared",
    "Success Criteria": "Additional Issue",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. There is an input field with a verbose description. \n\nThis is not a strict WCAG failure as the text informs the user about completing the field. However, it prompts screen readers to announce multiple sentences. As a result, you are not required to fix this issue, but we would recommend doing so. \n\n## \n\nThis can be seen on the following TDS Components:\n\n* Insta Bill pay for Re-auth\n* Add Biller for TDS\n\nOn the Additional security required (TDS) component. \n\nAlso on the Payment Gateway review page.\n\nSteps described in plain text. \n\n![Steps visually described around input field](image.png)\n\nAdditional `aria-describedby` text for security code/ re-authentication code input field. \n\n![Speech output on input field](image1.png)\n\n![Markup showing association between instruction message and input field](image2.png)\n\n## \n1. navigate onto the above examples \n2. note that they do not include unique descriptive labels as the steps are repeated\n\n## \n\nThe additional instructions provided using the `aria-describedby` attribute is not required, as the same steps are written in the surrounding text. If you wish to provide helpful instructions, consider something unique and succinct. For example: \n\n```\n<span class=\"hiddenText\" id=\"helpText\">\nfor instructions on completing this, see the above ordered list\n</span>\n```\n\nThe user could then navigate up or use the list navigation keys to jump to the list. For more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-237",
    "Summary": "There are no alternatives to drag on image",
    "Success Criteria": "Additional Issue",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. There is an input field with a verbose description. This is not a strict WCAG failure as the text informs the user about completing the field. However, it prompts screen readers to announce multiple sentences. \n\nAs a result, you are not required to fix this issue, but we would recommend doing so. \n\n## \n\nThis can be see on the following TDS Components:\n* Add M2NMI Payee\n* Add Biller\n* Add M2NMD-Credit Card\n* Add M2NMD-Non Payee\n* Add M2NMD-Other Payee\n* Existing M2C (IRAS-Other taxes)\n* HSBC Corporate Accounts\n* HSBC Corporate Credit Card\n* PayNow\n* Change MM Limits\n\nOn the Additional security required (TDS) component. \n\nSteps described on plain text. \n\n![Steps](image1.png)\n\nAdditional `aria-describedby` text for security code/ re-authentication code input field. \n\n![Input field](image.png)\n\n![Markup](image2.png)\n\n## \n1. navigate onto the above examples \n2. note that they do not include unique descriptive labels as the steps are repeated\n\n## \n\nThe additional instructions provided using the `aria-describedby` attribute is not required, as the same steps are written in the surrounding text. If you wish to provide helpful instructions, consider something unique and succinct. For example: \n\n```\n<span class=\"hiddenText\" id=\"helpText\">for instructions on completing this, see the above ordered list</span>\n```\n\nThe user could then navigate up or use the list navigation keys to jump to the list. For more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-192",
    "Summary": "Hit area of close button may be too small",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technologies use these to communicate the purpose of elements to users. \nThe expanded state of the button is concatenated with its name in the `aria-label`,  causing it to be announced twice as `aria-expanded` is also being used. \n\n## \n\nThis is on Manage future-dated page under India - BBPS.\n\nOn the filter button of the above page, next to the transactions heading. \n\n![filter button](image.png)\n\n ![code](image1.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their expanded state is communicated twice\n\n## \n\nRemove the text \"expanded\" from the button's `aria-label` attribute.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-160",
    "Summary": "Interactive elements are not associated with visual label",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\n## \n\nOn the Account Opening - Bermuda\n\n![Parsing errors - Bermuda](image.png)\n\nOn Singapore - Change IB Limits, Singapore - Update Customer Details pages\n\n![Parsing errors - Singapore](image1.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [W3 - Markup Validation Service](http://validator.w3.org).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-142",
    "Summary": "Heading semantics potentially misused",
    "Success Criteria": "Additional Issue",
    "Component": "List-box",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe listbox options on the \"Pay a bill\" page use `aria-label` to describe their function to screen reader users. The options belong to the listbox 'Search biller category' which contains different options for different biller journeys such as Electricity, Gas, prepaid mobile, etc. \n\nHowever, in all instances, `aria-label` with repetitive text is used which causes audio clutter and does not provide unique information. Text such as 'This is associate to Bharat bill payment' is announced with each option.\n\n## \n\nThis is Bill Payment under India - BBPS. \n\n![audio clutter in list box options](image1.png)\n\n![markup of options](image.png)\n\n## \n1. navigate onto the above buttons using a screen reader\n2. note the audio clutter that is occurring\n\n## \n\nRemove the repetitive description on the end of each label. That is. \"this is an associate to bharat bill payment\". \n\nIf you feel it provides helpful context and applies to all items, then it could be associated with the listbox component as a whole using `aria-describedby`, so that it is announced once. For more information, see [MDN - using aria-describedby](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-141",
    "Summary": "Buttons are marked up as a link",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nOn Android with TalkBack, the loading message is announced as interactive (“Double-tap to activate”) despite being non-interactive. This may confuse users who cannot see the screen, who may assume that the loading message is interactive. This is a known issue with TalkBack.\n\n## \n\nThis is on India - BBPS - Quick Pay.\n\nOn the transition between flows such as Pay a bill to Review to Confirmation. The loading message receives screen reader focus and is announced with 'Double-tap to activate'. However, nothing happens when you double tab on the element.\n \n![Loading message announced as interactive](image.jpg)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the examples are announced as interactive \n\n## \n\nWe were unable to view the markup for this element, but this is most probably caused by the use of `tabindex=\"-1\"` on the component. TalkBack incorrectly assumes that the use of `tabindex` means that the element is interactive. \n\nThis is an issue as `tabindex=\"-1\"` is often used to programmatically set focus on elements. It has been fixed in the latest version of Chrome Canary (the dev branch of the browser), so a Chrome update will fix it sooner or later. In the meantime, if you can remove the `tabindex` setting, then do so.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-138",
    "Summary": "Pinned content not in nav region",
    "Success Criteria": "Additional Issue",
    "Component": "Modal Dialog",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will otherwise announce them without explaining what the user is expected to input. There are UI elements with placeholder names that do not inform users properly.\n\nThis has been raised as an Additional Issue as the correct label (Cancel) is exposed. It is that there is some additional information that needs to be removed. \n\n## \n\nThis is on India - BBPS Quick Pay page.\n\nOn the modal dialog which is rendered when selecting the 'Cancel' button through the user journey in India - BBPS. The 'Don't cancel' button has a nested span with redundant text '[]Ljava.lang.String;@1d29d423'. \n\n![Don't cancel button](image1.png)\n![markup](image.png)\n\n## \n1. During the India - BBPS Quick Pay flow, click/select cancel.\n2.  Tab onto the 'Don't cancel' button with a screen reader.\n3. Note the redundant text being announced.\n\n## \n\nRemove the nested `span` element with text from the 'Don't cancel' button.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-129",
    "Summary": "Heading is inappropriately marked up",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe sidebar has been marked up using role=\"menu\" with the elements within having role=\"menuitem\". This is not appropriate for this control. It is meant for application menus similar to system applications.\n\nAn example use case is Google Docs - which has a typical File, Edit, View application menu. This mark-up is not meant for a fly-out navigation, tabpanel, or sidebar. This is not best practice. \n\nHowever, there were no particular blockers when using a screen reader on the menu. As a result, this has been raised as an Additional Issue.\n\n## \n\nThis is on Armenia - Manage Alert.\n\n![sidebar](image.png)\n![sidebar with code](image1.png)\n\n## \n1. inspect the sidebar\n2. note the use of menu mark-up\n\n## \n\nRemove the role=\"menu\" and role=\"menuitem\" mark-up. Instead use standard nav regions, lists, and links. For example:\n\n```\n<nav aria-label=\"Sidebar Navigation\">\n<h2>Settings</h2>\n<ul>\n  <li><a href=\"...\" aria-current=\"page\">Mobile Alerts</a></li>\n  ...\n</ul>\n</nav>\n```\n\nFor further explanation see [Dont use ARIA menu roles for site nav](https://adrianroselli.com/2017/10/dont-use-aria-menu-roles-for-site-nav.html).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-126",
    "Summary": "Decorative image has redundant alt text",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support. \n\n## \n\nThis is on Armenia - Manage Alerts.\n\nOn the Mobile alerts page - 'Review your mobile alerts'. \n\n![Parsing issues found](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [W3 - Markup Validation Service](http://validator.w3.org).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-163",
    "Summary": "Images are marked up using CSS",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe menu button does not have an accessible name. \n\n## \n\nOn Singapore - Change IB Limits page, at the top of the page. \n\n![Menu button with no accessible name](image.png)\n\n![Code](image2.png)\n\nOn the Account Opening - Bermuda page, at the top of the page. \n\n![Menu button with no accessible name](image1.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that the accessible name is not communicated \n\n## \n\nWe recommend using the `aria-label` attribute to label this menu button so it's purpose is clear - for example `aria-label=\"Online banking limits options\"`.\n\nFor further information, see the [WAI tutorial on labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-140",
    "Summary": "Links use the same style as headings",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The popup menu button does not have an accessible name. \n\n## \n\nThis is on the Quick Pay page under India- BBPS.\n\nOn the popup button, next to the QUICK PAY heading. The screen reader announces the button as \"popup button collapsed\". It does not have a programatically associated label. \n\n![unlabelled button](image.png)\n\n![markup of unlabelled button](image1.png)\n\n## \n1. Navigate onto the above element with a screen reader.\n2. Note that their accessible name is not communicated.\n\n## \n\nRecommend using the `aria-label` attribute to label this menu button so it's purpose is clear - for example `aria-label=\"Pay and Transfer options\"`.\n\nFor further information, see the [WAI tutorial on labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-136",
    "Summary": "Anchor tag does not have a label and href attribute",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The menu button does not have an accessible name. \n\nScreen reader users may be able to infer the button's purpose from the menu role. However, the use of menu role in this instance is bad practice and is captured as an additional issue: 3804 - 117\n\n## \n\nThis is on Malaysia - Change IB Limits.\n\nOn the menu button, next to ONLINE BANKING LIMITS heading. The screen reader announces the button as \"Button menu popup collapsed\". \n\n![Button without name](image.png)\n\n## \n1. Navigate onto the above elements with a screen reader.\n2. Note that their accessible name is not communicated.\n\n## \n\nFor buttons with visible labels, add inner text to the button element. Make the label a clear call to action. For example:\n\n```\n<button>Online banking links</button>\n```\n\nFor buttons without visible labels, like icon buttons, use the `aria-label` attribute to clearly describe the action to anyone using assistive technologies.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-189",
    "Summary": "Filter buttons role and state not programmatically determined",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will otherwise announce them without explaining what the user is expected to input. The One-time-password label is not associated with its input field. \n\n## \n\nThis is on India - E-Nach.\n\nOn the review mandate page, at the bottom of the page under the Additional Security heading. \n\n![Label not associated](image.png)\n\n![code](image1.png)\n\n## \n1. navigate onto the above example\n2. note that the label is not correctly associated with the input field \n\n## \n\nEnsure that the one-time-password label is correctly associated with its input field. This can be done using the `<label>` element and specifying its association using `for` and `id` attributes. For example:\n\n```\n<label for=\"inputOtp\">One-time-password</label>\n<input type=\"text\" id=\"inputOtp\"...>\n```\n\nThe W3C provides further guidance. See: [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-157",
    "Summary": "Filter buttons are missing are missing a role and state",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nThe amount input field does not have a matching id for `aria-describedy=\"amount-field\"`. This causes a confusing announcement. When the 'Amount' input field receives screen reader focus, the announcement includes \"nav button menu popup collapsed\" as well as \"Open accounts step 1...\"\n\n## \n\nThis is on Malta - Open Demand Deposit.\n\nOn the amount input field, under the deposit details section.\n\n![Input field aria-describedby without associations](image.png)\n\n![Markup of the amount input field](image1.png)\n\n## \n1. navigate onto the above examples with a screen reader \n2. note that redundant information is being announced due to no matching id on `aria-describedby`\n\n## \n\nEnsure that the `aria-describedby` is correctly associated with a text element on the DOM. The text should further describe the input field. \nFor more information, see [W3C - Using the aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).\n\nAs well, make sure that is no strange use of `label` or `aria-hidden`. The expected pattern is: \n\n```\n<label for=\"amount\">Amount</label>\n<span id=\"currency\">EUR</span>\n<input type=\"text\" id=\"currency\" aria-describedby=\"currency helpText\">\n<span id=\"helpText\">Min deposit 0.1 Euro</span>\n```",
    "Votes": 0
  },
  {
    "Issue Id": "3804-137",
    "Summary": "Image has embedded text",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Otherwise, screen readers will announce them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nThe QR Pay input field is not correctly associated with its label.\n\n## \n\nThis is on Malaysia - Change IB Limits.\n\nOn the QR Pay input field. The input field can be accessed by first toggling the edit button.  If you swipe to or tap to the QR Pay input field, FPX is announced instead of QR Pay. \n\n![QR pay input field not associated correctly](image.png)\n\n## \n1. Navigate onto the above examples with a screen reader.\n2. Note that the input field does not announce the correct label. \n\n## \n\nEnsure that the label is correctly associated with the input field, as is already the case for the other input fields.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-161",
    "Summary": "Text on images does not contrast sufficiently",
    "Success Criteria": "2.4.6: Headings and Labels [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are visually identical edit buttons that have wildly different accessible names. For example, they change from \"On click, you will be able to edit your personal details\" to \"Cancel your changes\", despite visually looking the same. As well, this second label does not match the visual properties of the element.\n\n## \n\nOn the Singapore - Update Customer Details page, at the right side of the page on all the edit buttons. \n\n![Edit button](image.png)\n\n![Example one](image1.png)\n\n![Example two](image2.png)\n\n## \n1. Navigate through the above components with a screen reader.\n2. Observe that the labels do not properly describe the purpose of the buttons. \n3. Note that the buttons are described differently.\n\n## \n\nUse descriptive labels to communicate topics and purposes. The labelling and visual design of elements must be consistent —  although not necessarily identical. Ensure that the edit buttons have a similar `aria-label`. For example, `Edit Personal Details` and `Edit Contact Details`.\n\nThe W3C provide further guidance on writing and providing effective headings and labels. For example, [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure) and [Providing descriptive labels](https://www.w3.org/TR/WCAG20-TECHS/G131.html)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-309",
    "Summary": "Text has insufficient colour contrast",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe filter payees dropdown is not programmatically associated with its visual label.  \n\n## \n\nThis can be found on the VN - Manage Payee page. On the \"Manage your existing payees\" page. On the filter payees dropdown. \n\n![Dropdown not associated with the label](image.png)\n\n![Markup of the dropdown and label](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the labels are not announced \n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. \n\nEnsure that the dropdown is programmatically associated with the visual label. The dropdown is marked up using `aria-label`. This overrides the text content within the`<label>`. The WAI ARIA suggests using `aria-labelledby` and referencing the parent label and internal value. For example:\n\n```\n<span id=\"outerLabel\">Filter</span>\n<button aria-haspopup=\"listbox\" aria-labelledby=\"outerLabel innerLabel\" id=\"innerLabel\">All Payees</button>\n<ul tabindex=\"-1\" role=\"listbox\" aria-labelledby=\"outerLabel\" aria-descendant=\"optOne\">\n  <li id=\"optOne\" role=\"option\" aria-selected=\"true\">First option</li>\n  <li id=\"optTwo\" role=\"option\">Second option</li>\n...\n</ul>\n```\n\nFor more information, see [WAI ARIA Practices - Listbox](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html) and [MDN - Using the aria-labelledby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute)",
    "Votes": 0
  },
  {
    "Issue Id": "3804-247",
    "Summary": "Dropdown is not associated with label",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe visual list of steps for re-authenticating is hidden from assistive technologies. The steps are visually hidden and are communicated to assistive technology users through the `aria-describedby` attribute on the re-authentication code input field. \n\nThis results in a verbose, single announcement for each step. This happens with the input field receives focus. Screen reader users may find it much easier to navigate the list item-by-item as they swipe through the page.\n\n## \n\nThis can be seen on the following India Soft Token pages\n\n* M2M Domestic transfer \n* Payment Gateway review\n\n![List of steps for re-authenticating](image.png)\n\n![Markup for steps](image1.png)\n \n## \n1. navigate to the list of steps, using a screen reader and arrow keys \n2. observe that the steps are hidden from assistive technologies\n3. navigate onto the re-authentication code input field, using a screen reader \n4. observe the verbose steps are announced  \n\n## \n\nUpdate or remove the visually hidden text that is currently associated with the input field. For example: \n\n```\n<span id=\"helpText\">See steps 1-to-3 for advise on completing this field</span>\n```\n\nOtherwise, make the list visible to assistive technologies. This can be achieved by removing the `aria-hidden` attribute.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-162",
    "Summary": "Lists are not marked up",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised. \n\nThe \"Number of children\" label is not correctly associated with the input field. \n\n## \n\nWithin Singapore Update Customer Details. It is the \"number of children\" input field within the \"Update your personal details\" page. \n\n![Input field not associated](image.png)\n\n![input field DOM](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the label \"number of children\" is not communicated when the input field receives focus \n\n## \n\nEnsure that the label is communicated to screen reader users when the input field receives focus. The `<div>` which contains the visual label should be marked up using `<label>` to create this behaviour. For more information, see [Web Accessibility Tutorials - Labelling Form Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "3804-256",
    "Summary": "Prerecorded video does not have audio description",
    "Success Criteria": "Language Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe Vietnamese website uses English for the sidebar. We have raised this separately from 3804 - 255. That issue is more obviously a problem that needs to be resolved. However, this may be an intentional decision to have the sidebar in English across all environments. \n\n## \n\nOn Vietnam - Payoo. On the navigation links for Move Money. \n \n![Links with untranslated text](image.png)\n\n## \n1. inspect these above elements\n2. note that the text is not translated to local language \n\n## \n\nEnsure that the alternative text is translated. For example, translate the label for each of the links.",
    "Votes": 0
  },
  {
    "Issue Id": "3804-255",
    "Summary": "Functional images lack alternative text",
    "Success Criteria": "Language Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users. The Vietnamese website uses English for the content alternative. \n\n## \n\nOn Vietnam - Payoo. \n\nOn the TDS component.                    \n\n![Images which have untranslated alt text](image.png)\n\n![Markup of images with untranslated alt text](image1.png)\n\nOn the new invoice payment, print, and homepage button. This can be reached by confirming TDS.\n\n![Buttons which have untranslated label](image4.png)\n\n![Markup of invoice button with the untranslated label](image3.png)\n\nOn the live region on the confirmation page. \n\n![Live region which has partly untranslated text](image2.png)\n\n![Markup of the live region containing untranslated text](image5.png)\n\nOn Android and iOS, on the navigation chevron\n\n![Navigation chevron label with untranslated text](image7.png)\n\n## \n1. inspect these above elements\n2. note that their alt text or label is not translated to local language \n\n## \n\nEnsure that the alternative text is translated. For example, translate the `alt` attributes and hidden text.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8247-89",
    "Summary": "Video does not have captions",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nSVG that are used as a source for images are ignored by VoiceOver due to a bug. \n\n## \n\nThis can be seen on all pages, with the logo image in the heading section.\n\n![SVG used as a source for images](img-5.png)\n\nOn page 7, with the \"Americal airlines\" logo.\n\n![SVG used as a source for images](img-55.png)\n\n## \n1. Navigate to the above-mentioned page.\n2. Inspect the code of the mentioned image.\n3. Note that the images have SVG soruce\n\n## \n\nWhen SVG is used as the source for an `<img>` tag, VoiceOver will skip over it. This happens even when the `<img>` tag uses a valid `alt` attribute. This is a known bug with iOS and Safari.  This can be fixed by adding `role=\"img\"` to the image. For example:\n\n```\n<img src=\"logo.svg\" alt=\"Barclays logo\" role=\"img\">\n```\n\nFor more information on informative images, see [Web Accessibility Tutorials - Functional Images](https://www.w3.org/WAI/tutorials/images/functional/) and [CSS Tricks - Accessible SVGs](https://css-tricks.com/accessible-svgs/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7936-1",
    "Summary": "Tooltip button does not have a role",
    "Success Criteria": "Language Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nVisually hidden text within different components on the page are not translated to the page language.\n\n## \n\nIt happened on the HOTP to mAuth migration page. \n\nOn the app store functional images on the overlay. \n\n![Functional image with untranslated text](image.png)\n \n![Markup of image alt text in English](image1.png)\n\nOn the close overlay button\n\n![Close button with untranslated text](image3.png)\n\n![Markup of close overlay](image2.png)\n\n## \n1. inspect the element mentioned above\n2. note that it is in English \n\n## \n\nEnsure that the visually hidden text is translated to the current page language. \n\nAdditionally, add translated text that lets users know that the page will open in a new window. This is done on the app download links on the WebAuth Token Choice journey.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7934-1",
    "Summary": "Functional image alt texts are not translated",
    "Success Criteria": "Language Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe visually hidden text for \"help for date of birth\" button is not translated to the page language. \n\n## \n\nIt happened on the offline OTP page. On the advanced security button.\n\n![Help for date of birth button](image1.png)\n\n![Markup of help for date of birth button - hidden text is in english](image.png)\n  \n![Markup of date of birth input field labels - labels are in english](image2.png)\n\n## \n1. inspect the elements mentioned above\n2. note that it is in English \n\n## \n\nEnsure that the visually hidden text are translated to the language of the page. \n\nFor example, on the HOTP to mAuth migration page, the day input field label has a hidden label \"Nhập ngày\".",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-33",
    "Summary": "Headings are not fully descriptive",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nCertain colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without an accurate perception of colour or limited vision may struggle to perceive the content\n\nThe light grey placeholder text against the white background has a colour contrast ratio of 2.2:1. This is less than the  of 4.5:1.\n\n## \n\nOn the placeholder text of the input fields. \n\n![Placeholder text has a colour contrast ratio of 2.2:1](image.png)\n\n## \n1. navigate onto the pages affected\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8063-6",
    "Summary": "Visually styled heading is not programmatically marked up",
    "Success Criteria": "Additional Issue",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere is a potential typing error on the radio button legend. \";\" is used at the end of the sentence. A semi-colon is typically used to link related ideas. However here this sentence introduces a list making its use inappropriate.\n\nWe have raised this as an additional issue since this is not a Web Content Accessibility Guidelines failure.\n\n## \n\n![; used in the end of sentence](image.png)\n\n## \n1. Navigate to the radio button legend \n2. Observe that \";\" is used at the end of the sentence \n \n## \n\nChange the semicolon to either a colon or a full stop.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8063-5",
    "Summary": "Decorative icons receive screen reader focus",
    "Success Criteria": "Additional Issue",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe radio button labels have redundant text. Each radio button label starts off with \"Answer n is.\". This is unnecessarily verbose and may be confusing for users.\n \n## \n\nThis can be seen on page 1, with the radio buttons. \n\n![Radio button labels with text \"Answer is\"](image.png)\n\n## \n1. navigate through the above radio buttons\n2. note that the \"Answer n is\" text is redundant \n\n## \n\nEnsure that \"Answer n is\" text is removed from the label. This means that the radio button's label should match the visual label. For example: \"An existing payee with new details\".",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8137-6",
    "Summary": "Logo does not have a text alternative",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within the context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nThere are links that open in an external application when activated.  \n\n## \n\nThis can be seen on page 8, on the \"Get in touch\" link.\n\n![Get in touch link](image.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that it is not announced that it opens in an external application. \n\n## \n\nEnsure that the user is informed that they will be going to a different application. The HSBC accessibility framework advises explaining the behaviour to both sighted users as well as those interfacing with the programmatic name of the elements, such as screen reader users.\n\nWe suggest adding an icon to the button, visually communicating that it opens outside of the application. As well, add extra information to the programmatic label of the button, such as using an `accessibilityLabel` on iOS or `content:description` on Android, to state  \"Opens in an external application\". \n\nFor more information on providing context on link purpose, see [BBC mobile guidelines - Alternative formats](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/links-to-alternative-formats/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8137-5",
    "Summary": "Logo lacks descriptive alt text",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. A link element does not have an appropriate role. \n\n## \n\nThis can be seen on page 8, on the \"Get in touch\" link.\n\n![Get in touch link](image.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that it is not announced as a link \n\n## \n\nEnsure that elements are given appropriate traits so they are correctly identified by assistive technologies. \n\n* For iOS: The link should have the accessibility trait of `UIAccessibilityTraitLink`.\n* For Android: Use `URLSpan` (with an absolute URL) or `Linkify` for displaying links. \n\nFor more information, see the [iOS Developer guidance on identifying traits](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/iPhoneAccessibility/Making_Application_Accessible/Making_Application_Accessible.html#//apple_ref/doc/uid/TP40008785-CH102-SW7) as well as [Android Accessibility Help - Clickable Links](https://support.google.com/accessibility/android/answer/6378148?hl=en) for more information.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8137-4",
    "Summary": "Page title format is not consistent",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nBack button does not have a name or role. This would impact varies types of users, not just VoiceOver users. Users who cannot see the screen may find it difficult to go onto the previous page. \n\n## \n\nThis can be seen on page 8, back button at the top of the page. The same issue can be seen on iOS and Android.\n\n![Back button not declared programatically](image.png)\n\n## \n1. Navigate onto the back button with screen reader on.\n2. Note its purpose and operation is not communicated\n\n## \n\nEnsure that the button has an accessible name and role. For example, \"Back, button\". \n* On Android, use the `Button` element. The name can be set using the `contentDescription` attribute. \n* On iOS, the back button element can be used. If this is not possible, you can use a standard UIbutton with an accessibility label.\n\nFor more information, see [Android - Content Labels](https://support.google.com/accessibility/android/answer/7158690?hl=en-GB) and [Apple Developer - backButtonTitle](https://developer.apple.com/documentation/uikit/uinavigationitem/3600576-backbuttontitle)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8137-1",
    "Summary": "Links that open in new window are not declared as such",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are elements that serve the purpose of headings, but which have not been marked-up as such. \n\n## \n\nOn both iOS and Android, this can be seen on the top of the screen on pages 1, 2, 5, 6, 8 \"Verify your identity\" is not declared as a heading element. \n\n![heading not declared](image.png)\n\nOn both iOS and Android, \"Select/Choose your document\" , Page 4 \" Drivers license\", Page 5 \"Record a video\", Page 8 \"Identify Verification\".\n\n![Select a document heading not declared](image2.png)\n\nOn just Android, on page 3, \"Select issuing Country\", On page 4 \"Drivers License\", On page 7 \"Check Video Selfie\".\n\n![heading not declared](image3.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note that the text as a heading element is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. \nHeadings can be declared through :\n* The `UIAccessibilityTraitHeader` trait in iOS. \n* For Android, the heading role can be set using `setAccessibilityHeading()`.\n Note: Android heading is only available from Android 9 and above.\n \n\nFor more information, see [BBC Mobile Guidelines - Headings](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/headings/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8137-2",
    "Summary": "Focus is not set to dialog",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nComponents should not rely on gestures. For instance, users with motor, sensory and cognitive difficulties may struggle to use swipe or drag gestures. They may also rely on assistive technologies that do not support these gestures. \n\nDocuments can be expanded. Once expanded, users can drag their finger to pan across the zoomed image. This allows the users to view all parts of the image to see if it is clear and legible. However, when VoiceOver is enabled, this drag feature does not work. \n\nThis has been raised as an additional issue. It is a failure of WCAG 2.1 (e.g. pointer gestures), but not WCAG 2.0, which HSBC uses for testing at the time of writing. \n\n## \n\nThis can be seen on the expanded document screen on page 4, by pressing the \"Enlarge image\" button. \n\n![There are no alternatives to swipe or drag on image](image.png)\n \n## \n1. navigate to the above element\n2. observe that there is no swiping alternative for swiping gestures.\n\n## \n\nWhere swiping or drag gestures are required, provide a single touch action as an alternative. Provide controls for the screen that do not rely on gestures. The easiest way to do this is with buttons. For example, \"Zoom in\", \"Zoom out\", \"Move Up\", \"Move Down\", \"Move Left\", and \"Move Right\" buttons.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6537-19",
    "Summary": "Textual elements do not meet minimum contrast requirement",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Motor",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe Android Accessibility Scanner reports the hit area the close button as 24dp x 24dp which is lower than Android's recommended 48dp x 48dp touch size. This may cause problems for some users, particularly those who experience tremors impacting their fine motor skills.\n \n## \n\nThis can be seen on the close button on the top left of the screen on page 1, 2, 3.\n\n![Accessibility scanner reports hit area as too small](image.png)\n\n ![Page 1 - close button hit area too small](image1.png)\n ![Page 2 - close button hit area too small](image2.png)\n ![Page 3 - close button hit area too small](image3.png)\n\n## \n1. inspect the element using the accessibility scanner\n2. observe that the reported hit area for the button is less than the minimum recommended by Android\n\n## \n\nConsider making the hit area of this button larger either by using a larger graphic or introducing a label. If this is not possible, ensure that the hit area of the button is larger than the visible hit area by increasing padding. \n\nFor further guidance, see [Google - Touch target size](https://support.google.com/accessibility/android/answer/7101858?hl=en-GB#:~:text=Consider%20making%20touch%20targets%20at,objects%20is%207%E2%80%9310%20mm~) and [Material design - Touch targets](https://material.io/design/usability/accessibility.html#layout-and-typography)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7604-23",
    "Summary": "Decorative images have unnecessary alt text",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments.\n\nInteractive elements are not associated with visual labels. \n\n## \n\nThis can be seen on page 2 (Change address - updated), on the \"Change the correspondence address\" dropdown.\n\n![Change the correspondence address dropdown](image.png)\n![Markup of correspondence address dropdown](image1.png)\n\nThis can also be seen on page 7(Account finder), on the \"Search by account name or number\" input field.\n\n![Search by account name or number input field](image2.png)\n![Markup of the account finder input field](image3.png)\n\n\n\n## \n1. navigate onto the above dropdown with a screen reader\n2. note that the visual label is not announced \n\n## \n\nEnsure that the visual label is programmatically associated with the dropdown. For example, this can be done using the `aria-labelledby` attribute.\n```\n<span id=\"label-1\">\n      Change the correspondence address\n</span>\n\n<span id=\"label-2\">\n      Linked to selected account and my business\n</span>\n\n<div role=\"combobox\"... aria-labelledby=\"label-1 label-2\"...></div> \n```\n\nMoreover, remove the `aria-label` attribute with value \"Linked to selected account and my business\" from the dropdown as the label is being communicated twice to assistive technology users. Once from the `aria-labelledby` and once from the `aria-label`. \n\nFor the account finder instance, ensure that the visual label is associated with its input field. For example:\n```\n<label for=\"input-default\"...>Search by account name or or number</label>\n<input id=\"input-default\".../>\n```\n\nFor more information, see [WAI - Labeling controls](https://www.w3.org/WAI/tutorials/forms/labels/) and [WAI - Collapsable dropdown listbox example](https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6349-2",
    "Summary": "Background elements receive focus",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe pinned content text is marked up with` <h2>`. While the content is a placeholder, the text is visually not larger or bolder. Given the text visual presentation and potential importance in the page structure, heading semantics may not be needed. \n\nOn a pinned content issue in the past, the heading markup was removed after a similar issue was raised. \n\n## \n\nOn the pinned content text\n\n![Heading text](image2.png)\n\n![Code](image1.png)\n \n## \n1. inspect the markup of the pinned content text \n2. note that heading semantics may not be needed \n\n## \n\nIf the pinned contnet text is not titling, categorising, or otherwise acting as a parent to other information, the text should not be marked up as a heading. Instead, you should instead use `<p>` to describe the content.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6349-1",
    "Summary": "Dropdown is not keyboard operable",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe Pinned Content button visually appears like a button. However, they are marked up and behave like links since they redirect the user to a page.\n\n## \n\nOn the pinned content button \n\n![Button](image.png)\n\n![Code](image1.png)\n\n![Android](image2.png)\n\n## \n1. note that the element looks like buttons\n2. inspect the markup on the button\n3. note that the button is marked up as a link\n\n## \n\nIf the button behaves as a link, make it visually obvious that the element is a link by using underlined text. If they are meant to be buttons and will perform some action on the page, rather than navigating the user onto a new page, use button mark-up.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6349-3",
    "Summary": "Payment cancellation heading is not descriptive on iOS",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe pinned content hovers over the main content which visually implies that the content is separate from the main content. However, this separation is not programmatically determined. Assistive technology users may not clearly understand the structure of the content.\n\nTechnically speaking, the entire top section is contained within `role=\"banner\"`. However, in terms of regions, the banner does not match the visual layout. There is also placeholder text, such as \"screen reader text\" within the `<nav>`\n\nThis is not a strict WCAG failure as elegant page regions are not a WCAG requirement, assuming you otherwise have a good heading structure.\n\n## \n\nOn the pinned content banner \n\n![Pinned content](image.png)\n \n![Code](image1.png)\n\n## \n1. navigate to the pinned content with a screen reader\n2. observe that it's purpose is not communicated.\n\n## \n\nEnsure that the pinned content's region is programmatically determined. As well, try to match the visual layout. This has three sections. The top black bar, the main navigation, and the pinned banner. For example:\n```\n<header>\n // Messaging Banner //\n<nav aria-label=\"Top-level Navigation, Language, Login, and Search\">\n...\n</nav>\n<nav aria-label=\"Main navigation\">\n...\n</nav>\n<nav aria-label=\"Secondary Navigation\">\n...\n</nav> \n</header>\n```\nFor more information, see [Web Accessibility Tutorials - Page Regions.](https://www.w3.org/WAI/tutorials/page-structure/regions/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-16",
    "Summary": "Buttons are inappropriately labelled",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. There is plain text that is inappropriately marked up as a heading. \n\n## \n\nThis can be seen on page 4 (Events) with the event details. \n\n![Event details marked up as headings](image.png)\n\n![Markup of event details as a single heading](image1.png)\n\n## \n1. inspect the paragraph of text in an event\n2. note the use of heading semantics \n3. note that the text does not categorise or title content\n\n## \n\nRemove the heading markup `<h3>` from the event details. For more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-38",
    "Summary": "Visual lists are not marked up",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nDecorative images have been inappropriately marked up with informative alternative text. This does not provide additional context to the page as the adjacent text describes the same information. We have considered these images as decorative as they not contain any meaningful information. \n\n## \n\nThis can be seen on page 6 (News). For example, on the \"Black lives matter book share\" image.\n\n![Decorative image with alternative text](image.png)\n![DOM showing redundant alt text](image1.png)\n\n## \n1. inspect the non-text content.\n2. confirm that the decorative image has an informative alt text\n\n## \n\nImages that do not carry a meaning need an empty alt attribute. For example: \n\n```\n<img src=\"spacer.png\" alt=\"\">\n```\n\nHow to support different types of images is communicated in further depth by the W3C. See [Web Accessibility Tutorials - Images](https://www.w3.org/WAI/tutorials/images/). They also provide a [decision tree to explain how to fill the alt attributes](https://www.w3.org/WAI/tutorials/images/decision-tree/). In this case, please see [WAI Images - Decoratives Images](https://www.w3.org/WAI/tutorials/images/decorative/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-62",
    "Summary": "Non mandatory field is marked up as required",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInformative images, such as the images of conference rooms are marked up using the `background-image` property in CSS. These images are omitted by the some browsers with Windows High Contrast mode enabled. As a result, many low vision users who rely on High Contrast Mode may miss out on this information. \n\n## \n\nThis can be seen on page 9 (Conferences and meetings) with the images of conference rooms.\n\n![Conference room images](image.png)\n\nIn Internet Explorer, for example, the images will be omitted. This has been given a low priority as the background images are not ignored in Firefox.  \n\n![Background images omitted in Internet Explorer](image1.png)\n\n## \n1. navigate to the above page with Internet Explorer \n2. go to Windows Settings > Ease of Access > High Contrast. Enable Windows High Contrast mode. \n3. observe that the images defined with background-image are omitted \n\n## \n\nUse the native image element`<img>` to mark up images, while also ensuring that they have appropriate alternative text. \n\nFor more information on images refer [WAI Web Accessibility Tutorials - Images Concepts](https://www.w3.org/WAI/tutorials/images/).\n\nIf it is not possible to use native images, you can use the css content property with `::before` and `::after` to render the background image when Windows High Contrast mode is enabled. For further information on CSS content property images, see [CSS Tricks - CSS Content](https://css-tricks.com/css-content/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-32",
    "Summary": "Character count is not automatically communicated",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nLinks have the same visual style as a heading, but with smaller font size. Technically, this passes WCAG as the links have a unique style. However, the links may still be ambiguous to users. The difference between heading, link, and plain text, is not immediately obvious.  \n\n\n## \n\nThis can be seen on page 4 (Events Lists) with the events links. For example, \"A new media success story\".\n\n![Events lists links that are styled as headings](image.png)\n\n![Markup of the links that are styled like headings](image1.png)\n\n## \n1. navigate onto the above links\n2. note that the links are not immediately obvious.  \n\n## \n\nThe links should be easily distinguished from headings. We advise adding an underline to the links. This can be done through the CSS `text-decoration` property. For more information, see [MDN - Text decoration](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color) and [Yale - Accessible Links](https://usability.yale.edu/web-accessibility/articles/links).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-13",
    "Summary": "Tooltip buttons have an image role",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nThe purpose of links must make sense within context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nLinks that open a new window do not make this behaviour known to all users.  \n\n## \n\nThis can be seen on page 3 (Freshers, which is an example child page) with the links within \"Essential information for 2020-21 starters\", \"Join us on social media\" lists and on the \"College office team\" link. \n\n![List items that do not indicate that they open in a new window](image1.png)\n\n![Markup of links which do not communicate that they open in a new window](image.png)\n\n## \n1. navigate onto the above links \n2. note that they open in a new window\n3. note that users are not warned about this behaviour \n\n## \n\nThe link text should be made obvious that it opens in a new window. For example: \n\n```\n<a href=\"#\"> Green Templeton Student Handbook 2020-21 (opens in a new window)</a>. \n```\n\nAlternatively, you could use an icon with an alt text. For example, \n\n```\n<a href=\"#\">Green Templeton Student Handbook 2020-21<img src=\"...\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [W3C - Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-70",
    "Summary": "Current step is not programmatically declared",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The dismiss overlay link does not have an accessible name. It has no internal text or label.\n\n## \n\nThis can be seen on page 7 (Student Profiles), with the dismiss overlay link. Any video from the twitter embed can be activated to open this overlay. \n\n![Dismiss overlay link without a label and href](image.png)#\n\n![Markup of link without label and href](image1.png)\n\n## \n1. navigate onto the above pages\n2. inspect the close button on the Twitter embed overlay\n3. note the lack of internal text or label \n\n## \n\nFor every anchor tag, include an `href` attribute with an appropriate value. For example:\n```\n<a href=\"...\">Close</a> \n```\n\nAlternatively, use a native `<button>` element. This could also be labelled with an `aria-label`.\n\nFor more information, see [MDN - Anchor Tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a), [MDN - Button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button), and [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/validation/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-42",
    "Summary": "Form fields are not grouped",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There are buttons without a role and state. The state is that the buttons can in a \"selected\" state. \n\n## \n\nThis can be seen on page 8 (Fellows) with the Fellows sort by surname (A-Z) buttons.\n\n![A-Z buttons with C selected](image.png)\n\n![Markup of button c without selected state defined](image1.png)\n \n## \n1. navigate onto the above element with a screen reader \n2. note that the selected state is not marked up \n\n## \n\nEnsure that the button name, role and selected state is marked up. We suggest using a native element for the role, such as a `<button>` or anchor tag. For the state, you can use `aria-selected`. For example:\n\n```\n<nav aria-label=\"Fellow filter\">\n<span>Surname</span>\n<ul>\n <li><button><span class=\"hiddenText\">Filter by surname starting with</span>A</button></li>\n <li><button aria-selected=\"true\"><span class=\"hiddenText\">Filter by surname starting with</span>A</button></li>\n...\n</ul>\n</nav>\n```\n\nFor more information regarding aria-selected, see [W3C - aria-selected](https://w3c.github.io/aria/#aria-selected).\n\nYou can also use provide additional context for this widget using a `<nav>` region and hidden text. Note that this is not a requirement for WCAG, but it would make using it more user-friendly. For more information, see [MDN - Navigation role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Navigation_Role).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-20",
    "Summary": "Visual lists are not programmatically determined",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe filter events radio buttons do not have role or selected state. \n\n## !\n\nThis can be seen page 4 (Events Lists), with the Filter Events buttons.\n\n![Radio buttonswithout name, role or value](image.png)\n\n![Markup of radio buttons](image1.png)\n\n## \n1. Visually note that the buttons can be used to toggle between two states\n2. Inspect the elements\n3. Note the lack of a role (e.g. radio button)\n4. Note the lack of a state (e.g. selected)\n\n## \n\nIf custom elements serve the same purpose and operation as standard elements, use standard elements. The level of assistive technology support they provide is the most effective way to provide accessibility. For example:\n\n```\n<fieldset>\n<legend>Filter Events: </legend>\n  <div>\n    <input type=\"radio\" name=\"format\" id=\"forthcoming\" value=\"\" checked>\n    <label for=\"forthcoming\">FORTHCOMING EVENTS</label>\n  </div>\n  <div>\n    <input type=\"radio\" name=\"format\" id=\"past\" value=\"\">\n    <label for=\"past\">PAST EVENTS</label>\n  </div>\n</fieldset>\n```\n\nFor more information, see [WAI Tutorials - Grouping controls](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-48",
    "Summary": "Skip link does not work as intended",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button, Modal Dialog",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. As well, when elements cause dynamic updates to the page, keyboard focus must be managed appropriately. \n\nAfter closing an image lightbox, keyboard focus does not return to the button that triggered it. Keyboard focus is lost and defaults to the top of the page.\n\n## \n\nThis can be seen on page 9 (Conferences and meetings) with the expand overlay and close buttons. \n\n![The triggering element onto which keyboard focus should return to](image2.png)\n![Close button](image.png)\n![Keyboard focus is not set on to the triggering element, but the page itself](image1.png) \n\n## \n1. activate the expand image button\n2. dismiss the image lightbox\n3. observe that the focus does not return to the triggering button \n\n## \n\nThe keyboard focus should return to the triggering element when the modal dialog is dismissed. This can be done using the JavaScript `.focus` method. In this case, focus should return to the expand image button. For more information, see [MDN - focus method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus) and [Google Developer - Focus](https://developers.google.com/web/fundamentals/accessibility/focus).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-65",
    "Summary": "Skip link not implemented",
    "Success Criteria": "1.4.5: Images of Text [AA]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere are images of text. This can make content inaccessible. Screen readers rely on text being included in alt attributes — which are not effective for communicating multiple sentences or formatted text. \n\nThe key is embedded on the image. There are no alternative text to provide equivalent access to the information. \n\n## \n\nThis can be seen on page 16 (Contact) with the Green Templeton main site map. \n\n![Text embedded inside image](image.png)\n\n## \n1. note the text on the page\n2. inspect the text and note that it is an image\n\n## \n\nAvoid images with images. Style text with CSS. This will allow the text easier to access for various user groups. For example:\n\n```\n<h2>Green Templeton main site</h2>\n<div class=\"key\">\n<h3>Admin Building</h3>\n<span>I</span>\n<ul>\n  <li>Barclay Room</li>\n          ...\n</ul>\n...\n</div>\n```\n```\n.key{\n    background-image: url(\"college-map.png\");\n    padding: 2em 0.2em 0 6em;\n    font-size: 1.8em;\n}\n```\n\nFor more information, see [MDN - Images in HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML#Annotating_images_with_figures_and_figure_captions)\n\nAnother option would be having the information available in a table below the image. This could be presented by default or expanded and collapsed using a disclosure element. This table could have columns such as \"Building\", \"Room\" and \"Directions from main entrance\".\n\nFor more information, see [WAI Tutorials - Tables](https://www.w3.org/WAI/tutorials/tables/) and [WAI ARIA - Disclosure Image Description](https://www.w3.org/TR/wai-aria-practices/examples/disclosure/disclosure-img-long-description.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-60",
    "Summary": "Table has an empty column",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nCertain colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without an accurate perception of colour or limited vision may struggle to perceive the content\n\nThere are text placed on top of images. These images may make it difficult to read the text due to low colour contrast. \n\n## \n\nThis can be seen on page 13 (Health and Care) with the quotes on top of images. \n\n![Quotes does not contrast sufficiently against the background image](image.png)\n \n## \n1. navigate onto the quotes image\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nAvoid positioning the text on images. if you must do so, make sure that the text contrasts sufficiently. One way to achieve this is with a solid background colour that sites behind the text and creates an additional layer between the text and the image. \n\nThe colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-40",
    "Summary": "Links opening in a new window are not marked up properly",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Radio Button, Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nCertain colours do not meet the contrast ratio of 4.5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without an accurate perception of colour or limited vision may struggle to perceive the content\n\n## \n\nThis can be seen on page 8 (Fellows) where the surname and letters. It is white on light blue.\n\n![Surname and letters does not have a colour contrast ratio of 4.5:1 against the background](image.png)\n \n## \n1. navigate onto the row of surnames\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. In this case, use a darker background colour or text colour. \n\nThe colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-17",
    "Summary": "Date picker button does not have an accessible name",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. There are dropdowns which are not associated with their input fields. \n\n## \n\nThis can be seen on page 4 (Events Lists) with the \"Type of Event\" dropdown. \n\n![Type of event dropdown that is not labelled](image.png)\n\n![Markup of type of events dropdown](image1.png) \n\n## \n1. visually note the text label for the dropdown\n2. inspect the dropdown\n3. note that the text is not programmatically labelling the field\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Use the `<label>` element to associate the text and the dropdown. For example:\n\n```\n<label for=\"event\">Type of Event:</label>\n\n<select id=\"event\">\n  <option value=\"\">Category</option>\n  <option value=\"\"> Alumni</option>\n   ...\n</select>\n```\n\nFor more information, see [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/) and [Web Accessibility Tutorials - Grouping Elements](https://www.w3.org/WAI/tutorials/forms/grouping/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-12",
    "Summary": "Complete and incompletes state not programmatically determined",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. There are visual lists that are not marked up as such. \n\n## \n\nThis can be seen on page 3 (Freshers, which is an example child page). For example, with the \"Essential information for 2020-2021 starters\" and \"Join us on social media\" lists.\n\n![Lists that are not marked up progrmmatically](image.png)\n\n![Markup of Essential information for 2020-2021 starters list](image1.png)\n\n![Markup of Join us on social media list](image2.png)\n\nThis can also be seen on page 4 (Events Lists).  \n\n![Events list not marked up as a list](image3.png)\n\n![Markup of events list](image4.png)\n\n## \n1. note the visual lists\n2. inspect the elements\n3. note that they are not contained in a semantic list\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Use unordered lists for these elements. For example:\n\n```\n<ul>\n   <li>Facebook: <a href=\"#\"...>facebook.com/greentempletonoxford</a></li>\n   <li>Facebook (private group): <a href=\"'#\"...>https://www.facebook.com/groups/gtcgcr</a></li>\n...\n</ul>\n``` \n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-73",
    "Summary": "Parsing error due to alt attribute in anchor element",
    "Success Criteria": "1.2.5: Audio Description [AA]",
    "Component": "Video",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nPrerecorded videos are missing alternatives. If videos contain information that is only visually understandable, some users may be unable to access said content. The content may particularly disadvantage those with a visual and/or cognitive impairment.\n\nThe level AA success criteria requires audio descriptions for such media, unlike its level A counterpart (Audio Description or Media Alternative) which permits transcripts. The college tour video does not have audio description. For the linked issue, see ADR_8138 - 71.\n\n## \n\nThis can be seen on page 3 (Freshers), on the college tour from student Spencer Tong video. \n\n![Video with no audio description](image.png)\n\n## \n1. navigate onto the above videos\n2. observe that they do not provide an audio description track.\n\n## \n\nProvide audio descriptions for the video. \n\n* The American Council of the Blind provide [Guidelines for Audio Descriptions](http://www.acb.org/adp/guidelines.html). Not everything needs to be described — rather any appreciable content that is not perceivable from the audio. An example is unspoken on-screen text.\n* The W3C provide technical advice on audio descriptions. See [Audio Description of Visual Information](https://www.w3.org/WAI/media/av/description/).\n\nNote that there is a special, relaxed provision for \"talking head\" videos. See [using a static text alternative to describe a talking head video](https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/G203).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-45",
    "Summary": "Label with multiple controls not programmatically associated",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nOn the slideshow sidebar, functional images can be pressed to switch the current slideshow image. The functional images do not have alternative text. They do not have an alt attribute at all. This means that assistive technologies are not informed about the nature of the images.\n\n## \n\nThis can be seen on page 9 (Conferences and meetings) with the functional images of venues with the slideshow sidebar. \n\n![Venue images that lack alternative text](image.png)\n\n![Markup of venue images without alternative text](image1.png)\n\n## \n1. inspect the non-text content.\n2. confirm that it does not have an appropriate alternative \n\n## \n\nProvide an alternative to the non-text content. Images marked up with the `<img>` tag must have `alt` attributes. Functional images need to communicate their destination or functionality. This is done by adding text to the `alt` attribute. For example: \n\n```\n<ul>\n   ...\n   <li>\n      <button>\n        <img src=\"#\" alt=\"Maximise Barclay Room on image slideshow\">\n      </button>\n   </li>\n   ...\n</ul>\n```\n\nFor more information, see [Web Accessibility Tutorials - Images](https://www.w3.org/WAI/tutorials/images/) and [decision tree to explain how to fill the alt attributes](https://www.w3.org/WAI/tutorials/images/decision-tree/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_8138-11",
    "Summary": "Dropdown lists are not operable with arrow keys",
    "Success Criteria": "1.2.2: Captions (Prerecorded) [A]",
    "Component": "Video",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Auditory",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere is a video presentation which displays a person talking. This audio content is not provided in another format. The video is missing captions. Users with limited or no hearing may be unable to perceive the content. The content of the video is not otherwise captured on the page.\n\n## \n\nThis can be seen on page 3 (Freshers, which is an example child page) with the \"A welcome from Principal Sir Michael Dixon\" video. \n\n![Video captions are missing](image.png)\n \n## \n1. navigate onto the above video \n2. observe that they do not have captions\n\n## \n\nEnsure that video media has accurate captions. If there is more than one person speaking in the video, the captions should indicate who is talking. Background audio or sound effects, which inform one's understanding of the content, must be included in the captions.\n\nThere are two types of captions: \n\n* **Open captions** are integrated (burnt-in) to the video. They are displayed constantly and the media player does not need captions support. However open captions cannot be enabled on demand, searched, their visual style cannot be modified, and any errors in them can be difficult to fix. Refer to [guidance for open captions](https://www.w3.org/TR/2015/NOTE-WCAG20-TECHS-20150226/G93) for more information.\n\n* **Closed captions** exist as a separate text stream and rely on a suitable media player that supports closed captions. Users can toggle the captions on or off, and any changes can be made directly in the caption stream without changing the video. Multiple tracks can be used for multilingual captions too. Refer to [guidance for closed captions](https://www.w3.org/TR/2015/NOTE-WCAG20-TECHS-20150226/G87) for more information.\n\nDo not rely on YouTube auto-captions. Although, you can first generate the captions automatically and then manually tweak them. For more information, see [Google Support - Add your own subtitles and closed captions](https://support.google.com/youtube/answer/2734796?hl=en-GB).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7488-16",
    "Summary": "Read more link is not descriptive",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe tooltip button does not have a role. \n\n## \n\nOn the \"deposit into\" and \"deduct charges from\" tooltip buttons on the payment cancellation and payment acknowledgment page. \n \n![Tooltips with no role](image.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nEnsure that the tooltip button is marked up as a button using `UIButton`. You can also provide a hint to notify that the tooltip opens in a new modal using `setAccessibilityHint`. \n\nFor example:\n```\n[tooltipButton setAccessibilityHint:NSLocalizedString(\"Tooltip opens in a modal\", @\"Accessibility hint for button\")];                        \n```\n\nFor more information, see [BBC Mobile Accessibility - Tooltips](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/text-equivalents/tooltips-and-supplementary-information)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7932-2",
    "Summary": "Links do not indicate that they open in a new window",
    "Success Criteria": "Language Issue",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe App store and Google play functional images have alternative text in English. \n\n## \n\nIt happened on the token choice page. On the app store functional image.\n\n![Functional image with untranslated text](image2.png)\n\n![Markup of image alt text in English](image1.png)\n\n## \n1. inspect the element mentioned above\n2. note that it is in English \n\n## \n\nEnsure that the alternative text `alt` for the images are translated to the language of the page.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-1",
    "Summary": "Forms labels are not assciated with input fields",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nThere are parsing errors related to stray tags. \n\n## \n\nIt happened on the login page. \n\n![Parsing errors flagged by Nu validator](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-13",
    "Summary": "Filter results are not automatically announced",
    "Success Criteria": "2.4.6: Headings and Labels [AA]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nWhen headings are used, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged. For example, screen reader users often navigate through headings as a way of ascertaining page structure.\n\nA single heading such as \"348 GB data burned through\" is marked up as two separate headings. \"348GB\" as a heading by it self does not describe the purpose of the section.   \n\n## \n\nOn the Virgin Best Bits page. \n\n![Heading not descriptive on its own](image.png)\n\n![Markup of headings](image1.png)\n\n## \n1. navigate through the above headings \n2. note they they do not descriptively describe the topic or purpose\n\n## \n\nUse descriptive headings to communicate topic and purpose.\n\nFor example:\n```\n<h1>My Virgin Media</h1>\n<h2>Best Bits</h2>\n<h3>Your Broadband</h3>\n...\n<h2>348GB data burned through</h2> \n<h2>You're in the top 50%</h2>\n...\n``` \n\nThe W3C provide further guidance on writing and providing effective headings and labels\n\n* [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure)\n* [Providing descriptive headings](https://www.w3.org/TR/WCAG20-TECHS/G130.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-3",
    "Summary": "Links opening in a new window are not communicated",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nVisually styled heading is not marked up.  \n\n## \n\nIt happened on the login page.\n\n\"Sign in with your My Virgin Media details\" and \"Forgotten email or password?\"  is not programmaticly marked up as a heading. \n\n![Forgotten email or password heading](image.png)\n\n![Markup of Sign in with your My Virgin Media details](image2.png)\n\n![Markup of Forgotten email or password?](image1.png)\n\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship is not communicated\n\n## \n\nThe heading which is presented through visual cues must also confer that relationship through the appropriate semantics. For example:\n```\n<h1>Sign in with your My Virgin Media details</h2>\n<h2 class=\"...\">\n  <span style=\"color:#292929;\">Forgotten </span>\n  <a href=\"#\">email</a>\n  <span style=\"color:#292929;\">or</span>\n  ...\n</h2>\n```\n\nFor more information, see [WAI - Page Structure - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-22",
    "Summary": "Visual heading not marked up as a heading",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nDecorative non-text content is not hidden from assistive technologies. Screen readers do not announce anything when these icons receive focus. \n\n## \n\nThis happened on the Virgin Best Bits page. \n\n![Your Telly - Play icon receiving focus](image.png)\n\n![Markup of play icon](image1.png)\n\n![Hear icon receiving focus](image2.png) \n\n![Markup of heart icon](image3.png)\n\n## \n1. navigate onto the above mentioned elements with VoiceOver \n2. note that the icons are not hidden.\n\n## \n\nEnsure that decorative icons are hidden from assistive technologies. This can be achieved by applying the `aria-hidden=\"true\"` attribute to the element.  \n \nFor more information, see [W3 - Aria-hidden](https://www.w3.org/TR/wai-aria-1.1/#aria-hidden).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-20",
    "Summary": "Search button lacks programmatic name and role",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThe Virgin Media logo does not have a text alternative, and is communicated as \"vm logo md.png\" using VoiceOver. The image is marked up using CSS `background` on the heading. This only occurs on mobile. \n\n## \n\nOn the login page. \n\n![Virgin Media logo inappropiately announced by VoiceOver](image.png)\n\n![Logo marked up using background](image1.png) \n\n## \n1. inspect the non-text content using VoiceOver on iOS\n2. confirm that it does not have an appropriate alternative\n\n## \n\nBackground images should always be decorative and contain no text; otherwise they should be re-implemented as images in the markup.\n\nProvide an alternative to the non-text content. For example, use standard`<img>` tag with a descriptive alt text. For example:\n```\n<img src=\"#\" alt=\"Virgin Media\">\n```\n\nHow to support different types of images is communicated in further depth by the W3C. See [Web Accessibility Tutorials - Images](https://www.w3.org/WAI/tutorials/images/). They also provide a [decision tree to explain how to fill the alt attributes](https://www.w3.org/WAI/tutorials/images/decision-tree/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-18",
    "Summary": "Asterisk character not explained",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThe sky cinema logo lacks descriptive alt text \n\n## \n\nIt happened on the Virgin Best Bits page. \n\n![Sky cinema logo lacks descriptive alt text](image.png)\n\n![Markup of sky cinema logo](image1.png)\n\n## \n1. inspect the non-text content.\n2. confirm that it does not have an appropriate text alternative.  \n\n## \n\nProvide an alternative to the non-text content. For example, images marked up with the `<img>` tag must have alt attributes.\n\nIimages that convey meaning, understanding or similar, need a descriptive alt attribute. For example:\n```\n<img src=\"skylogo.png\" alt=\"Sky cinema\">\n```\n \nHow to support different types of images is communicated in further depth by the W3C. See [Web Accessibility Tutorials - Images](https://www.w3.org/WAI/tutorials/images/). They also provide a [decision tree to explain how to fill the alt attributes](https://www.w3.org/WAI/tutorials/images/decision-tree/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-12",
    "Summary": "Errors are not communicated to assistive technology users.",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are skipped heading levels. This does not reflect the visual hierarchy of the page. \n\n## \n\nIt happened on the Virgin Best Bits page. \n\n![Heading levels are skipped](image.png)\n\n![Markup of Your Broadband as h5](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the heading levels are skipped\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Do no skip heading levels, such as `<h2>` jumping to `<h5>`. \n\nFor example:\n\n```\n<h1>My Virgin Media</h1>\n<h2>Best Bits</h2>\n<h3>Your Broadband</h3>\n...\n<h2>Extras for no extra</h2> \n```\nFor more information, see [Web Accessibility Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-10",
    "Summary": "Text does not meet colour contrast requirement",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nGood page titles have several benefits. For example, when pages load, screen readers announce page titles. It is used to orientate such users — communicating the nature of the loaded page. All users use page titles in a similar fashion and benefit from descriptive page titles.\n\nPage title format is not consistent on all pages. \n\n## \n\nIt happened on the login page. \n\n![Page title](image.png)\n\n## \n1. navigate onto the above page \n2. note the inconsistent page title format\n\n## \n\nEnsure that pages have accurate page titles.\n\nThis can be done with a `<title>` in the `<head>` section. Consider a page name, page category, site name format. For example: `<title>Sign in with your My Virgin Media details |Virgin Media</title>`. Whatever format you use, use it consistently throughout, as done in other Virgin Media pages. \n\nWith single page applications, if you thoroughly update content and functionality, the page title needs to be dynamically updated, as well. This can be done in scripting using document.title = \"My new title.\";.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-9",
    "Summary": "Button does not have a focus indicator",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nThe purpose of links must make sense within context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nLinks that open a new window do not make this behaviour known to all users. Note that the examples provided below does not include every instance on the pages. \n\n## \n\nThis happened on the logon page, on the email, password, and help link. \n\n![Links that open in a new window](image.png)\n\n![Markup of links](image1.png)\n\nThis also happened on the Virgin Media Best Bits page \n\n![Link and markup that opens in a new window](image2.png)\n\n## \n1. navigate onto the above links \n2. observe that their purpose may not be obvious from their text or label\n\n## \n\nThe link text should be made obvious that it opens in a new window. For example, For example: \n```\n<a href=\"#\"> Help on private browsing (opens in a new window)</a>. \n```\nAlternatively, you could use an icon with an alt text. For example, \n```\n<a href=\"#\">Help on private browsing<img src=\"...\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [W3C - Giving users advanced warning when opening a new window](https://www.w3.org/TR/WCAG20-TECHS/G201.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-21",
    "Summary": "Related elements are not grouped semantically",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nSome users rely on keyboard or swipe navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom.\n\nThe focus stays on the play button when the video overlay is shown. \n\n## \n\nOn the Virgin Best Bits page. On the \"Your Telly\" panel. \n\n![Focus stays on play button](image.png)\n\n## \n1. activate the play button\n2. observe that the focus stays on the play button\n\n## \n\nThe focus should be set to the modal -- E.g. on the close button, when the play button is triggered. This can be done using the `.focus` method. \n\nFor more information, see [MDN - focus method](https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/focus).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-6",
    "Summary": "Page has no main heading",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nCertain colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without accurate perception of colour or limited vision may struggle to perceive the content. Note that the examples provided below does not include every instance on the pages. \n\n## \n\nIt happened on the login page. \n\n![Email address, password and fotgotten details text lack colour contrast](image.png)\n\nIt also happened on the Virgin Media Best Bits page. \n\n![Text lacking colour contrast](image1.png)\n\n![Another example of text lacking colour contrast](image2.png)\n\n## \n1. navigate onto the pages affected\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nTry to avoid placing textual content on background images, as all parts of the textual content need a colour contrast ratio of 4.5:1 against the background. If this is necessary, ensure that there is a backing to the text. Provide a solid colour box behind the text which uses a colour that passes contrast with the text. It is then safe to use whatever image you want in the background. The intermediary box will protect the text from failing contrast requirements.\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-15",
    "Summary": "Focus changes on input field entry",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images may otherwise be miscommunicated by assistive technology or invisible to users.\n\nDecorative images are marked up using unnecessary alt text. \n\n## \n\nThis happened on the Virgin Best Bits page. On the images within the \"Your Broadband\", \"Your Telly\", and \"Your Phone\" tab panel. \n\nOn the \"Your Broadband\" panel. \n\n![Decorative images](image.png)\n\n![Markup of decorative images with unnecessary alt text](image1.png)\n\nOn the \"Your Telly\" panel. \n\n![Decorative image](image2.png)\n\n![Markup of decorative image with unnecessary alt text](image3.png)\n\n## \n1. inspect the decorative image\n2. confirm that it has uncessary alt text \n\n## \n\n Images that do not carry such meaning (e.g. images used for background styling, stock images that do not add to ones understanding of the page, etc.) need an empty alt attribute. For example: `<img src=\"image.png\" alt=\"\">`\n\nHow to support different types of images is communicated in further depth by the W3C. See [Web Accessibility Tutorials - Images](https://www.w3.org/WAI/tutorials/images/). They also provide a [decision tree to explain how to fill the alt attributes](https://www.w3.org/WAI/tutorials/images/decision-tree/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7902-19",
    "Summary": "Headings are potentially not descriptive",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "High",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Virgin Media",
    "Description": "## \n\nSome users rely on keyboard or screen reader navigation. These users need a predictable, logical focus order. They will generally expect to navigate through elements left-to-right and top-to-bottom. Users may not be aware of the new overlay, or feel confused when navigating through items in the background. \n\nUsers can tab with a keyboard onto interactive elements outside of the video overlay, where the background has been blurred. iOS VoiceOver users are also able to swipe onto elements outside of the video overlay. \n\nThis may confuse sighted keyboard/ VoiceOver users who navigate the page using a keyboard/ swipe navigation, as items behind a blurred overlay receive focus. \n\nThis has been given a high priority because the close button is not focusable using a keyboard only on a desktop. \n\n## \n\nOn the Virgin Best Bits page. On the play video modal. \n\n![Series link receiving keyboard focus](image.png)\n  \n## \n1. Tab through the above pages using just your keyboard.\n2. Observe that the interactive background elements may receive keyboard/ swipe focus.\n\n## \n\nKeyboard and VoiceOver focus should be contained in the modal using the techniques below:\n\n* Hide background content that is not currently visible from screen readers using the `aria-hidden` attribute.\n* All actionable elements in the background should be assigned with `tabindex=“-1”` to remove the elements from the focus order.\n* When the modal is closed remove the `aria-hidden` and `tabindex=“-1”` attributes from the background elements so that the user can logically focus on them.\n\nAlternatively, use the WICG `inert` polyfill. See [WICG inert polyfill on Github](https://github.com/WICG/inert) and [Intro to the inert attribute](https://dev.to/hybrid_alex/intro-to-the-inert-attribute-3d25), which performs the same action.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-45",
    "Summary": "Pages do not have a descriptive title",
    "Success Criteria": "Additional Issue",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nElements must be entirely compatible with just a keyboard. Do not relying on mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. The dropdown element cannot be operated with a keyboard. \n\n## \n\nOn page 13, the following dropdowns are not keyboard operable: \n\n* \"Please select your reason for enquiry\"\n* Title\n* Your location\n\n![Dropdowns that are not keyboard operable](image2.png) \n\n![Markup of dropdown](image1.png)\n\n## \n1. navigate onto the above pages\n2. using a keyboard (and only the keyboard) attempt to operate the dropdown\n3. note that inputs or controls cannot be operated with a keyboard.\n\n## \n\nUse native element `<select>` to markup the dropdown. For more information, see [MDN - Select element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select) \n\nAlternatively, in native elements cannot be used, the following are required for keyboard support:\n\n* scripted event listeners that support key presses\n* Use `tabindex=\"0\"` on elements that should receive focus\n* Ensure that focus is visible when the element receives focus.\n* Use WAI-ARIA roles and states, to also communicate how the widget works to assistive technology users.\n\nFor more information, see [W3 - Dropdown Pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox) and [W3 - Collapsible Dropdown Listbox Example](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7488-13",
    "Summary": "Item selector buttons are not descriptive",
    "Success Criteria": "2.4.6: Headings and Labels [AA]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen headings and labels are used, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged. For example, screen reader users often navigate through headings as a way of ascertaining page structure.\n\nThe \"payment\" heading is not descriptive of the screen's purpose. On Android, the same heading is defined as \"Payment cancellation\".\n\n## \n\nOn the payment cancellation heading on the top of the screen. \n\n![payment cancellation heading not descriptive on iOS](image.png)\n\n![the heading on android](image1.png)\n\n## \n1. navigate to the above heading\n2. note they do not descriptively describe the topic or purpose of the screen\n\n## \n\nUse descriptive headings to communicate topic and purpose, as it is done on Android.\n\nFor example: \"Payment cancellation\". \n\nThe W3C provides further guidance on writing and providing effective headings\n\n* [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure)\n* [Providing descriptive headings](https://www.w3.org/TR/WCAG20-TECHS/G130.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7488-15",
    "Summary": "Dropdown element does not have a programmatically associated label",
    "Success Criteria": "2.4.6: Headings and Labels [AA]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nWhen headings and labels are used, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged. \nThe edit button labels are not properly labelled.\n\n## \n\nOn the payment cancellation page, on the change deposit/ change deduct buttons. \n\n![Edit button not correctly resolved](image.png)\n \n## \n1. navigate through the above labels\n2. note they do not descriptively describe the topic or purpose\n\n## \n\nEnsure that edit buttons are appropriately labelled. \n\nFor example: \"Change deposited into\", \"Change deduct charges from\".\n \nThe W3C provides further guidance on writing and providing effective labels\n\n* [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure)\n* [Providing descriptive labels](https://www.w3.org/TR/WCAG20-TECHS/G131.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7322-2",
    "Summary": "Page title is not fully descriptive",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere is a visual description list that is not programmatically marked up. \n\n## \n\nOn the inward payment details section of the enter payer details and confirmation page.\n\n![Page 4 - Inward payment details](image.png)\n\n![Mark up of payment details list](image1.png)\n\n![Page 6 - Confirmation page details](image2.png)\n\n![Mark up of payment details list](image3.png)\n\n## \n1. navigate through the inward payments with a screen reader\n2. note the list structure is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\n```\n<ul>\n  <li>\n        <span>Original payment reference<span>\n        <span>ADVICE CONFIRMS</span>\n  </li>\n  <li>\n        <span>Date received</span>\n        <span>29 Sep 2020</span>\n  </li>\n</ul>\n``` \n\nAlternatively, you could use a description list to display and describe the terms. \n\n```\n<dl>\n    <dt>Original payment reference</dt>\n    <dd>ADVICE CONFIRMS</dd>\n     ...\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7322-3",
    "Summary": "Content order is illogical for payment processing steps",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere is an input field that is visually optional but is marked up as required for assistive technologies. The input field does not require an entry either to submit the form. \n\n## \n\nOn the Payer details section. On the Payer account number input field. \n\n![The optional Input field that has aria required](image.png)\n \n![Markup of the optional input field with aria required](image1.png)\n\n## \n1. navigate onto the above examples \n2. note that they do not include labels and instructions for all users.\n\n## \n\nIf the aforementioned field is mandatory, it should include an asterisk next to the label, as it is done for other input fields. Otherwise, remove the `aria-required=\"true\"` markup from the field.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7322-1",
    "Summary": "There is no skip link",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behavior or generally diminished support.\n\nThere is an element nesting issue.  A link element appears as a descendant of an element with the attribute `role=button`. \n\n## \n\nThis occurs on page 2,  \n\n![Page 2 flagging parsing error on Nu Html Checker](image.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-9",
    "Summary": "Reference numbers are announced as whole numbers",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere are text areas used within the website which have a character limit. As a user types characters into these textareas, the counter increases to inform them of how many characters are remaining. \n\nHowever, the update is not automatically announced for assistive technology users. While this is visible to sighted users, others may not be aware of the updates. This is raised as a low priority as the information is available directly under the text area sections.\n\n## \n\nOn page 4. On the \"Proposed field and title of the research project\" and \"Proposed supervisor\" controls. \n\n![Controls do not automatically announce characters remaining](image.png)\n\n![Markup of controls](image1.png)\n\n## \n1. using a screen reader, enter text in the text area.\n2. note that the counter updates visually but the changes are not exposed to assistive technology users.\n\n## \n\nEnsure that screen reader users are made aware of the character limit and the current character count automatically. Dynamic changes to character count can be exposed to screen readers using live regions. For example:\n\n```\n<span aria-live=\"polite\" aria-atomic=\"true\">100 characters remaining</span>\n```\n\nWe suggest that the live region is not updated whenever a new character is entered, as it may cause audio clutter which could be frustrating to screen reader users. Use logical breakpoints. For example, 150 characters remaining, 100 characters remaining, 50 characters remaining, 10 characters remaining, and 0 characters remaining.\n\n* use `aria-atomic=\"true\"` on the live region so that it announces \"characters remaining\" in addition to the decrementing number.\n* when there are above 50 characters remaining, mark up the live region as `aria-live=\"polite\"`. This is a polite announcement that can announce the number of characters remaining at specific breakpoints (e.g. 50% or 25%). For example \"100 characters remaining\", \"50 characters remaining\", etc.\n* when there are below 10 characters remaining, mark up the live region as `aria-live=\"assertive\"`. This is a ruder announcement that is for final breakpoints (e.g. 10% to 0%). For example, \"10 characters remaining\", \"9\", \"8\", etc.\n* ensure that if the user continues to type after 0 characters remaining that the live region \"0 characters remaining\" is repeated.\n \nFor more information, see [MDN: ARIA live regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions). For a live example, please see [GOV UK - Character Count](https://design-system.service.gov.uk/components/character-count/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-10",
    "Summary": "Spelling error in hidden label",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe tooltip button is not marked up as a tooltip. The tooltip has been correctly associated with the tooltip description using `aria-describedby`. However, it has an image role, rather than a role that communicates that it is an interactive element. \n\nThis has been raised as a low priority issue as the role has been added as an `alt` attribute. \n\n## \n\nThis can be seen on pages 4 and 20 with all of the tooltips. \n\n![Tooltips that are not marked up with tooltip role](image1.png)\n\n![Tooltip marked up as an image](image2.png)\n \n## \n1. inspect the tooltips\n2. note that they are images with an image role\n\n## \n\nIf possible, build these with native `<button>` elements. This will come with more out of the box accessibility, including a button role. For more information, see [Inclusive Components - Tooltips and Toggletips](https://inclusive-components.design/tooltips-toggletips/).\n\nYou could instead use `role=\"button\"` to manually identify the button role. For more information, see [WAI ARIA Practices - Button Examples](https://www.w3.org/TR/wai-aria-practices-1.1/examples/button/button.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-4",
    "Summary": "Forms > Date Picker - Selected state is not programmatically determined",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe current application step \"User Details\" is highlighted using bold text. The current step is not programmatically declared and as such, this information is not communicated to assistive technology users. \n\n## \n\nOn the \"Logout, Course search, User Details, Application Form\" global component. \n\n![User details current step is not programmatically determined](image1.png)\n \n![Markup of user details current step](image.png)\n\nOn the 10 application steps. The current step is visually indicated by the green highlight.\n\n![Application type current step is not programmatically determined](image2.png)\n\n![Markup of application type current step](image3.png)\n\n## \n1. navigate onto the mentioned elements in the DOM\n2. note that the current application step is not programmatically determined\n\n## \n\nEnsure that the current application step is programmatically determined. Use the `aria-current = \"step\"` attribute. Ensure that the value of the `aria-current` attribute is dynamically updated when another step is selected. For example:\n\n``` \n<ol>\n   <li>\n      <strong>\n      <a href=\"#\" aria-current=\"step\">User Details</a>\n      </strong> \n   </li>\n   ...\n</ol>\n```\n\nFor more information regarding`aria-current` attribute, see [Accessible Developer Guide - ARIA current](https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/current/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-1",
    "Summary": "Logo not communicated to assistive technologies",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviate from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nThere are nesting issues relating to: \n* Element `style`  as a child of element `div`\n* Element `br` as a child of element `ul`\n* Using duplicate IDs\n\n## \n\nThis can be seen on several pages. During testing, it was identified on pages 3 to 6. \n\n![Page 3 - The page with parsing errors](image1.png)\n\n![Page 3 - Parsing errors flagged by Nu HTML checker](image.png)\n\n![Page 4 - The page with parsing errors](image3.png)\n\n![Page 4 - Duplicate IDs](image2.png)\n\n## \n1. take the base URL OR copy the generated page source.\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n\n## \n\nPages must use code that is nested correctly and used to specification. Validation via the W3C validation tool is useful for highlighting possible errors in these areas, but it also highlights pages for failing other issue types, as well.\n\nMake sure that elements have a unique id. For example: \n\n```\n<button id=\"red\">incomplete</button>\n<button id=\"green\">Complete</button>\n```\n\nFor more information, see [MDN - Debugging HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML) and [WHATWG HTML Specification - Handing Parsing Errors](https://html.spec.whatwg.org/multipage/parsing.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-34",
    "Summary": "Heading not declared programmatically",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nUsers are able to add more qualifications. Pressing the \"Add another qualification\" visually renders a new group of form fields separated by space. This visually communicates the groups of elements. However, this grouping is not programmatically communicated. \n\n## \n\nOn page 9, Qualification page. Under the current and previous qualification section. \n\n![Another qualification added](image.png)\n\n![Markup of grouped fields](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the qualification controls are not grouped\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Each qualification section can be grouped using `role=\"group\"`. To provide additional context about each group, `aria-labelledby` can be used. For example: \n\n```\n<div role=\"group\" aria-labelledby=\"qualification\">\n    <!--  The value after qualification can be enumerated using JavaScript -->\n   <span id=\"qualification\">Qualification [1]</span> \n    <!-- Input fields, dropdowns, etc... -->\n</div>\n```\n\nFor more information, see [WAI Tutorials - Grouping Elements](https://www.w3.org/WAI/tutorials/forms/grouping/#associating-related-controls-with-fieldset).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-5",
    "Summary": "Screen reader focus order skips back button",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "List",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. There is a visual list that is not programmatically marked up. \n\n## \n\nOn page 3. On the \"My Details\" page. \n\n![List that is not programmatically determined](image.png)\n\n![Markup of list](image1.png)\n\nOn all pages. On the \"Logout, User Details, Application Form\" list. \n\n![List that is not programmatically determined](image2.png)\n\n![Markup of list](image3.png)\n\n## \n1. navigate through the inward payments with a screen reader\n2. note the list structure is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\n```\n<ul>\n  <li>\n        <span>Username (email address)<span>\n        <span>JAMES.KIRK@OX.AC.UK</span>\n  </li>\n  <li>\n        <span>Given name</span>\n        <span>James</span>\n  </li>\n</ul>\n``` \n\nAlternatively, you could use a description list to display and describe the terms. \n\n```\n<dl>\n    <dt>Username (email address)</dt>\n    <dd>JAMES.KIRK@OX.AC.UK</dd>\n     ...\n</dl>\n```\n\nFor more information see [MDN - Unordered List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul) and [MDN - Description List](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-13",
    "Summary": "Legend not announced on IE",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere are pages with skip links. As well, activating the skip link sets the keyboard focus on the main container. However, the main container is directly after the skip link. It does not bypass the small set of navigation links, such as \"Log out\" and \"User Details\". \n\nNote that we have raised this as an additional issue as the navigation only contains 3 links.\n\n## \n\nOn page 3. The skip link is on the top left of the page. \n\n![Skip link receiving keyboard focus](image.png)\n\n![Text \"Logged in....\" and \"Logout, User Details\", \"Application Form\" links is not skipped](image1.png)\n \n## \n1. Use the keyboard to tab onto the skip link\n2. Activate the link with Return\n3. Note that focus moves down the page\n4. Note that focus has no bypasses the navigation links\n\n## \n\nThe skip link needs to both move the page visually onto the main content and move the focus onto the main content. As well, it should move to a place that is useful for end-users. We suggest moving the focus after the small set of navigation links, such as \"Log out\" and \"User Details\". For example:\n\n```\n<a href=\"#sv-page-top\">Skip navigation</a>\n\n<nav>\n<!-- nav content -->\n  <a href=\"#\">Logout</a>\n</nav>\n\n<main id=\"sv-page-top\" tabindex=\"-1\">\n<h2>My Details</h2> \n</main>\n```\n\nFor more information, see [A11y Project - Use skip navigation links](https://www.a11yproject.com/posts/2013-05-11-skip-nav-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-11",
    "Summary": "Forms - Date picker - Component is not operable with a screen screen reader",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere are pages without working skip links. Screen reader, keyboard, and switch users cannot jump to the main content, which can be particularly frustrating if the header and/or navigation contain many links. Note that this issue is related to ADR_7555 - 11, as on page 3 there is a skip link which does not work correctly.\n\nNote that we have raised this as an additional issue as the navigation only contains 3 links.\n\n## \n\nThis can be seen on pages 4 to 13.  \n\n![Skip link not implemented](image.png)  \n  \n## \n1. keyboard tab from the top of the page on the above pages\n2. note that there is no option to skip the navigation block\n\n## \n\nThe skip link needs to both move the page visually onto the main content and move the focus onto the main content. As well, it should move to a place that is useful for end-users. We suggest moving the focus after the small set of navigation links, such as \"Log out\" and \"User Details\". For example:\n\n```\n<a href=\"#sv-page-top\">Skip navigation</a>\n\n<nav>\n<!-- nav content -->\n  <a href=\"#\">Logout</a>\n</nav>\n\n<main id=\"sv-page-top\" tabindex=\"-1\">\n<h2>My Details</h2> \n</main>\n```\n\nFor more information, see [A11y Project - Use skip navigation links](https://www.a11yproject.com/posts/2013-05-11-skip-nav-links/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-8",
    "Summary": "Typography - various sized headings all use h1 semantics",
    "Success Criteria": "Additional Issue",
    "Component": "Table",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. The \"Your course application\" table has an empty column. \n\nVisually, there is an empty column. However, it is smaller than the other columns. It visually looks like the table ends with \"Academic year\". It is therefore redundant to have an extra column exposed to assistive technology. \n\n## \n\nOn application form pages 4-13. On the \"Your course application\" table. There is an empty column to the right of \"Academic Year\".\n\n![Your course application table with empty column](image1.png)\n\n![Markup of the table with empty column](image.png)\n \n## \n1. navigate through the above examples with a screen reader\n2. note the empty column on the right of Academic Year \n\n## \n\nRemove the empty `<th>` and `<td>` elements from the table markup for the final column.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-3",
    "Summary": "Plain text within field receives individual focus",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nLinks do not explain to users that they open in a new window. With some of the links, there is an `alt` attribute used to communicate this information. However, the `alt` attribute is not valid on anchor tags. As a result, the text is not exposed to assistive technology.\n\nAs well, the information is not currently available to all users. Note this issue is related to ADR_7555 - 25.\n\n## \n\nOn the footer of all pages. On the navigation links. \n\n![Navigation links](image.png) \n\n![Markup of navigation links that open in a new window](image1.png)\n\nOn page 4. On the \"application guide\" and \"college preference\" links. \n\n![Page 4 - Links opening in a new window](image2.png)\n\n![Markup of links](image3.png)\n\n## \n1. navigate onto the above links using a screen reader\n2. note that the text \"this links opens in a new browser tab\" is not announced \n\n## \n\nWe strongly recommend adding a visual warning, such that all users gain access to the information. For example:\n\n```\n<a href=\"#\">Application Guide<img src=\"newWinIcon\" alt=\"Opens in a new window></span></a>\n...\n<a href=\"#\">Application Guide (Opens in a new window)</a> \n```\n\nFor more information, see [BBC - Links to Alternative Products](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/links-to-alternative-formats).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-31",
    "Summary": "Visually hidden element receives screen reader focus",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThere are buttons which do not have an accessible name. \n\n## \n\nOn page 6, Contact details page with the date picker buttons \n\n![Date pickers that do not have descriptive label](image.png)\n\n![Markup of date pickers with label \"...\"](image1.png)\n\n## \n1. Inspect the date picker\n2. In the DOM, note the lack of an accessible name.\n3. Confirm this by tabbing onto the button with a screen reader\n\n## \n\nMake sure that the element has an accessible name. This could be done with an `aria-label` using a `<button>`. For example:\n\n```\n<button aria-label=\"Choose Date\" ...> ... </button>\n```\n\nFor an example, see [WAI ARIA Practices - Date Picker Dialog](https://www.w3.org/TR/wai-aria-practices-1.2/examples/dialog-modal/datepicker-dialog.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-7",
    "Summary": "Forms - Sort Code - Legend has text label in accessible name",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The complete and incomplete states for each application step is not programmatically determined. \n\nVisually, a checkmark and cross are used to indicate the completeness of each step. However, this is not communicated to assistive technology. \n\n## \n\nOn pages 4 - 13. On the 10 application step links. \n\n![Check mark and cross uses to indicate the completeness of step](image.png)\n\n![Markup of application step links](image2.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that the complete and incomplete states are not communicated\n\n## \n\nEnsure that the complete/ incomplete state for each step is communicated to screen reader users. The information can be communicated to assistive technology users using techniques such as `aria-label` and hidden text. For example: \n\n```\n<a href=\"#\">Application type<span class=\"hidden\">Complete<span></a>\n```\n\n```\n<a href=\"#\" aria-label=\"Application type Complete\"></a> \n```\n\nWe suggest supporting the following states: current (see ADR_7555 - 4), incomplete, complete, and not started.\n\nNote that the first solution requires CSS to hide the text. The W3C provide a usable class. See: [Web Accessibility Tutorials - Hiding Elements](https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-25",
    "Summary": "Forms > Date Picker - Currently selected state described in colour",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nAn `alt` attribute is used as a content attribute within an `<a>` element. This has been raised separately from the other parsing issue as this is one where end-users are not getting access to information. In this case, information that the link opens in a new window.\n\n## \n\nOn the footer of all pages. On the navigation links. \n\n![Parsing error flagged by Nu Validator](image4.png)\n\n![Navigation links](image.png) \n\n![Markup of navigation links that open in a new window](image1.png)\n\n## \n1. navigate onto the above links using a screen reader\n2. note that the alt text is used within the anchor element `<a>`\n\n## \n \nEnsure that `alt` attribute is not used as a content attribute within the `<a>` element. Use a different technique for warning users about this behaviour. We strongly recommend adding a visual warning, such that all users gain access to the information. For example:\n\n```\n<a href=\"#\">Application Guide<img src=\"newWinIcon\" alt=\"Opens in a new window></span></a>\n...\n<a href=\"#\">Application Guide (Opens in a new window)</a> \n```\n\nFor more information, see the related issue ADR_7555 - 3.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-24",
    "Summary": "Tiles (Carousel) - Component does not have navigation buttons",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field, Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are sets of form fields. There is a dropdown for selecting a country code and then an input field for entering a phone number. This grouping is visually communicated and the form fields are placed next to text that label them.\n\nHowever, the form fields are not programmatically associated with their visual label. \n\n## \n\nOn the \"Email and telephone Numbers\" section of the \"Contact details\" application step. On the \"Telephone number and alternative telephone number\" controls.\n\n![Telephone number and alternative telephone number controls](image.png)\n\n![Markup of controls and visual label](image1.png)\n \n## \n1. navigate through the above examples with a screen reader\n2. note the label is not associated with the controls\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Make sure that the form fields are associated with the visual labels. This can be done with `aria-labelledby` which can be used to label multiple elements. \n\nTo help differentiate the elements, we have suggested adding a \"Country code\" label. If you do not want to add this to the page, this could be implemented as hidden text. For a class that can be used for this, see [WAI Tutorials - Hiding the Label Element](https://www.w3.org/WAI/tutorials/forms/labels/#hiding-the-label-element).\n\n```\n<div id=\"phone\">Telephone number</div>\n<div id=\"phoneCode\">Country Code</div>\n<select aria-labelledby=\"telephoneID phoneCode\">\n   ...\n</select>\n<input type=\"text\" aria-labelledby=\"telephoneID\">\n\n<div id=\"altPhone\">Alternative Telephone number</div>\n<div id=\"altPhoneCode\">Country Code</div>\n<select aria-labelledby=\"altPhone altPhoneCode\">\n   ...\n</select>\n<input type=\"text\" aria-labelledby=\"altPhone\">\n```\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7555-23",
    "Summary": "Tiles (Carousel) - Component is not keyboard operable",
    "Success Criteria": "Additional Issue",
    "Component": "Table",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "University of Oxford",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. There are headings that are not programmatically marked up. \n\nNote that this has been raised as an Additional Issue as these elements use the `<caption>` tags, which is essentially a heading for a table.\n\n## \n\nOn page 4. On \"Your current application\", \"Application types\", \"Types of application\". The same issue can be seen across the journey on pages 4, 5, 6, 7, 8, 9, and 13.\n\n![Section headings not marked up](image.png)\n\n![Markup of section heading](image1.png)\n \n## \n1. Visually note the elements categorise the content\n2. Inspect the elements\n3. Note the lack of heading semantics \n\n## \n\nIn HTML5, it is valid to nest a heading within a caption. This will provide users will more information about the structure of the page. \n\n```\n<caption>\n<h2> Your current application</h2>\n</caption>\n```\n\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-5",
    "Summary": "Forms - Number Stepper - Updated value is not communicated by screen reader",
    "Success Criteria": "Additional Issue",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. There are dropdown lists that do not support the standard pattern for keyboard interaction. The \"Show history\" and \"Custom date range\" dropdowns are not operable using the arrow keys. Keyboard users have to tab through each of the items. \n\n## \n\nOn page 1, on the dropdown list at the top of the page. \n\n![Dropdown lists which are not operable using arrow keys](image.png)\n\n![Markup of the dropdown list](image1.png)\n\n## \n1. Navigate onto the above elements\n2. Using a keyboard (and only the keyboard) attempts to operate the above components.\n3. Note that it is not possible to navigate within these controls using the keyboard arrow keys.\n\n## \n\nEnsure that the dropdown list items can be navigated using arrow keys. The best approach would be to use the native HTML `<select>` element. Otherwise, implement the [WAI ARIA - Dropdown Pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox), such as the [Collapsible Dropdown Listbox Example](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-42",
    "Summary": "Forms - Segmented Control - Dropdown options are incorrectly announced",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. There is a \"Read more\" link does not describe its purpose.  It passes conformance as the nature of the link can be understood through the context. \n\nHowever, it would better to have self-expanatory link text.\n\n## \n\nThis occurs on the content page (Transaction Banking), on the \"Read more\" link under the Renminbi internationalisation text. \n\n![Read more link that is not descriptive](image.png)\n\n![Markup of the \"read more\" link](image1.png)\n \n## \n1. navigate onto the above links \n2. observe that their purpose may not be obvious from their text\n\n## \n\nThe link purpose can also be made obvious by providing context. It can be amended to benefit all users. If the purpose is visually communicated, additional information can assist non-visual users. When the context is an above heading, it can be useful to use `aria-describedby`. For example: \n\n```\n<h3 id=\"context\">Renminbi internationalisation</h3>\n<a href=\"...\" aria-describedby=\"context\">Read more</a>\n```\n\nFor more information, see [MDN - using aria-describedby](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-47",
    "Summary": "Forms - Input Signature - Functional image does not have a descriptive alt text",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within the context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links, review the page, and navigate back.\n\nLinks that open a new window do not make this behaviour known to all users.\n\n## \n\nOn page 13, on the Premier banking link. \n\n![Premier banking link opens in another window](image.png)\n \n![Markup of the find more link](image1.png)\n\n## \n1. inspect the above link\n2. note that there is nothing that communications that it opens in a new window\n\n## \n\nThe link text should be made obvious. For example, For example: \n\n``` \n<a href=\"#\">Premier Banking (opens in a new window)</a>\n```\n\nAlternatively, you could use an icon with an alt text. For example:\n\n```\n<a href=\"#\">Premier Banking<img src=\"...\" alt=\"opens in a new window\"></a>\n```\n\nFor more information, see [BBC - Links to Alternative Formats](https://www.bbc.co.uk/accessibility/forproducts/guides/mobile/links-to-alternative-formats).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-46",
    "Summary": "Spinner - Loading message is not dynamically communicated to screen reader users",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. There are form fields that are not programmatically associated with their visual labels. \n\n## \n\nOn page 13, on the \"Your Details\" form fields. This issue applies to all input fields on the page. \n\n![Form fields that do not have programmatically associated labels](image.png)\n\n![Markup of form field](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the labels are not programmatically associated with the input fields. \n\n## \n\nUse the `<label>` element and associate the labels with their respective fields using `for` and `id` attribute. For example:\n\n```\n<label for=\"firstname\">First Name *</label>\n<input type=\"text\" name=\"firstname\" id=\"firstname\"> \n```\n\nFor more information, see [WAI Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-23",
    "Summary": "Forms - Datepicker - Potential error with error text",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nUsers should be made aware of any important status updates on the page. \n\nA message should be provided to users based on the result of activities, such as the triggering search results using the filter function. Currently, when a message is displayed showing 'no results found', this is not announced automatically for screen reader users. \n\n## \n\nOn page 16 - Results and presentation, in the filter & search section. There is a message notifying the user that no results were found. \n\n![Message](image.png)\n\n![Message DOM](image1.png)\n\n## \n1. Navigate to the search & filter section with a screen reader.\n2. Select an option which will result in a 'no results found' message.\n3. Observe that the message will not be automatically announced. \n\n## \n\nEnsure that when status messages are displayed, they are programmatically identified in a way that allows assistive technologies to present them to the user. Include a `role=\"status\"` region that will inform a screen reader user of a search results status. \n\n```\n<div role=\"status\">\n        <h2>Sorry, no results were found for the selection you made</h2>\n         ...\n</div>\n```\n\n**NOTE** the `aria-live` region must be present on the page on first load, and must not dynamically change when the content changes. \n\nFor more information, refer to: [MDN web docs: ARIA live regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions)\n\nFor more information about Status Messages see:\n\n*  [W3 - Understanding Success Criterion 4.1.3: Status Messages](https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html).\n\n*  [W3 -technique on how to use the role=status to present status messages ](https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA22).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-9",
    "Summary": "Forms - Input Autocomplete - Option value not announced",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nLinks do not communicate that users will be redirected to a page in a new window. It can be often confusing or time-consuming for keyboard users to navigate back to a different window and some users may not be aware of context change. \n\n## \n\nOn the accept cookies banner on all pages. \n\n![Cookies](image.png)\n\n![Code](image1.png)\n\n## \n1. Navigate to the above pages.\n2. Observe that no cues that links will open in a new window are provided or announced using a screen reader.\n\n## \n\nEnsure to inform users that a link will open in a new window. Use an icon with an alternative text to communicate this, or append the information onto the existing text to at least inform this information to screen reader users. \n\nThis has been implemented correctly on the footer component. \n\n![Footer example](image2.png)\n\nFor example:\n \n```\n<a href=“\" target=“_blank”…>\n   <img alt=”Opens a new window” />\n</a>\n\n<a href=\"\" target=\"_blank\" aria-label=\"Text (Opens in a new window)>Text\n</a> \n```",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-38",
    "Summary": "Table - the checkbox role of checkboxes are not programmatically determined",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users.  \n\nA visual heading does is not marked up programmatically, and therefore does not provide the heading structure for screen reader users. \n\n## \n\nOn page 11 (News landing page). On the story card title. \n\n![Heading structure](image.png)\n\nOn page 11. On the story hero title. \n\n![Hero title](image1.png)\n\n![Hero code](image2.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the heading is not communicated.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Use text in heading levels such as `<h2>` or `<h3>` to describe the story heading and description.\n\nMore further guidance, see [WAI - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-36",
    "Summary": "Table - the checked state of checkboxes are not programmatically determined",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe search button lacks a programmaticly determined name and role, which prevents screen reader users from being able to perceive its purpose and operation. \n\n## \n\nOn page 11 (News landing page), on the search search button on the in-page navigation menu. \n\n![Search button](image.png)\n\n![Search button DOM](image1.png)\n\n## \n1. Navigate onto the above element with a screen reader.\n2. Note that its purpose and operation are not entirely communicated.\n\n## \n\nEnsure that the button is semantically marked up. Use standard HTML elements such as `<button>`. The level of assistive technology support they provide is the most effective way to provide accessibility. Ensure that you provide a descriptive accessible name such as \"Search\".",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-44",
    "Summary": "Sticky Footer - Component could potentially obscure background elements",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Cognitive",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are required, instructions must be provided. While the required fields are visually identified with an asterisk, there is no text on the page that explains the purpose of this character. \n\n## \n\nOn page 13, where the purpose of the asterisk character is not explained. \n\n![The form which does not explain the purpose of asterisk character](image.png)\n\n## \n1. navigate onto the above examples \n2. note that there is no text on the page that explains the purpose of the asterisk character\n\n## \n\nEnsure that you provide an instruction such as \"Fields that are marked with an asterisk (*) are required\" to explain the purpose of the asterisk character. \nThis instruction can be placed on top of the form. E.g. under the \"please complete the form below and we'll be in touch\" text.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-49",
    "Summary": "Forms - Selects - Text content loss on reflow",
    "Success Criteria": "3.3.1: Error Identification [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nErrors must described in text and compatible with assistive technology. Users may otherwise be unaware when they occur. Error messages are visually rendered when the form is submitted with an invalid entry. This message is not automatically communicated to assistive technology users. \n\n## \n\nOn page 13, on the \"Contact us\" form input fields. For example:\n\n![Please select your title error message is not associated with the input field](image.png)\n\n![Markup of the error message and input field](image1.png)\n\n## \n1. prompt the above errors\n2. note that they are not announced by screen readers\n\n## \n\nEnsure that errors are associated with their relevant controls. Screen readers will announce an error when a control associated with an error receives focus. This can be done with `aria-describedby`. For example: \n\n```\n<label for=\"title\">Title</label>\n<input type=\"text\" id=\"title\" aria-describedby=\"titleError\">\n<span id=\"titleError\">Please select your title</span>\n```\n\nAs well, ensure that all users are told when errors appearing dynamically on the screen using alerts. For example: \n\n```\n<span role=\"alert\">Please select your title</span>\n```\n\nFor more information, see [Web Accessibility Tutorials - User Notifications](https://www.w3.org/WAI/tutorials/forms/notifications/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-48",
    "Summary": "Forms - Datepicker - Heading not semantically marked as a heading",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nThe asterisk character colour does not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without accurate perception of colour or limited vision may struggle to perceive the content\n\n## \n\nOn page 13, on the form fields with asterisks. \n\n![Asterisks text against the background has a colour contrast ratio of 4:1](image.png)\n\n## \n1. navigate onto the pages affected\n2. with a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-43",
    "Summary": "Forms - Dropdown does not have arrow",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. There is a button that do not indicate focus.\n\n##  \n\nOn page 13, on the \"Call an advisor\" button under the \"Prefer to call us?\" text\n \n![Call an advisor button does not indicate focus](image.png)\n \n## \n1. keyboard tab onto the above elements\n2. note that there is no visible focus indication \n\n## \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not this `a { outline: none; }`. \n\nFor more information, see [CSS Tricks - Focusing on focus styles](https://css-tricks.com/focusing-on-focus-styles/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-50",
    "Summary": "Forms - Pagination items are not marked up as a list",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe related radio buttons and checkboxes are not semantically grouped together. \n\n## \n\nOn page 13, on the \"Investable Assets\" radio buttons and \"Your interests\" checkbox within the \"Contact us\" form. \n\n![Related elements that are not grouped](image.png)\n\n![Markup of the checkboxes](image1.png)\n\n![markup of the radio buttons](image2.png)\n\n## \n1. select the \"I would like to open a private bank account\" dropdown item to get the radio group\n1. navigate through the examples with a screen reader\n2. note the grouped relationship is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Grouping related controls will make the forms more understandable as they are easier to identify. \n\nThe checkboxes and radio buttons can be grouped by associating related controls with `<fieldset>`. For example:\n\n```\n<fieldset>\n  <legend>Investable Assets</legend>\n  <label for=”Option1”>USD 5m+</label>\n  <input name=\"assets\" type=\"radio\"  id=\"Option1\" value=\"\" checked>\n …\n</fieldset>\n```\n\nAlternatively, you can define a group using `role=\"group\"`, with an `aria-labelledby` attribute referencing the `id` of a text that will serve as the label. \n\nFor more information, see [W3C - Grouping Controls](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6641-39",
    "Summary": "Icons Folder - Icons do not have sufficient colour contrast",
    "Success Criteria": "Additional Issue",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere is no main `h1` heading on the page. While not required for conformance, it is considered best practice for a page to have a single `h1` heading. The logical choice for this would be 'HSBC Private Banking' text which is currently marked up as a `h2` heading.\n\nThis issue is resolved on pages tested in previous sprints. The new instances of the issue which are found will be reported here. \n\n## \n\nThis can be seen on the investment Insights – Investment tips page. \"Investment tips\" is the first heading on the page which is marked up as a `h2` heading.\n\n![Page that lacks a main h1 heading](image.png)\n\n![Page heading hierarchy with no h1 heading](image1.png)\n\n![Markup of first heading on the page with h2 markup](image2.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note there is no main heading on the page\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\nWe recommend that the Investment tips text is marked up as an `h1` element and that the page title closely matches this. This would necessitate ensuring that the hierarchy of the other headings makes sense. For example, the article headings should be marked up using `<h2>` to ensure that heading levels are not skipped. \n\nFor more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "IPAB-4",
    "Summary": "Forms - Input Signature - Button border lacks colour contrast",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on swipe navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The current focus order is illogical as the focus changes to a different position on the screen after an input field is entered, instead of staying on the input field or moving onto the next input field. \n\n## \n\nOn entering a value into the input field, the focus moves onto the element \"For security reasons...\" which is located on the top of the screen. \nObserve below as to how the VoiceOver focus is set to a component on the top of the screen after inputting the value `5` into the input field for 6-digit authorisation code. \n\n![input field value entered](image.png) \n\n## \n1. tab through the above pages  and enter value into the input field\n2. observe that the focus order isn't logical\n\n## \n\nEnsure that the screen reader focus stays on the input field where the input value was entered, or moves it onto the next input field- which is the behaviour on Android.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_5113-3",
    "Summary": "Forms - Pagination not defined as a navigation region",
    "Success Criteria": "2.4.6: Headings and Labels [AA]",
    "Component": "Heading",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Saville Assessment",
    "Description": "## \n\nWhen headings, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged. For example, screen reader users often navigate through headings as a way of ascertaining the structure and content of a page.\n\nThe assessments main heading is not descriptive on both the example and assessment question pages. \n\nThere is also a visible question number on each assessment that could be considered a heading. While instructions are provided at the start of the form, users are required to remember this information which may present problems for those with cognitive  or memory disabilities.\n\n## \n\nOn the recall question and abstract question, the heading is 'Examples'.\n\n![visually hidden 'examples' heading](image.png) \n\n![markup of the visually hidden heading](image1.png)\n\nOn the recall and numerical assessment question, the heading is 'Assessment'.\n\n![visually hidden 'assessment' heading](image4.png)\n\nIn both the examples and assessment, the question subheading headings are numbers, such as \"2.\".\n\n![question heading is not descriptive](image2.png)\n\n![markup of the question heading](image3.png)\n\n## \n1. navigate through the above headings \n2. note they do not descriptively describe the topic or purpose\n\n## \n\nUse descriptive headings and labels to communicate topic and purpose. \n\nFor example, the headings could be updated to \"Recall Examples\" and \"Recall Assessment\" respectively. The question subheading could be used to give further context, such as \"Question 1\"', or more explicitly \"Question 1: What is the missing number in this sequence?\".\n\nThe W3C provide further guidance on writing and providing effective headings and labels. See [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure) and [Providing descriptive headings](https://www.w3.org/TR/WCAG20-TECHS/G130.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_5113-1",
    "Summary": "Forms - Upload button receives keyboard focus twice",
    "Success Criteria": "2.4.2: Page Titled [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Saville Assessment",
    "Description": "## \n\nGood page titles have several benefits. For example, when pages load, screen readers announce page titles. It is used to orientate such users — communicating the nature of the loaded page. All users use page titles in a similar fashion, and benefit from unique and helpful page titles.\n\nThe page titles for the assessments are identical and also do not accurately describe their purpose of the page. \n\n## \n\nThis can be seen on all pages. The page title is always \"Saville Assessment Aptitude\".\n\n![Page title is not descriptive](image1.png)\n\n![Markup of page title](image.png)\n \n## \n1. navigate onto any page in scope\n2. note the inappropriate page title\n\n## \n\nEnsure that pages have unique and helpful page titles.\n\nThis can be done with a `<title>` in the `<head>` section. Consider a page name, page category, site name format. For example: `<title>Question 4, Recall assessment 1 - Saville Assessment Aptitude</title>`. Whatever format you use, use it consistently throughout. \n\nWith single page applications, if you thoroughly update content and functionality, the page title needs to be dynamically updated, as well. This can be done in scripting using `document.title = \"My new title.\";`.\n\nIf you cannot update the page title for every page, make sure to at least do it for every high-level category. For example, update it as the user moves between pre-assessment, during the assessment and post-assessment, and ideally on each category with the assessment.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_5113-2",
    "Summary": "Forms - DualDatepicker - Ranges described in colour",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Saville Assessment",
    "Description": "## \n\nWhen headings and labels are used, ensure that they are appropriately descriptive. Users that rely on them may otherwise be disadvantaged. The item selector buttons are only labeled by enumeration. For example, \"1\", \"2\", and so on. These accessible names are not descriptive. \n\n## \n\nOn the item selector buttons, on the top left of the page. \n\n![Item selector buttons](image.png)\n\n![Markup of item selector](image1.png)\n\n## \n1. navigate through the above labels\n2. note they do not appropriately describe the purpose of the buttons\n\n## \n\nUse descriptive headings and labels to communicate topic and purpose. Ensure that they adequately describe the control or expected input. For example:\n\n```\n<ul>\n<li><button aria-label=\"Question 1 of 4\"...></li>\n...\n</ul>\n```\n\nFor more information, see [Tips on Writing for Web Accessibility](https://www.w3.org/WAI/gettingstarted/tips/writing.html#use-headings-to-convey-meaning-and-structure) and [Providing descriptive labels](https://www.w3.org/TR/WCAG20-TECHS/G131.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-22",
    "Summary": "Forms - Date Select - Parsing error due to invalid nesting",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be programmatically labelled. Otherwise, screen readers will announce them without explaining what the user is expected to input.  \n\nThere are dropdown lists that do not have programmatically associated labels. The \"Show history\" dropdown is associated with its label using `for` and `id`. \nHowever, as the dropdown is not marked up as a labellable element (`div`), the association is not valid. \n\n## \n\nOn page 1, on the dropdown list at the top of the page. \n\n![Dropdown list which does not have a programmatically associated label](image.png)\n \n![Markup of the dropdown list showing invalid label association](image1.png)\n\n## \n1. Navigate onto the above examples \n2. Note that they do not include labels and instructions for all users.\n\n## \n\nEnsure that dropdown lists are programmatically associated with their label. For example:\n\n```\n<label for=\"showHistory\"> Show history </label>\n<select id=\"showHistory\">\n     <option> ... </option>\n     ...\n</select>\n```\n\nAlternatively, you can use `aria-labelledby` on a button as the parent toggle element. For more information on this implementation, see [WAI ARIA Examples - Collapsible Dropdown Listbox Example](https://www.w3.org/TR/wai-aria-practices-1.2/examples/listbox/listbox-collapsible.html)\n\nTo see the elements which are labellable, see [HTML Spec - Label](https://html.spec.whatwg.org/multipage/forms.html#category-label). The W3C provides further guidance. See: [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/) and [Web Accessibility Tutorials - Grouping Elements](https://www.w3.org/WAI/tutorials/forms/grouping/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-13",
    "Summary": "Forms - Checkboxes  - Parsing error due to invalid nesting",
    "Success Criteria": "2.4.2: Page Titled [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nGood page titles have several benefits. For example, when pages load, screen readers announce page titles. It is used to orientate such users — communicating the nature of the loaded page. All users use page titles in a similar fashion and benefit from unique and helpful page titles.\n\nThe page titles lack a reference to the HSBC.\n\n## \n\nFor example, on page 1:\n\n![The page has a title of \"Outgoing payments tracker\"](image1.png)\n\n![Title markup](image.png) \n\n## \n1. navigate onto the above page\n2. note the lack fo reference to the company\n\n## \n\nEnsure that a reference to the company is added to the title. \n\nThis can be done with a `<title>` in the `<head>` section. Consider a page name, page category, site name format. For example: `<title>Outgoing payments tracker | Payments | HSBC</title>`. Whatever format you use, use it consistently throughout. \n\nWith single-page applications, if you thoroughly update content and functionality, the page title needs to be dynamically updated, as well. This can be done in scripting using `document.title = \"My new title.\";`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-14",
    "Summary": "Tiles - Tiles as link has a nested button",
    "Success Criteria": "1.3.2: Meaningful Sequence [A]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nA meaningful sequence is important for those that use keyboards to navigate. \n\nWhen using keyboard arrow keys, the screen reader cursor is set on the text \"HSBC, 2nd Sep 2020\", followed by the \"Beneficiary Bank\", and then the \"Received date*\". Visually, the \"received date*\" is placed first in the payment processing step to indicate when the payment was sent. However, it is the last text in sequence. \n\n## \n\nOn page 1 on the payment expanded accordion. \n\n![sequence order is illogical](image.png)\n\n## \n1. navigate through the above example using the arrow keys\n2. note the illogical sequence\n\n## \n\nReorganise the visual layout and the DOM structure. Refer to guidance from the W3C on [Ordering the content in a meaningful sequence](https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/G57). The visual layout and DOM structure must correspond. For example:\n\n```\n<div>\n  <div>Received date*</div>\n  <p>HSBC</p>\n  <p>2 Sep 2020</p>\n</div>\n```",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-15",
    "Summary": "Forms - Time Picker - Parsing error due to invalid nesting",
    "Success Criteria": "Additional Issue",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are pages without working skip links. Screen reader, keyboard, and switch users cannot jump to the main content, which can be particularly frustrating if the header and/or navigation contain many links.\n\nThis has been marked as an additional issue as the header and navigation menu are out of scope. So technically, it is not a WCAG failure on the content in scope. However, it should be implemented. Otherwise, the overall page would fail WCAG.\n\n## \n\nThis can be seen on page 1. \n\n![There is no skip link](image.png)\n\n## \n1. keyboard tab from the top of the page on the above page(s)\n2. note that there is no option to skip the navigation block\n\n## \n\nThe skip link need to both move the page visually onto the main content and move the focus onto the main content — e.g. either onto the main container or onto the first element within the main container.\n\n```\n<a class=\"sr-only sr-only-focusable\" href=\"#main\">Skip to content</a>\n<nav>\n<!-- nav content -->\n</nav>\n<main id=\"main\" tabindex=\"-1\">\n<!-- main content -->\n</main>\n```\n\nYou can use CSS to visually hide the skip link; while the skip link can be hidden by default, it needs to be visible when it receives focus. This is to benefit sighted keyboard and switch users. Use the `focus` and `active` pseudoclasses to make the link visible when it receives focus. \n\nFor more information, see [WCAG Techniques - Skip link](https://www.w3.org/WAI/WCAG21/Techniques/general/G1.html) and [CSS Tricks - How to create a \"skip to content\" link](https://css-tricks.com/how-to-create-a-skip-to-content-link/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-9",
    "Summary": "Forms - Sort Code - Parsing error due to invalid nesting",
    "Success Criteria": "Additional Issue",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nReference number, Debit account, and beneficiary account values are communicated as whole numbers while using a screen reader. \n\nFor example, the reference number \"HK102090BI875434\" is announced as \"HK102090BI-eight hundred and seventy-five thousand four hundred and thirty-four\". This may confuse users who may not understand the context of account numbers.\n\n## \n\nOn page 1, on the outgoing payments tracker table. \n\n![Numbers which are communicated as whole numbers](image.png)\n\nOn pages 4 and 5, the Reference numbers are also announced as above.\n\n## \n1. navigate to the above numbers with a screen reader\n2. note that they are announced as a single number, not as separate digits\n\n## \n\nEnsure that the digits are announced separately, instead of as a single number. This can be achieved using an `aria-label` or a hidden label, which individually spells out the digits, for example, \"H K 1 0 2 0 9 0 B I 8 7 5 4 3 4\".",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_7132-8",
    "Summary": "Forms - Digital signature field does not have a focus indicator",
    "Success Criteria": "Additional Issue",
    "Component": "Dropdown",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere is a spelling error in the hidden label. This will not cause any major difficulties to screen reader users as the mistake is subtle. \n \n## \n\nOn page 1, on the custom date range dropdown. \n\n![Dropdown element with typo](image1.png)\n![Markup of the dropdown with typo](image.png)\n \n## \n1. Navigate to the mentioned element\n2. Observe that \"select\" is spelt incorrectly\n\n## \n\nEnsure that the spelling error is fixed. Change \"selecte\" to \"select\".",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-125",
    "Summary": "Forms - Dropdown List - Accessible name does not match visual label",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. \n\nThe currently selected state of the date is not programmatically determined. \n\nNote that this issue overlaps with ADR_6560 - 126. That issue is that the selected date needs to be visually communicated in a way that does not rely on colour. This issue is about the selected date needing to be programmatically determined. \n\n## \n\nForms > Date Picker - Default\n\n![Currently selected date - 8th July 2020](image.png)\n\n![Markup](image1.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. note that the currently selected state of the date is not communicated.\n\n## \n\nEnsure that the currently selected state of the date is programmatically determined. This can be achieved by setting `aria-selected=\"true\"` on a date when it is selected. For more information, see [WAI - Date picker](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/datepicker-dialog.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6893-2",
    "Summary": "Forms - Checkboxes - Accessible name does not match visual label",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe medical card has a logo such as \"Medpass\" and \"Smartnet\". This information may relate to the supplier and could be important. It is however not communicated in the following list section. \n\n## \n\nOn the medical card page. On both devices and variants. \n\n![Medpass and Smartnet logo not communicated](image.png)\n\n## \n1. navigate onto the above element using a screen reader\n2. observe that the \"Medpass\" and \"Smartnet\" logo is not announced\n3. note that it is not referenced on the following list section\n\n## \n\nEnsure that the information \"Medpass\" and \"Smartnet\" is communicated to assistive technologies. The text could be added to the screen reader's medical card description. Alternatively, it could be appended before policy number, as it is done visually on the card.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6893-3",
    "Summary": "Forms - Toggle - Toggled state not visible displayed when using a keyboard",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nHeading \"Life insured\" is not programmatically declared. \n\n## \n\nOn the \"Life insured\" heading on the draggable dialog of the Medical card screen. This can be accessed by triggering the \"Life insured\" tooltip.\n\n![Heading not declared](image.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the heading is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. This can be achieved through the use of `UIAccessibilityTraitHeader` trait. \n\nFor information, see [BBC Mobile Guidelines - Headings](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/structure/headings)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6893-1",
    "Summary": "Forms - Upload button does not have a focus indicator",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on swipe navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The current focus order is illogical.\n\nOn Android: When the medical card page first loads, the \"My medical card\" heading receives focus. Swiping right will set focus on the medical card, followed by the list. Some users may not expect to swipe left from the heading to go to the \"Back\" button. \n\nOn iOS: When the medical card page first loads, the medical card receives focus. Screen reader users may miss important information if they are not aware of content that can be accessed by left-swipe. \n\n## \n\nOn the top left of the medical card screen.  \n\nAndroid: \n\n![My medical card heading receiving focus on page load](image1.png)\n\niOS:\n\n![Medical card receiving focus on the page load](image.png)\n\n## \n1. swipe through the above element using a screen reader \n2. observe that on page load, the focus is not set on the beginning of the screen. \n\n## \n\nThe screen reader focus should be set to the first visible element, such as the back button, when a new page is loaded. \n\nAlternatively, the back button should receive screen reader focus after the heading. This can be achieved by rearranging the views or manually setting focus.\n\nFor more information, see [BBC Mobile Guidelines - Focus Order](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/focus/focus-order)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6325-10",
    "Summary": "Forms - Number Stepper - potentially confusing label",
    "Success Criteria": "Additional Issue",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe `<legend>` text is not announced while using a screen reader on Internet Explorer. It announces correctly on Chrome and is marked up correctly. \n\n## \n\nOn page 2, on the radio button fieldsets. \n\n![Radio buttons](image.png)\n\n![Markup](image1.png)\n  \n## \n1. navigate to a radio button on page 2 using a screen reader\n2. observe that the legend text is not announced\n \n## \n\nEnsure that the `<legend>`text is announced using a screen reader when the user tabs onto a radio button within a fieldset.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-111",
    "Summary": "Table (with form controls) - Text content loss on reflow",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Date Picker",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe component must be entirely compatible with just a keyboard and screen reader. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader and switch users may be unable to operate it. \n\nThe date picker is operable with a keyboard. However, it is not operable with a screen reader. When using the arrow keys, the screen reader does not move the date selector. As well, depending on the key used, more or less information is announced. \n\nThis has been raised as a High Priority issue because, on the example page, there is not input alternative to the date picker. On a live page, this could be a medium priority WCAG failure or an additional issue, depending on the options available to users.\n\n## \n\nForms - Datepicker - Default. The same can be seen with the input date pickers. For example, Forms - Input Datepicker - Uncontrolled.\n\nBelow are some example screen reader announcements:\n\n1. When a date is clicked using a pointer. This does not have redundant information and is textually complete. \n2. Right arrow key causing heading to be spelt out.\n3. Down arrow key causing next date to be announced, but with incomplete text. \n\n![Datepicker](image.png)\n  \n## \n1. navigate onto the above component\n2. using a keyboard and screen reader, attempt to press arrow keys to navigate dates. \n3. observe the behaviour as mentioned above\n\n## \n\nEnsure that the date picker is operable using a screen reader. When navigating by arrow keys, the screen reader announcement should be at least something like \"14 January 2020\". It should ideally also include the day of the week. For example, \"Monday 4th January 2020\". \n\nThis is a custom component where screen reader users will need to use arrow keys to navigate. Some patterns use `role=\"application\"` on the container element to support this. For example, see [WhatSock ARIA Date Picker](http://whatsock.com/tsg/Coding%20Arena/ARIA%20Date%20Pickers/ARIA%20Date%20Picker%20(Basic)/demo.htm). Others use grid semantics to support this. For example, see [WAI ARIA - Date Picker Dialog](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/datepicker-dialog.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-11",
    "Summary": "Spinner - Graphic does not have alternative text",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe heading levels are incorrectly marked up. All of the heading elements are marked up using `<h1>`, despite being visually styled differently. The visual differences imply a parent and child relationship, which should be communicated through the heading levels. \n\n## \n\nTypography > Sizes > Heading styles\n\nHeading level 1 - `<h1>`\n\n![Heading style 1](image1.png)\n\nHeading level 3 - `<h3>`\n\n![Heading style 3 ](image.png)\n \nHeading level 6 - `<h6>`\n\n![Heading style 6](image2.png)\n\n## \n1. note the headings that visually appear to be different levels \n2. inspect the headings\n3. note that they all use `<h1>`\n\n## \n\nEnsure that the heading level matches the level expressed by visual styling. For example,\n\n```\n<h1 class=\"a-heading--style1\">Lorem Ipsum</h3>\n<h2 class=\"a-heading--style2\">Lorem Ipsum</h3>\n<h3 class=\"a-heading--style3\">Lorem Ipsum</h3>\n```\n\nIt is otherwise recommended to have a single `<h1>` on each page that identifies the main heading. For more information, see [WAI Tutorials - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6545-2",
    "Summary": "Form - Segmented Control (Toggle Button) - Control label not announced",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on swipe navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The current focus order is illogical.\n\nThe plain text label which is associated with the checkbox receives screen reader focus. When swiping to navigate with TalkBack, the checkbox receives focus, a visually hidden link element, and then each individual label text.    \n\n## \n\nOn page 1. On the payment description label on each checkbox. \n\n![Plain text label receiving TalkBack focus.](image1.png)\n\n## \n1. tab through the above element using TalkBack\n2. observe that the plain text receives focus individually, even after the checkbox receives focus. \n\n## \n\nEnsure that the plain text is grouped with related content, such that the text elements within the grouped content do not individually receive screen reader focus.  \n\nThe text container could be hidden from assistive technologies if marked up using `aria-hidden` attribute.\n\nFor more information, see [BBC Mobile Guidelines - Focusable Elements](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/focus/focusable-elements)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6545-1",
    "Summary": "Button marked up as a heading",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Checkbox",
    "Priority": "Low",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. The current focus order is illogical, as a visually hidden element receives screen reader focus. The speech output produced by the hidden element is identical to the checkbox. The visually hidden element is marked up as a link. \n\n## \n\nOn page 1, ACH Payment. On the checkboxes. \n\n![Visually hidden element receiving screen reader focus](image.png)\n\n![Checkbox receving screen reader focus](image1.png)\n\n## \n1. swipe through the mentioned elements using a TalkBack/ VoiceOver\n2. observe that the visually hidden element receives screen reader focus\n\n## \n\nThe same content should not be communicated to screen reader users multiple times. Ensure that visually hidden elements are removed from the screen reader focus order. \n\nThis can be achieved by using`aria-hidden`, or CSS property `display: none` on the visually hidden element.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-86",
    "Summary": "Radio buttons are not grouped",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe legend has an `aria-label` with the accessible name 'Sort Code Label'. This overwrites the legend's `innerHTML` value of \"Sort Code\". This has been raised as an Additional Issue as in this case, the label still makes sense. However, this may not be true with live content. \n\n## \n\nForms - Sort Code > Sort Code \n\n![Sort Code](image1.png)\n\n![Markup](image.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. note that text 'label' is announced \n\n## \n\nRemove the `aria-label` from the `<legend>`. It is unnecessary as it duplicates the text on screen.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-126",
    "Summary": "Link does not describe that it opens in a new window",
    "Success Criteria": "1.4.1: Use of Color [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nPerceiving and operating content must not rely on colour vision. Users with low vision or who are colour blind may struggle to perceive the content, and so will users of screen readers, braille displays, or high contrast settings. The date picker uses colour to communicate the currently selected date.\n\nNote that this issue overlaps with ADR_6560 - 125. That issue is about the selected date needing to be programmatically determined. This issue is that the selected date needs to be visually communicated in a way that does not rely on colour. \n\n## \n\nForms - Date Picker - Default\n\n![Currently selected date and picker](image1.png)\n\n## \n1. navigate onto the above content\n2. observe that the currently selected state is described using colour\n\n## \n\nMake sure that colour is not the only means used to communicate information. The currently selected date should also have additional visual cues other than colour. For example, the text could be made bold.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-51",
    "Summary": "Heading levels are illogical",
    "Success Criteria": "2.5.1: Pointer Gestures [A]",
    "Component": "Carousel",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Motor",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe tiles (carousel) items are rendered along a row. To navigate through the items, mouse users need to use the scroll wheel. As the tiles are not interactive items, keyboard users cannot tab through them. As well the arrow keys do not move the items. \n\nWCAG requires that components do not rely on gestures. We have raised this issue speculatively because the above behaviour implies that the component on mobile will rely on swiping on the screen. As well, voice recognition users may struggle to operate the component. \n\nNote that this issue is connected to ADR_6560 - 124. That issue is about controlling the carousel on desktop with a keyboard. This issue is about accessing the tiles without needing to use gestures on mobile. That said, they can be resolve with the same . \n\n## \n\nTiles (Carousel) > Carousel \n\n![Carousel](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate to the above Tiles (carousel)\n2. observe that there are no navigation buttons to go left or right \n\n## \n\nProvide controls for the carousel that do no rely on gestures. The easiest way to do this is with buttons. For example, \"Next\" and \"Previous\" buttons. For more information, see [WAI Tutorials - Carousel Functionality](https://www.w3.org/WAI/tutorials/carousels/functionality/) as well as [Accessible Developer Guide - Carousel](https://www.accessibility-developer-guide.com/examples/widgets/carousel/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-124",
    "Summary": "Skip link text not visible when receiving keyboard focus",
    "Success Criteria": "2.1.1: Keyboard [A]",
    "Component": "Carousel",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nProducts must be entirely compatible with just a keyboard. Do not rely on the mouse or touch input exclusively. Otherwise, screen reader, keyboard, and switch users, may be unable to operate it. There are elements that cannot be operated with a keyboard.\n\nThe tiles (carousel) items are rendered along a row. To navigate through the items, mouse users need to use the scroll wheel. As the tiles are not interactive items, keyboard users on desktop cannot tab through them. As well, the arrow keys do not move the items.\n\nNote that this issue is connected to ADR_6560 - 51. That issue is about being able to access the tiles without needing to use gestures on mobile. This issue is about controlling the carousel on desktop with a keyboard. That said, they can be resolve with the same . \n\n## \n\nTiles (Carousel) > Carousel\n\n![iCarousel](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate to the above Tiles (carousel)\n2. observe that keyboard users are unable to use navigate the tiles\n\n## \n\nProvide controls for the carousel so that do not rely on pointer controls and are fully operable while just using a keyboard. \n\nThe easiest way to do this is with buttons. For example, \"Next\" and \"Previous\" buttons. For more information, see [WAI Tutorials - Carousel Functionality](https://www.w3.org/WAI/tutorials/carousels/functionality/) as well as [Accessible Developer Guide - Carousel](https://www.accessibility-developer-guide.com/examples/widgets/carousel/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-107",
    "Summary": "Buttons are marked up as links",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nTriggering the increment / decrement buttons in the number stepper component visually updates the value in the input field. However, this updated value is not announced by screen readers. Such users may be unaware that the action has been successful. \n\nThey may also not be aware when hitting certain milestones, such as £100, £200, and so on. \n\nThis has been raised as an Additional Issue because the same behaviour can be seen in the [WAI ARIA Practices - Spin button](https://www.w3.org/TR/wai-aria-practices/examples/spinbutton/datepicker-spinbuttons.html ). \n\n## \n\nForms - Number Stepper > Default\n\n![Number stepper](image.png)\n\n![Markup](image1.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. update the input field value using the increment / decrement button\n3. observe that the change is not communicated to the screen reader\n\n## \n\nEnsure that dynamically updated values are announced to screen reader users. This can be achieved through live regions. For example:\n\n```\n<div aria-live=\"polite\" aria-atomic=\"true\"></div>\n```\n\nThe live region must be first present on the document and the updated value can be inserted into the region using `.innerHTML` attribute, exposing the updated value to the assistive technologies. We would advise against using this for every single update. This could easily be obnoxious. \n\nInstead, consider using logical breakpoints. For example, announce when the use hits 0, the maximum value, and then any sizable step in between. For example, 0, 100, 150, 200, and so on. For more information, see [MDN - Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-58",
    "Summary": "Banner not included in the navigation region",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Dropdown",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe segmented control (dropdown) is not properly marked up. As a result, when the dropdown is expanded and an option receives focus, all of the options are announced, along with their position in the grouping. This could confuse screen reader users. They may be unable to identify the value of the respective options. \n\nWe have raised this as a High Priority issue as this dropdown may be critically important. For example, the user may select the wrong account, investment type, and so on. \n## \n\nForms - Segmented Control - as Dropdown Button\n\n![segmented control](image.png)\n\nThe dropdown options which are all being announced, when arrow keys are used to select an option. \n\n![Dropdown options](image2.png)\n\n![Markup for the options](image1.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. observe that the selected options are incorrectly announced\n\n## \n\nEnsure that when arrow keys are used to navigate the dropdown options, only the option that is selected is announced. For example, \"Personal\", instead of \"Personal Business Investment offer\". This can be achieved by removing the `aria-describedby` association between the dropdown container and its options. \n\nIf possible, use a native `<select>` parent with `<option>` child elements. These have out of the box accessibility. For more information, see [MDN - Select](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select). If you wish to style the native `<select>`, see [Styling a Select Like It’s 2019](https://www.filamentgroup.com/lab/select-css.html).\n\nOtherwise, you can provide better keyboard support for the segmented control with guidance from [WAI Authoring practices - Collapsible Dropdown](https://www.w3.org/TR/wai-aria-practices-1.1/examples/listbox/listbox-collapsible.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-117",
    "Summary": "Colour may be used to communicate information that is not programmatically determined",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThe digital signature functional image does not have a descriptive alt text. \n\n## \n\nForms - Input Signature > Basic \n\n![Input Signature](image.png)\n\n![Markup](image1.png)\n\n![Accessibility tree for digital signature](image2.png)\n\n## \n1. inspect the non-text content.\n2. confirm that it does not have a descriptive alternative.\n\n## \n\nThe parent button is named \"Digital Signature\". As a result, this image could be marked as decorative. This can be done with an empty alt attribute. For example: \n\n```\n<button aria-label=\"Digital Signature\">\n<img src=\"...\" alt=\"\">\n</button>\n``` \n\nAnother option is providing an alt attribute to explain the state of the image. For example:\n\n```\n<img src=\"...\" alt=\"Empty image - awaiting signature\">\n<img src=\"...\" alt=\"Your inputted signature\">\n```\n\nThis additional information could also be added to the button label. For example \"Digital Signature - awaiting signature\", \"Digital Signature - signature submitted\". \n\nWhich is option is preferred is based on what image will appear. If the live image will be generic and does not add any new information to the page, mark it as decorative. Otherwise, add the new information to the alt attributes or button label. \n\nFor more information, see [WAI Tutorials - Images](https://www.w3.org/WAI/tutorials/images/) as well as [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-22",
    "Summary": "Dynamically updating images have redundant alt text",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe spinner component is presented to users. However, a loading message is not dynamically communicated to screen reader users. These users may be unaware of this status message. The current spinner is loading indefinitely. However, we assume that on the live pages that it will appear dynamically and temporarily. \n\n ## \n\nSpinner > Default\n\n![Spinner](image.png)\n\n![Markup](image2.png)\n\n## \n1. navigate to spinner > default component with a screen reader on\n2. observe that loading status message is not communicated\n\n## \n\nEnsure that the loading message is dynamically communicated to assistive technology users. This can be achieved using live regions. For example: \n```\n<div role=\"status\">Loading</div> \n<div role=\"status\">Loading Complete</div> \n```\n\nEnsure that the live region is defined and present in the document, and then you can dynamically add a \"Loading\" message to it using `innerHTML` property. The message above can be hidden and exposed only to screen readers using CSS. \n\nProviding these loading messages will not be helpful if the load time is very short. As such, it would be advised to only communicate the dynamic loading message if the spinner has been rendered for more than a couple of seconds.\n\nFor more information, see [MDN - Using status role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-112",
    "Summary": "Financial report description lacks semantic structure",
    "Success Criteria": "3.3.1: Error Identification [A]",
    "Component": "Date Picker",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nErrors must be described through text and be compatible with assistive technology. Users may otherwise be unaware when they occur. There are error messages that are present on the screen. These are using live region semantics. \n\nHowever, the error is not dynamically added to the page. It is present on page load. As a result, we are unable to test whether it is fully working. \n\nHowever, the message is not announced on page load. As well, we have noticed that the error message is nested within multiple `<div>` containers. This has been known to cause issues with screen reader announcements. \n\n## \n\nForms - Datepicker > with error \n\n![Error message on page load](image.png)\n\n![Error Markup](image1.png)\n \n## \n1. navigate onto the above elements with a screen reader and reload the page\n2. note that the live region text is not announced \n\n## \n\nEnsure that error messages are announced to assistive technology users. The live region must be present on the page before dynamically adding text to it. As well, use the live region semantics on the element that will have text added into it. For example: \n\n```\n<div role=\"alert\">Error: this is an error message</div>\n```\n\nFor more information, see [MDN - Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-109",
    "Summary": "Redundant aria-label on image",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Combobox",
    "Priority": "High",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. There are listbox options which are not announced correctly by screen readers. \n\nInstead of the individual actor names being announced, \"Actors\" is announced each time. This may make the component impossible to use with a screen reader.\n\n## \n\nForm - Input Autocomplete > Basic \n\n![Input autocomplete](image1.png)\n\n![Markup](image.png)\n \n## \n1. inspect the toggle buttons\n2. view the accessibility properties\n3. note that the` aria-labelledby` description takes precedence over the option's label. \n\n## \n\nRemoving the `aria-describedby` association causes the option value to be announced by the screen reader, as the the `<label>` containing the actor's name is correctly associated with the control. Note that the autocomplete pattern is otherwise non-standard. \n\nIt is more standard to use `role=\"option\"` elements in an autosuggest. For more information, see [GOV - Accessible Autocompletes](https://github.com/alphagov/accessible-autocomplete), [UX Mastery - Anatomy of an Accessible Auto Suggest](https://uxmastery.com/anatomy-of-an-accessible-auto-suggest/), and [Building an accessible autocomplete](https://adamsilver.io/articles/building-an-accessible-autocomplete-control/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-123",
    "Summary": "Key for performance uses colour",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe checkbox role of the checkboxes within table cells are not programmatically determined. An example result of this is that screen readers do not correctly announce \"checkbox\". Note that this issue is connected to ADR_6560 - 39.\n\n## \n\nTable (with form controls) > Checkboxes and Radio Checkboxes\n\nAG-Grid > Checkboxes\n\n![Check box](image.png)\n \nAG-Grid > Radio Checkboxes\n\n![Radio Check box](image2.png)\n\n![Markup](image1.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their checkbox role is not announced\n\n## \n\nIf you can, use native elements. For example,  `<input type=\"checkbox\" checked>`. These have out of the box accessibility. If this is not possible, make sure that the role and state of the checkbox are programmatically identified. For more information, see [WAI ARIA practices - Checkbox](w3.org/TR/wai-aria-practices/examples/checkbox/checkbox-1/checkbox-1.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-39",
    "Summary": "Placeholder used as input label",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe checked state of the checkboxes within table cells are not programmatically determined. An example result of this is that screen readers do not correctly announce \"checked\" or \"unchecked\". Note that this issue is connected to ADR_6560 - 123.\n\n## \n\nTable (with form controls) > Checkboxes and Radio Checkboxes\n\nAG-Grid > Checkboxes\n\n![Check box](image.png)\n\nAG-Grid > Radio Checkboxes\n\n![Radio Check box](image2.png)\n\n![Markup](image1.png)\n\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their checked state is not announced\n\n## \n\nIf you can, use native elements. For example,  `<input type=\"checkbox\" checked>`. These have out of the box accessibility. If this is not possible, make sure that the role and state of the checkbox are programmatically identified. For more information, see [WAI ARIA practices - Checkbox](w3.org/TR/wai-aria-practices/examples/checkbox/checkbox-1/checkbox-1.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-6",
    "Summary": "Controls are not grouped in a fieldset",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nKeyboard users often navigate websites with Tab and Shift + Tab. This allows them to cycle through interactive elements. Sticky headers and footers can cause issues when tabbing through the page. This is because they can appear above the elements that are receiving keyboard focus. \n\nThis has been raised as an Additional Issue as there is no other content on the page. Note that this is similar to ADR_6560 - 116.\n\n## \n\nSticky Footer > Default\n\nThis could happen on pages with interactive elements that will be obscured by the sticky footer. \n\n![Sticky footer](image.png)\n\n## \n1. use tab key to navigate down the page \n2. observe the focus changing to the next interactive element\n3. ensure that the sticky footer does not obscure elements\n\n## \n\nTest the sticky footer with some additional content on the page. Make sure that when you tab through interactive elements, such as buttons and links, that the elements that receive focus are not obscured by the footer. As well, consider providing users with a button to dismiss the sticky footer.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-120",
    "Summary": "Placeholder text does not match name",
    "Success Criteria": "Additional Issue",
    "Component": "Dropdown",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nAt 400% browser zoom, there must be no loss in content or functionality. There are examples where this is not supported. When zooming into the page, the text is cut-off. This may diminish the user experience for users with low vision. \n\nThis has been raised as a low priority as it is reasonable to expect users can guess the content from the amount of text that is visible. As well, this has been raised as an additional issue as this is a limitation of the native `<select>` elements. It is not easy to style the internal `<option>` elements.\n  \n## \n\nForms - Selects > Error\n\n![Text clipped](image.png)\n\n![Markup](image1.png)\n\n## \n1. set browser width to 1280 pixels.\n2. zoom in to 400% zoom.\n3. observe that the dropdown item's text clips\n\n## \n\nMake sure that all of the content is available when zooming into the page. If possible, use the custom CSS to produce linebreaks when the long strings are cut-off. Alternatively, add a suggested character limit to the `<option>` tags, which will work at increased zoom levels. For example, 60 characters. \n\nThis success criteria can be tested with Firefox or Chrome using the [Web Developer Toolbar extension](https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm). Another option is setting the desktop resolution to 1280 x 1024 and maximizing the browser window. For an explanation of this requirement see: [W3 - Understanding Reflow](https://www.w3.org/WAI/WCAG21/Understanding/reflow.html).\n.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-110",
    "Summary": "Breadcrumb current page is not programmatically determined",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Date Picker",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. \n\nThere is some text that acts as a heading, but does not use heading semantics. \n\n## \n\nForms - Datepicker > Default\n\n![Heading](image.png)\n\n![Markup](image1.png)\n\n## \n1. open the date picker. \n2. inspect the heading elements\n3. note that it uses a heading class, but not a semantic heading\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Make sure that elements that function as headings use heading semantics. \n\nThe heading level should be defined based on the surrounding heading structure. However, you may also wish to make sure that the date picker component is consistent and always uses the same heading level. \n\nYou are best placed to identify the suitable heading level. For example, if it will usually appear within a form that has a `<h2>`, then using a `<h3>` as the default heading would be logical. If it will usually appear under a form with a `<h1>`, then a `<h2>` would be logical. \n\nFor more information, see [W3C - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/) and [WAI ARIA - Date Picker Dialog Example](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/datepicker-dialog.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-24",
    "Summary": "Dot pagination does not communicate current page",
    "Success Criteria": "Additional Issue",
    "Component": "Dropdown",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Cognitive",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe custom dropdown component does not have an arrow visual cue for expanded state, which would suggest that it is a dropdown. Most browsers provide an arrow when using a `<select>` and so users may expect the same with custom dropdowns. \n\nUsers may believe that they have to use the \"Previous\" and \"Next\" buttons, as there is no obvious clue that the page number expands. \n\n## \n\n**Forms - Pagination > More than 10 pages**\n\n![Dropdown](image.png) \n\n![Markup](image1.png)\n\n## \n1. navigate to the dropdown \n2. observe that there are no arrows as a visual cue for expanded state\n \n## \n\nEnsure that users are made aware that the \"Page n of 99\" button is a dropdown. This can be done by including a downward-facing arrow after the text. This could be done with CSS generated content, or by not overriding the native styling of the `<select>` element.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-43",
    "Summary": "Text does not have sufficient colour contrast ratio",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised. The list of pages in the pagination control is not contained in a list. \n\nThis has been raised as an additional issue as `aria-label` attributes are being used to communicate this information. \n\n## \n\nForms > Pagination > Up to 5 pages\n\n![Pagination](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship of these elements as lists is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. This can be achieved by marking up the pagination items as an ordered list. Instead of using `aria-labels`, use list semantics to communicate this structure. For example:\n\n```\n<nav aria-label=\"Pagination Navigation\">\n    <ul>\n        <li><a href=\"...\">1</a></li>\n        <li><a href=\"...\">2</a></li>\n...\n    </ul>\n</nav>\n```\n\nFor more information, see [WAI - Ordered List](https://www.w3.org/WAI/tutorials/page-structure/content/#ordered-list), as well as [a11y Matters - Pagination](https://www.a11ymatters.com/pattern/pagination/) and [a11y Style Guide - pagination](https://a11y-style-guide.com/style-guide/section-navigation.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-7",
    "Summary": "Hidden element receives screen reader focus",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nIcons do not have sufficient colour contrast against their background. The minimum colour contrast ratio for icons against their background is 3:1. Users with low vision may struggle to perceive the icons. \n\nThe icons are displayed on a white background (#FFFFFF). These results will differ if these icons are used with various background colours. As well, the icons currently have text next to them. However, the text appears to the asset name. We assume that the text will not be on live sites. \n\n## \n\nIcons Folder.\n\nDigital-lightest-blue\n\n![Blue](image.png)\n\nYellow\n\n![Yellow](image1.png)\n\nStar-empty\n\n![Star empty](image2.png)\n\nLocator\n\n![Locator](image3.png)\n\n## \n1. navigate to mentioned icons\n2. use a colour contrast analysis tool on the icon against its background\n3. confirm that colour contrast ratio is less than 3:1\n\n## \n\nEnsure that there the mentioned icons have sufficient colour contrast ratio of greater than 3:1 against their background. There are a few ways to achieve this. The easiest way is to have informative text that always appears with the icon. \n\nThis will need to be more helpful than \"digital lightest blue\". Text such as \"Notification\", \"Alert\", \"Warning\", and so on, would circumvent the contrast requirements. This is the preferred option as you could then more easily use the icons with various backgrounds. \n\nAlternatively, tweak the colours of the icons to allow them to pass the 3:1 requirements. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCA-Win) and [Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-118",
    "Summary": "Grouped links are not screen reader operable",
    "Success Criteria": "1.4.11: Non-text Contrast [AA]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nWhen the hit area of components relies upon a border, it needs to meet contrast requirements. The input signature has a grey border. This does not contrast sufficiently against the white background. It is currently 1.8:1, which is under the 3:1 contrast ratio requirement. Low vision users may struggle to perceive the hit area.\n\nThis has been raised as low priority as the hit area is between two text elements. However, there is only a broken image within the hit area. \n\n## \n\nForms - Input Signature > Basic \n\n![Input Signature](image.png)\n\n## \n1. navigate onto the above elements\n2. with a colour contrast analysis tool, confirm that the colours do not contrast sufficiently\n\n## \n\nPut some text within the hit area. For example, \"Select to enter signature\". Alternatively, make the border of the input signature darker. A minimum contrast ratio of 3:1 is required to meet the WCAG requirement for non-text elements. \n\nThe colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCA-Win) and [Contrast Finder](http://contrast-finder.tanaguru.com). WCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-23",
    "Summary": "Text does not resize",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe pagination buttons are not contained in a navigation region. This would help make the component more obvious when using a screen reader. \n\n## \n\n**Forms > Pagination > All variants**\n\n![Pagination](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate onto the pagination buttons with a screen reader.\n2. note that their structure is not announced\n\n## \n\nThe pagination structure should be identified as a navigation region by wrapping it inside the `<nav>` attribute, or by adding the attribute role=\"navigation\" into the pagination container. The `<nav>` should also be labelled. For example, `aria-label=\"Pagination Navigation\"`.\n\nFor more information, see [WAI Tutorials - Page Regions](https://www.w3.org/WAI/tutorials/page-structure/regions/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-44",
    "Summary": "Tooltip lacks button role",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere is a bug with IE11 and `<input type=\"file\">`. The button receives keyboard focus twice, as IE11 renders the element as a browse button and a file path button. This can cause issues when using CSS to modify the presentation of the element, such that it visually appears as one button. \n\nThis has been raised as an Additional Issue as it is a quirk of IE11. \n \n## \n\n**Forms – Buttons Upload > Basic**\n\n![File upload](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate to file upload button on Internet Explorer using a screen reader\n2. tab onto the file upload  \n3. tab again, and observe that the button receives focus twice \n\n## \n\nEnsure that the file upload button receives focus only once using IE11. This can be done with a polyfill that hides the `<input type=\"file\">` and replaces it with a `<button>`. When the button is activated, it can trigger the hidden `<input type=\"file\">`. For example: \n\n```\n<button onclick=\"pressFile\">Upload</button>\n<input type=\"file\" hidden>\n```\n\nFor a basic example of this, see [CodePen - IE11 File Upload Polyfill](https://codepen.io/dohr/pen/f879392e6bce8a3f2204b5b3009d1c1b).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-119",
    "Summary": "Headings not marked up",
    "Success Criteria": "Additional Issue",
    "Component": "Date Picker",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nPerceiving and operating content must not rely on colour vision. Users with low vision or who are colour blind may struggle to perceive the content, and so will users of screen readers, braille displays, or high contrast settings. The dual date picker users colour to communicate the start and end dates. \n\nThis has been raised as an Additional Issue as this information is also in the input fields. \n\n## \n\nForms - DualDatepicker > Default\n\n![Datepicker range](image.png)\n\n## \n1. navigate onto the above content\n2. select a start and end date\n3. note that the selection uses colour \n4. using a screen reader, note that the start and end are not announced\n\n## \n\nAdd hidden text to the start and end dates. For example:\n\n```\n<span class=\"sr-only\">Start of date selection</span> \n...\n<span class=\"sr-only\">End of date selection</span> \n```\n\nAs well, add some visual cue about the start and end dates that does not rely on colour. For example, use CSS to add brackets to the start and end dates. Use \"[\" on the start date and \"]\" on the end date. This will benefit low vision and colour blind users. Another option would be making all the dates within the selection bold.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-104",
    "Summary": "Dynamic content not announced to screen reader users",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Dropdown",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nThere is a `<legend>` is marked up as a child of `<div>`, which is causing parsing errors. As a result, the `<fieldset>` is not being exposed to assistive technology. For example, it is not being announced by NVDA.\n\n## \n\nForms - Date Select \n\n![Date select](image.png)\n\n![Markup](image1.png)  \n\n![Parsing](image2.png)\n\n## \n1. copy the component source code\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n4. observe that there are parsing error related to the `<legend>` element being a child of `<div>`\n\n## \n\nPages must use code that is nested correctly and used to specification. `<legend>` should not be marked up as a child of `<div>`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-103",
    "Summary": "Visually hidden elements receive screen reader focus",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Checkbox",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nThere is a `<legend>` is marked up as a child of `<div>`, which is causing parsing errors. As a result, the `<fieldset>` is not being exposed to assistive technology. For example, it is not being announced by NVDA.\n\n## \n\nForms - Checkboxes > Uncontrolled\n\n![Checkboxes](image.png)\n \n![Markup](image1.png)\n \n![Parsing error](image2.png)\n \n## \n1. copy the component source code\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n4. observe that there are parsing error related to the `<legend>` element being a child of `<div>`\n\n## \n\nPages must use code that is nested correctly and used to specification. `<legend>` should not be marked up as a child of `<div>`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-49",
    "Summary": "Input field moves screen reader focus automatically",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nThere are interactive controls that are nested. More specifically, a link with a button within it. This is causing issues with tabbing onto the elements with a screen reader. The elements are not consistently announced correctly\n\n## \n\nTiles > Tiles as Link \n\n![Link block](image.png)\n\n![Markup](image1.png)\n\n## \n1. navigate onto the above example with a screen reader\n2. tab onto the component \n3. observe the strange behaviour captured above\n\n## \n\nA button within a link -- or link within a button -- which is not valid nesting according to HTML5 Specification. Make sure that interactive elements such as `<button>` are not nested inside `<a>`. As a solution, the button can be nested as a sibling of the anchor tag. For example:\n\n```\n<div>\n    <a href=\"'#\">Click me</a>\n    <button>Click me</button>\n</div>\n```\n\nThe above is useful is the links and buttons have unique behaviour. If they do the same thing, have one link. For example: \n\n```\n<a href=\"#\">\n  <span>Click Me</span>\n  <span>Click me</span>\n</a>\n```\n\nGood practice for cards is explained in [Inclisuve Components Cards](https://inclusive-components.design/cards/), which also has a [Card Demo page](https://heydon.github.io/Inclusive-Components/cards-pseudo-content-author-link/) that demonstrated cards with multiple clickable elements.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-37",
    "Summary": "Checkbox selected status message is not announced",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nThere is a `<legend>` is marked up as a child of `<div>`, which is causing parsing errors. As a result, the `<fieldset>` is not being exposed to assistive technology. For example, it is not being announced by NVDA.\n\n## \n\nForms - Time Picker > Default \n\n![Time picker](image.png)\n\n![Markup](image1.png)\n  \n![Time picker parsing error](image2.png)\n\n## \n1. copy the component source code\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n4. observe that there are parsing error related to the `<legend>` element being a child of `<div>`\n\n## \n\nPages must use code that is nested correctly and used to specification. `<legend>` should not be marked up as a child of `<div>`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-84",
    "Summary": "Selected tab is not announced",
    "Success Criteria": "4.1.1: Parsing [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThere are parsing errors. Browsers are generally forgiving of these errors and warnings. Assistive technologies more-so struggle to process semantics that deviates from the relevant specifications, however. Users may experience strange behaviour or generally diminished support.\n\nThere is a `<legend>` is marked up as a child of `<div>`, which is causing parsing errors. As a result, the `<fieldset>` is not being exposed to assistive technology. For example, it is not being announced by NVDA.\n\n## \n\nForms - Sort Code \n\n![Sort Code](image.png)\n \n![Markup](image1.png)\n\n![Parsing](image3.png) \n\n## \n1. copy the component source code\n2. use the W3 validator tools to check your code for validation errors. [Nu Html Checker](https://validator.w3.org/nu/).\n3. use a tool such as the [WCAG Parsing Bookmarklet](https://labs.diginclusion.com/tools/bookmarklets/wcag-parsing-filter/)  to filter the results\n4. observe that there are parsing error related to the `<legend>` element being a child of `<div>`\n\n## \n\nPages must use code that is nested correctly and used to specification. `<legend>` should not be marked up as a child of `<div>`.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-28",
    "Summary": "Swiping to trigger contextual actions causes usability issues",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. There are elements which do not indicate focus.\n## \n\nForms - Input Signature > Basic\n\n![Digital signature button](image.png)\n\n![Markup](image1.png) \n\n## \n1. keyboard tab onto the above elements\n2. note that there is no visible focus indication \n\n## \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not this `a { outline: none; }`.\n\nFor more information, see [CSS Tricks - Focusing on focus styles](https://css-tricks.com/focusing-on-focus-styles/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-106",
    "Summary": "Text grouped under one element",
    "Success Criteria": "2.5.3: Label in Name [A]",
    "Component": "Dropdown",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive elements must have an accessible name that is consistent with the visual label. Otherwise, voice recognition users may not be able to activate them. There are elements where the visual label and accessible name are entirely different. This is due to the name being overridden with an `aria-label`.\n\n## \n\nForm - Dropdown List > Uncontrolled\n\n![Dropown list](image.png) \n\n![Markup](image1.png)\n\n![Label](image2.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. observe that the accessible name does not match the visual label\n\n## \n\nMake sure that the visible name is included in the accessible name. With dropdowns, you can use `aria-labelledby` to label the button by the above label and the internal name of the button. This attribute accepts multiple values. \n\n```\n<span id=\"dropdownParentLabel\">Some Legend</span>\n<button id=\"dropdownInternalLabel\" aria-labelledby=\"dropdownParentLabel dropdownInternalLabel\">Some Item</button>\n```\n\nThis is shown in the [WAI ARIA - Listbox Example](https://www.w3.org/TR/wai-aria-practices-1.1/examples/listbox/listbox-collapsible.html). For example:",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-105",
    "Summary": "Elements are not semantically associated to their labels",
    "Success Criteria": "2.5.3: Label in Name [A]",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nInteractive elements must have an accessible name that is consistent with the visual label. Otherwise, voice recognition users may not be able to activate them. There are elements where the visual label and accessible name are entirely different. This is due to the name being overridden with an `aria-label`.\n\n## \n\nForm - Checkboxes > Uncontrolled\n\n![Checkboxes](image.png)\n\n![Markup](image1.png)\n \n## \n1. navigate onto the above elements with a screen reader \n2. observe that the accessible name does not match the visual label\n\n## \n\nEnsure that the visual label and the accessible name of interactive elements are the same. In this instance, the `aria-label` can be removed. The checkboxes are already associated with the visual label.\n\nFor more information, see [WAI Tutorials - Labelling Controls](https://www.w3.org/WAI/tutorials/forms/labels/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-30",
    "Summary": "Elements do not have programmatically determined roles",
    "Success Criteria": "Additional Issue",
    "Component": "Checkbox",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe toggle component has a programmatically determined checked state. However, when switching it between on and off, the state is less visually obvious when using a keyboard. When using a mouse, the background changes colour. This does not happen when using a keyboard. \n\nThis has been raised as an Additional Issues as the knob moves left and right. However, it is more obvious with a mouse. \n\n## \n\nForms - Toggle > Uncontrolled \n\nOff state\n\n![switch off](image.png)\n\nUsing a keyboard - on state\n\n![switch on](image1.png)\n\nUsing a mouse - on state \n\n![switch with a mouse](image2.png)\n\n## \n1. navigate to toggle component\n2. use a keyboard to toggle checked state\n3. observe that the colour which is used to indicate state change is not shown \n4. note that the colour to indicate state change is shown with mouse click\n\n## \n\nWhen using the toggle with a keyboard, make sure that it is visually obvious. Use the same styling that appears when using a mouse.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-29",
    "Summary": "Unnecessary table markup used",
    "Success Criteria": "2.4.7: Focus Visible [AA]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nSome users rely on keyboards. When an element is tabbed onto, it receives focus. For keyboard users to know where they are on the page, elements need to visually indicate when they receive focus. Users may otherwise struggle to navigate and operate content. The upload button does not indicate focus. \n\n## \n\nForms – Buttons Upload > Basic\n\n![Upload button](image.png)\n\n![Markup](image1.png)\n\n![CSS](image3.png)\n\n## \n1. keyboard tab onto the above elements\n2. note that there is no visible focus indication \n\n## \n\nUse the CSS `:focus` pseudo-class to ensure that the element exhibits some focus indication. For example, the following CSS describes how to implement a basic focus outline:\n\n```\na:focus {\n  outline: dotted 1px;\n}\n```\n\nYou can instead opt for a high-visibility focus instead using the CSS border, background, and color properties: \n\n```\na:focus {\n  background-color: black;\n  color: white;\n  border: solid 2px yellow;\n}\n```\n\nAnother solution is to ensure that default browser indication is supported. This is sometimes undone with CSS reset sheets. Do not overrule browser focus indication without otherwise implementing a custom focus indication. For example, do not this `a { outline: none; }`.\n\nFor more information, see [CSS Tricks - Focusing on Focus Styles](https://css-tricks.com/focusing-on-focus-styles/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-108",
    "Summary": "Loading components not announced to screen reader users",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nThe number stepper component uses \"+\" and \"-\" buttons to increase and decrease value from the input field. The buttons have hidden text. It is \"increment\" and \"decrement\" on the \"+\" and \"-\" buttons respectively. \n\nThese terms may be unnecessarily technical. For example, it is more complex than a simple plus icon. Screen reader users may prefer a more simple label, such as \"Minus 1\", and \"Add 1\". The same may be true for voice recognition users. It may be more cumbersome to say \"click increment\" than \"click add\". \n\nThis has been raised as an Additional Issue as the label is technically correct.\n\n## \n\nForms > Number Stepper  \n\n![Number Stepper](image.png)\n \n![Markup](image1.png)\n\n## \n1. inspect the above elements \n2. observe that the technical hidden text. \n \n\n## \n\nProvide a more simple label for the buttons, such as \"Add 1\", \"Minus 1\", \"Increase\", or \"Decrease\". As well, consider adding this text to the button, or adding help text to the buttons. Mention the accessible names of the controls. For example:\n\n```\n<label for=\"howMuch\">How much would you like to transfer</label>\n<span id=\"helpText\">Use to \"Add\" and \"Minus\" buttons to increase and decrease the value, \nor type the preferred amount within the input field</span>\n```\n\nThen use `aria-describedby` to associate the controls with this help text.\n\nFor information on using this attribute, see [MDN - Using the aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute). As well, for more information about spin buttons, see [WAI ARIA - Spin Button](https://www.w3.org/TR/wai-aria-practices/examples/spinbutton/datepicker-spinbuttons.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-25",
    "Summary": "Visual heading text is not marked up as a heading",
    "Success Criteria": "1.4.10: Reflow [AA]",
    "Component": "Table",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nAt 400% browser zoom, there must be no loss in content or functionality. There are examples where this is not supported. At 400% zoom, text on the data grid text is clipped.  This may particularly diminish the user experience for users with low vision.\n\nThis has been raised as a low priority as it is reasonable to expect users can infer that \"direct d...\" is \"direct debit\".\n\n## \n\n**Table (with form controls) > with checkboxes**\n\n![Data grid](image.png)\n\n## \n1. set browser width to 1280 pixels.\n2. zoom in to 400% zoom.\n3. note that some of the data grid's text is clipped. \n\n## \n\nMake sure that all of the content is available when zooming into the page. For example, allow the words \"direct\" and \"debit\" to split onto two lines.\n\nRegarding the resolution, this can be tested with Firefox or Chrome using the [Web Developer Toolbar extension](https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm). Another option is setting the desktop resolution to 1280 x 1024 and maximizing the browser window. For an explanation of this requirement see: [W3 - Understanding Reflow](https://www.w3.org/WAI/WCAG21/Understanding/reflow.html).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-19",
    "Summary": "Input fields are not labelled",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. The graphic may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThe spinner SVG does not have any visible or alternative text that describes it. It is not communicated to assistive technology users. \n\n## \n\nSpinner > Default.\n\n![SVG](image.png)\n\n![markup](image2.png)\n \n## \n1. inspect the non-text content.\n2. confirm that it does not have an appropriate text.\n\n## \n\nProvide an alternative to the non-text content. SVG can be described by using the `<title>` and `<desc>` elements within an `<svg>` container. Note that `aria-labelledby` should be used to reinforce the relationship between `svg` and `title` and make sure the relationship is compatible with older browsers. For example: \n\n```\n<svg role=\"img\" aria-labelledby=\"title\" class=”tcl-spinner” …> \n    <title id=\"title\">Loading</title> \n    <circle role=\"presentation\" class=”tcl-spinner__circle”…/>\n    …\n</svg>\n```\n\nRefer to the [Accessibility Features of SVG](https://www.w3.org/TR/SVG-access/#Equivalent) document for additional information. As well, see [CSS Tricks - Accessible SVGs](https://css-tricks.com/using-svg/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6560-88",
    "Summary": "Disclosure and its label receive focus separately",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Barclays Bank PLC",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThere are elements that are not correctly associated with their labels. They have multiple labels. However, due to the use of `aria-labelledby`, only one label elements is naming the element. \n\n## \n\nForms - Segmented Control (Toggle Buttons) > Uncontrolled, with Disabled Segment\n\n![Toggle button](image1.png)\n\n![Markup](image2.png)\n\n![Speech viewer](image.png)\n \n## \n1. inspect the toggle buttons\n2. view the accessibility properties \n2. note that they are only partially labelled\n\n## \n\nWAI-ARIA provides a grouping role that functions similarly to `fieldset` and `legend`. See the [WAI Tutorials - Grouping elements](https://www.w3.org/WAI/tutorials/forms/grouping/#associating-related-controls-with-wai-aria). For example: \n\n```\n<div role=\"group\" aria-labelledby=\"shipping_head\">\n<div id=\"shipping_head\">Shipping Address:</div>\n  <div>\n    <label for=\"shipping_name\">Shipping Name:</label>\n    <input type=\"text\" name=\"shipping_name\" id=\"shipping_name\">\n  </div>\n</div>\n```\n\nThe WAI-ARIA Practices provide an example of using this [mark-up with a radio group](https://www.w3.org/TR/2017/WD-wai-aria-practices-1.1-20170628/examples/radio/radio-1/radio-1.html).",
    "Votes": 0
  },
  {
    "Issue Id": "4357MH20G-17",
    "Summary": "Splash screen does not have alternative text",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is not expressed with visual cues, it should not be programatically determinable. Otherwise, assistive technology users may be confused with the purpose of the relationship. \n\nThe close button is marked up as a heading which may confuse screen reader users. This is a new issue which has been caused by a fix to issue 4357MH20G - 1. Headings should be used to communicate the structure of the content on the page. As the close button is not used for this purpose, it should not be marked-up as a heading.\n\n## \n\nOn the close button which can be accessed by triggering the T&C button on the top right of the screen. \n\n![Close button](image.png)\n\n## \n1. Navigate through the above example with a screen reader.\n2. Note the button is communicated as a heading\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. As such, the heading structure should not be used on the button.\n\nEnsure that the heading is removed from the button by removing the `UIAccessibilityTraitHeader` trait.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6120-1",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Radio Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe radio buttons are not grouped up programmatically and they therefore lack necessary structure to help screen reader users understand their purpose. Grouping these elements will make enable screen reader users to focus on smaller groups rather than trying to trying to grasp the entire form. \n\n## \n\nOn page 1, at the bottom of the page for selecting a 'reason for redemption'. \n\n![Radio button](image.png)\n\n![Code](image1.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the relationship is not communicated.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\nEnsure that you use `<fieldset>` for containing related form elements and `<legend>` for its heading. \n\nFor example: \n\n```\n<fieldset>\n<legend>We value your business and want to make sure you’re supported in your wealth journey. Please select the reason for your redemption:</legend>\n  <div>\n    <input type=\"radio\"  id=\"lbl\" value=\"txt\" checked>\n    <label for=\"lbl\">I’m buying or renovating a home, or completing another major purchase</label>\n  </div>\n    ...\n</fieldset>\n```\n\nFor more information, see [W3C - Form grouping](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6120-5",
    "Summary": "",
    "Success Criteria": "2.4.4: Link Purpose (In Context) [A]",
    "Component": "Link",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe purpose of links must make sense within the context. This is useful for screen reader users who often navigate through pages using a list of links provided by their screen reader. It can also be time-consuming if keyboard users, in order to understand a page, have to activate links to realise they've opened in a new window. \n\nLinks that open a new window do not make this behaviour known to all users.\n\n## \n\nOn page 2, there is the link \"local HSBC Bank branch\" that opens in a new window, which is not communicated visually.\n\n![Page 2](image1.png)\n\nOn page 3, this can be seen with the \"Please see the applicable Fund Facts document for details\" link, within the tooltip description.\n\n![Page 3](image.png)\n\n## \n1. Inspect the above link. \n2. Note that there is nothing that communicates that it opens in a new window.\n\n## \n\nIt is a requirement of the HSBC Framework that links which open in a new window communicate this to all users. The provision of hidden text is not sufficient to achieve this.\n\nPlease ensure that links communicate this information both visually and programmatically. The recommended techniques to achieve this are text within the link label itself or an icon within the link with the appropriate alternative text. For example: \n\n```\n<a href=\"#\">Please see the applicable Funds Facts document (opens in a new window)</a>\n```\n\n```\n<a href=\"#\">Please see the applicable Funds Facs document <img src=\"...\" alt=\"opens in a new window\"></a>\n```",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6120-3",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology to communicate the relationships to users. Content may otherwise seem unstructured or disorganised.\n\nThe heading levels are illogical. The step tracker text is marked up as a heading. Moreover, the heading which describes the page is marked up as an `<h3>`\n\n## \n\nOn page 1, the \"Sell\" text is at the top of the page and describes overall page content. \n\n![Page 1](image2.png)\n\nOn page 3, at the application step tracker text at the top of the page. \n\nThe \"Confirm your instruction\" text is on the top of the page and describes overall page content. \n\n![Page 3](image.png)\n\n![Headings](image1.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the illogical heading levels.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\n\nThe application step tracker text does not need to be marked up as a heading as it is not used to organise and describe page content. \nRemove the heading `<h2>` markup from the headings. \n\nEnsure that there is a `<h1>` in the page which describes page content. This could be `<h1>Confirm your instructions</h1>`.\n\nFor  more information, see [W3C - Headings](https://www.w3.org/WAI/tutorials/page-structure/headings/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6120-2",
    "Summary": "",
    "Success Criteria": "2.4.1: Bypass Blocks [A]",
    "Component": "Not Applicable",
    "Priority": "High",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThere are pages with working skip links. However, they do not become visible when receiving keyboard focus. As such, sighted keyboard users will be unaware of the link and therefore will be unable to skip to the main content, which can be particularly frustrating if the header contains many links.\n\n## \n\nAt the top of the page, on the skip link. \n\n![Skip link](image1.png)\n\n![Code](image.png)\n\n## \n1. Keyboard tab from the top of the page on the above page(s).\n2. Note that skip link text does not become visible when receiving keyboard focus. \n\n## \n\nCSS can be used to visually style the skip link. While the skip link can be hidden be default, it needs to be visible when it receives focus. This is to benefit sighted keyboard and switch users. Use the `focus` and `active` pseudoclasses to make the link visible when it receives focus. \n\n```\ncss\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  -webkit-clip-path: inset(50%);\n  clip-path: inset(50%);\n  border: 0;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  clip: auto;\n  white-space: normal;\n  -webkit-clip-path: none;\n  clip-path: none;\n}}\n\n```",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_5910-2",
    "Summary": "",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.  \n\nThe \"Secondary\" and \"Tertiary\" buttons have CSS class names defined as buttons and also visually appear as buttons. However, they behave as links, in as much as they navigate users onto a new page. \n\nDepending on the final presentation and functionality associated with components, there may be some confusion about whether these are buttons or links.\n\n## \n\nOn the 'Secondary' and 'Tertiary' buttons on the pinned content banner, at the top of the page. \n\n![Buttons](image1.png)\n\n![Code](image.png)\n\n## \n1. note that they look like buttons\n2. inspect the mark-up and not the button classes \n3. note the anchor tags, which are links\n\n## \n\nIf these behave as links, make it visually obvious that the elements are links. If they are meant to be buttons -- and will perform some action on the page, rather than navigating the user onto a new page -- use button mark-up.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_5910-4",
    "Summary": "",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe pinned content banner that hovers over the main content. This visually implies that the content is separate from the main content. However, this separation is not programmatically determined. Assistive technology users may not clearly understand the structure of the content.\n\nTechnically speaking, the entire top section is contained within 'role=\"banner\"'. However, in terms of regions, the banner does not match the visual layout. There is also placeholder text, such as \"screen reader text\".\n\nThis is not a strict WCAG failure as elegant page regions are not a WCAG requirement, assuming you otherwise have good heading structure.\n\n## \n\nOn the pinned content banner at the top of the page. \n\n![buttons hover](image1.png)\n![jaws region list](image.png)\n\n## \n1. navigate to the banner with a screen reader\n2. observe that it's purpose is not communicated. \n\n## \n\nEnsure that the pinned banner region is programmatically determined. As well, try to match the visual layout. This has three sections. The top black bar, the main navigation, and the pinned banner. For example:\n\n```\n<header>\n// Messaging Banner //\n<nav aria-label=\"Top-level Navigation, Language, Login, and Search\">\n...\n</nav>\n<nav aria-label=\"Main navigation\">\n...\n</nav>\n<nav aria-label=\"Secondary Navigation\">\n...\n</nav> \n</header>\n```\n\nFor more information, see [Web Accessibility Tutorials - Page Regions](https://www.w3.org/WAI/tutorials/page-structure/regions/).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_5910-5",
    "Summary": "",
    "Success Criteria": "Additional Issue",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nThe colour black and white is used on the button \"Secondary\" and \"Tertiary\". If this colour is going to convey meaning, it needs to be programmatically determined. This may include communicating that the button is more or less important, selected, disabled, and so on.\n\nThis has been raised as an additional issue. It is not a WCAG failure. However, when the placeholder content is replaced, it may become a WCAG failure.\n\n## \n\nOn the buttons inside the pinned banner region, at the top of the page. One is black with white text. The other is white with black text.\n\n![secondary and tertiary buttons](image.png)\n\n## \n1. navigate to the mentioned buttons using a screen reader \n2. observe that the purpose of the button is not communicated with respect to the colour\n\n## \n\nIf the colour is going to communicate information about the buttons, such as the state of them, this information needs to be programmatically determined. This could be done with the relevant semantics and ARIA. For example, `disabled` or `aria-current=\"page\"`. It could also be done with hidden text.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-46",
    "Summary": "",
    "Success Criteria": "Additional Issue",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunication by assistive technology or invisible to users.\n\nThere are decorative images with redundant alt text. For example, on page 11, the Instagram graphics have text \"Instagram image\" alt text. This provides no context of the image for screen reader users and those with mobility impairments might find it frustrating to tab through 16 of these images. \n\n## \n\nOn page 11 (News landing page). On the Instagram images carousel. \n\n![Instagram image](image.png)\n\n![Image DOM](image1.png)\n\n## \n1. Inspect the non-text content.\n2. Confirm they have redundant alt text.\n\n## \n\nProvide an alternative to the non-text content. This may involve providing a better description for the images manually to uniquely identify them - in many cases, this alt text should mirror the text displayed visually over the images. The same images that are posted on Instagram have descriptive alt text but this alt text is not being pulled through using the API.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-42",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Table, List",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nThe annual report descriptions lack semantic structure which may make it difficult for screen reader users to understand the structure of the text. \n\n## \n\nOn page 15 (Annual report and accounts). On the tab panels throughout the page, such as the financial report and Unilever sustainable living plan. \n\n![Tab panel](image.png)\n\n![Tab panel DOM](image1.png)\n\n![Sustainable living plan](image2.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the structure is not communicated.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. \nDescription lists (or standard lists) can be used to provide structure and describe each of the financial indicators and respective values in years. \n\nFor example:\n```\n<dl>\n    <dt>Turnover</dt>\n        <dd>\n                 <div class=\"row flex-container\">\n                     <span class=\"ara__highlight__figure ara--19__highlight__figure ara__highlight__figure--focus\">€21.9bn</span>\n                    <span class=\"ara--19__highlight__year\">2019</span>\n                     ...\n         </dd>\n    <dt>Turnover growth</dt>\n    <dd>A drink made from roasted coffee beans.</dd>\n</dl>\n```\n\nOtherwise, a `<table>` structure could be used to communicate this information. \n\nFor further guidance, see [MDN- Description list](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl) and [W3C - Table](https://www.w3.org/WAI/tutorials/tables/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-51",
    "Summary": "",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThere is a redundant `aria-label` on images, which takes precedence over `alt` attributes on images for accessible names. The label itself is not descriptive and is redundant. \n\n## \n\nOn page 15 (Annual reports and accounts). On the images of the year highlights. \n\n![Images with redundant aria label](image.png)\n\n## \n1. Inspect the non-text content.\n2. Confirm that the `aria-label` on the images is redundant.\n\n## \n\nEnsure the redundant `aria-label` from the images are removed as they do not provide more context for screen reader users.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-50",
    "Summary": "",
    "Success Criteria": "1.4.1: Use of Color [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nPerceiving and operating content must not rely on colour alone. People with low vision or people who are colour-blind may struggle to perceive the content.\n\nThe key for performance uses colour to differentiate the current performance state. (On-Plan and Off-Plan). Therefore, users with low vision or users who are colour-blind may find it difficult to perceive this content. \n\n## \n\nOn page 9 (Sustainable living). On the big goals panel. \n\n![Big goals](image.png)\n\n## \n1. Navigate onto the above content.\n2. Observe that it is not understandable without seeing colour.\n\n## \n\nEnsure that colour alone is not required to differentiate elements. Instead, use a pattern or different shapes to differentiate the keys, as it is done with other keys. For more information, see [W3C - Use of color](https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/G111)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-12",
    "Summary": "",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will otherwise announce them without explaining what the user is expected to input.  \n\nControls are described using visual placeholders. However, these are not a substitute for labels. Placeholder text generally has poor contrast and because it disappears as users start typing, it can increase the cognitive load for users unnecessarily.  \n\n## \n\nOn page 6 - Brands: Dove at the \"Start searching for a country\" input field. \n\n![Input field](image.png)\n\n![Code](image2.png)\n\nOn page 16 - Results and presentation at the keyword input field.\n\n![input field](image1.png)\n\n## \n1. Navigate onto the above examples.\n2. Note that they are described using placeholders.\n\n## \n\nEnsure that input fields, buttons, check boxes, etc., are labelled. There are several methods — `label`, `aria-label`, `aria-labelledby`, hidden text, etc. This should be used instead of `placeholder` attribute. \n\nThe W3C provide further guidance. See: [Web Accessibility Tutorials - Labelling Elements](https://www.w3.org/WAI/tutorials/forms/labels/) and [Web Accessibility Tutorials - Grouping Elements](https://www.w3.org/WAI/tutorials/forms/grouping/). Also, please refer to the following link for more information on [why placeholder text can be a barrier for some users](https://www.w3.org/WAI/tutorials/forms/instructions/#placeholder-text).",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-22",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nForm controls are not grouped up using a fieldset, therefore lacking the structure which enables them to be easily perceived by screen reader users. As a result, users may find it difficult to understand which controls are part of a group. \n\n## \n\nOn page 16 - Results and presentation, on the checkboxes and radio button.\n\n![checkboxes](image.png)\n\n![checkboxes DOM](image1.png)\n\n![radio buttons](image2.png)\n\n![radio buttn DOM](image3.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the fieldset structure is not communicated.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Ensure that checkboxes and radio buttons are programmatically grouped. Use a `<fieldset>` as this provides a container for related controls. Use a `<legend>` to provide a heading for the group. E.g. \"Topic\" or \"Date\". \n\nFor further guidance, see [W3C - Grouping controls](https://www.w3.org/WAI/tutorials/forms/grouping/)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-48",
    "Summary": "",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Modal Dialog",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will generally expect to navigate through elements left-to-right and top-to-bottom. Users may not be aware of the new modal, or feel confused when navigating through items in the background. \n\nUser can tab onto interactive elements outside of the modal, where the background has been blurred. This may confuse sighted keyboard users who navigate the page using a keyboard, as items behind a blurred overlay receive focus. \n\nThis has been given a low priority because the user has to Tab through all of the items to the end of the modal or use Shift+Tab to leave the modal for the cookies. For the navigation menu, the user can collapse the panel manually. \n\n## \n\nOn all pages. Triggering the manage cookies button opens a modal that does not trap focus within itself. \n\n![modal](image.png)\n\nOn all pages. The navigation menu on the top of the page. \n\n![](image1.png)\n\n## \n1. Tab through the above pages using just your keyboard.\n2. Observe that the interactive background elements may receive keyboard focus.\n\n## \n\nKeyboard and screen reader focus should be contained in the modal using the techniques below:\n\n* Hide background content that is not currently visible from screen readers using the `aria-hidden` attribute.\n* All actionable elements in the background should be assigned with `tabindex=“-1”` to remove the elements from the focus order.\n* When the modal is closed remove the `aria-hidden` and `tabindex=“-1”` attributes from the background elements so that the user can logically focus onto them.\n\nAlternatively, use the WICG `inert` polyfill. See [WICG inert polyfill on Github](https://github.com/WICG/inert) and [Intro to the inert attribute](https://dev.to/hybrid_alex/intro-to-the-inert-attribute-3d25), which performs the same action.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-26",
    "Summary": "",
    "Success Criteria": "2.5.3: Label in Name [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Desktop",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThere is an input field with a placeholder text that does not match its `name` attribute. This results in voice input technologies being unable to recognise the control using the visual text. E.g. \"(click) keyword\". Whereas, saying \"(click search)\" gives the input as an option. \n\nThe `name` attribute is used by Dragon as there are no alternative labels. This value is set to \"search\".\n\n## \n\nOn page 16 - Results and presentations, at the search input field. \n\n![Search field](image.png)\n\n![Search DOM](image1.png)\n\n## \n1. Navigate onto the above elements with a voice input technology such as Dragon.\n2. Note that an attempt to identify the input field with its visual label does not show the control as an option to click.\n\n## \n\nAdding an associated label (<`label>`) and setting its value to \"Keyword\" would allow voice input users to correctly identify controls. The `placeholder` text or `name` attribute value should be changed accordingly to keep visual and programmatic name consistent. However, placeholder text should not be relied upon for labels as it is not always interpreted by assistive technologies - https://www.w3.org/WAI/tutorials/forms/instructions/.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-1",
    "Summary": "",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Breadcrumb",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe current page for the breadcrumb navigation is not programatically determined. Screen reader users may not be able to identify that a particular link represents the current page. \n\n## \n\nOn all the listed pages. The breadcrumb navigation is visible below the main navigation menu. \n\n![Breadcrumb](image1.png)\n\n![Code](image.png)\n\n## \n1. Navigate onto the breadcrumb navigation with a screen reader.\n2. Note that the current page is not announced.\n\n## \n\nEnsure that the current page is programmatically identified. Use the attribute `aria-current=\"page\"` on the final link. For example:\n\n```\n<ol>\n  <li>\n    <a href=\"/\">Results & Presentation</a>\n  </li>\n  <li>\n    <a href=\"/\" aria-current=\"page\">Results, Presentations & webcasts</a>\n  </li>\n</ol>\n```\n\nFor further guidance, see [W3C - Breadcrumb example](https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-33",
    "Summary": "",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nThe dot pagination provides visual cues to show the current page, but this information is not programmatically determined meaning that assistive technology users may be unable to tell which dot represents the current page. \n\n## \n\nOn Page 14 - Careers: Power of U, in the share your story modal\n\n![Dot pagination](image.png)\n\n![Dot DOM](image1.png)\n\n## \n1. Navigate onto the above element with a screen reader.\n2. Note that the current page is not communicated.\n\n## \n\nEnsure that the current page of the dot pagination is programmatically determined so assistive technology users are aware of this information. \n\nUse `aria-current=\"step\"` on the current step to do so.",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-25",
    "Summary": "",
    "Success Criteria": "1.4.3: Contrast (Minimum) [AA]",
    "Component": "Plain Text",
    "Priority": "Medium",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nColours on the website do not contrast sufficiently.\n\nCertain colours do not meet the contrast ratio of 4:5:1 for normal-sized text, and 3:1 for large text (18pt or 14pt bold). Users without accurate perception of colour or limited vision may struggle to perceive the content.\n\n## \n\nThis can be seen on page 6 (Brand:Dove), on the \"search\" plain text and \"use my location\" link. \n\n![Plain text does not meet a sufficient contrast ratio](image4.png)\n\n![Link with insufficient contrast](image1.png)\n\nOn page 7 (Products and ingredients), on the accordion text on the bottom of the page.\n\n![Plain text lacks sufficient contrast](image2.png)\n\nOn page 11 (News landing page), on the SUBSCRIBE button when it receives keyboard focus\n\nOn page 12 (News article: plastics announcement), on the accordion text on the bottom of the page.\n\n![Plain text lacks sufficient contrast](image3.png)\n\nOn page 16 (Results and presentation), on the search results dates. \n\n![Plain text lacks sufficient contrast](image.png)\n\nOn page 16. On the the keyword placeholder text.\n\n![Placeholder](image5.png)\n\n## \n1. Navigate onto the pages affected.\n2. With a colour contrast analysis tool, confirm that the colours that do not contrast sufficiently.\n\n## \n\nEnsure that the colours on the website contrast sufficiently. The colour contrast ratio between foreground and background colours can be tested with tools such as [Colour Contrast Analyser](https://github.com/ThePacielloGroup/CCAe) and [Contrast Finder](http://contrast-finder.tanaguru.com).\n\nWCAG AA compliant colour palettes can be generated with tools such as [Colorsafe](http://colorsafe.co/) or [Accessible Color Matrix](https://toolness.github.io/accessible-color-matrix/).\n\nFor modifying placeholder text colour, see [MDN - Placeholder text](https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder)",
    "Votes": 0
  },
  {
    "Issue Id": "ADR_6045-2",
    "Summary": "",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Button",
    "Priority": "Low",
    "Devices": "Desktop, Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "Unilever UK LTD",
    "Description": "## \n\nSome users rely on keyboard navigation. These users need a predictable, logical focus order. They will generally expect to navigate through elements left-to-right and top-to-bottom.  \n\nA hidden \"close button\" receives screen reader focus before the side overlay is open. Screen reader users may be confused with the purpose of the element. \n\n## \n\nOn page 9 - Sustainable living on the \"3 big goals\" cards. \n\n![Cards](image.png)\n\n![Opened](image2.png)\n\n![Code](image1.png)\n\n## \n1. Tab through the mentioned instances with a screen reader on.\n2. Observe that hidden elements receive screen reader focus.\n\n## \n\nEnsure that screen reader users cannot focus on hidden content when the overlap is closed. Use `tabindex=\"-1\"` to remove the button from the focus order when the overlay is not opened and `tabindex=\"0\"` when it is open.",
    "Votes": 0
  },
  {
    "Issue Id": "IPAB-2",
    "Summary": "",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Link, Plain Text",
    "Priority": "High",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users rely on swipe navigation. These users need a predictable, logical focus order. They will expect to navigate through elements left-to-right and top-to-bottom. It is not possible to trigger individual links since the entire grouped container receives screen reader focus, and not individual links.\n\n## \n\nOn the 'Find out more about how long your payment will take...' text, in the bottom of the screen.\n\n![Grouped links receiving focus](image.png)\n\nThis can also be seen on the important information section on iOS.\n\n![grouped link receiving focus](image1.png) \n\n## \n1. swipe through the above page\n2. observe that important information links cannot receive screen reader focus individually \n\n## \n\nEnsure that each of the links can be used with a screen reader.   \nIt is not possible to test the name and roles of the elements as they are grouped. Ensure that the links have appropriate link trait.\n\nFor more information, see [BBC Mobile Guidelines - Roles, traits and properties](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/text-equivalents/roles-traits-and-properties)",
    "Votes": 0
  },
  {
    "Issue Id": "IPAB-6",
    "Summary": "",
    "Success Criteria": "1.4.4: Resize text [AA]",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nSome users with low vision use system settings, such as text resizing, to enhance the readability of content. The app does not respond to the Large Text functionality on iOS.\n\nText on the app responds accordingly to the Large Text settings on Android.\n\n## \n\nOn the text elements on page 1. See side by side comparison of the smallest text resize setting and largest. \n\n![Side by side text comparasion](image.png)\n \n## \n1. Navigate onto page 1. \n2. Modify the text size in the phone system settings (iOS and Android) and enable the larger text.\n3. Note that this does not change the size of the text in iOS.  \n \n## \n\nEnsure that text resize is supported on iOS. For more information, see [Apple developer - Supporting Dynamic Text](https://developer.apple.com/library/content/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html#//apple_ref/doc/uid/TP40009542-CH4-SW65).\n\nWhile graphics do not need to conform to resize since iOS version 11 it is also possible to make graphics resize. For more information see [Orange - Graphics resize](http://a11y-guidelines.orange.com/mobile_EN/dev-ios.html#graphical-elements-size) according to this setting. This could be useful for the tooltip graphic.",
    "Votes": 0
  },
  {
    "Issue Id": "IPAB-3",
    "Summary": "",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. The tooltip icon lacks a button role. Screen reader users may not know that the element is interactive.\n\n## \n\nOn the \"Balance info\" tooltip button on the top right of the screen. \n\n![Tooltip lacks role](image.png)\n\n## \n1. navigate onto the above elements with a screen reader \n2. note that their purpose and operation are not entirely communicated.\n\n## \n\nEnsure that buttons are marked up with the `UIAccessibilityTraitButton` to communicate the button' role to screen readers. For more information, see [BBC Mobile Guidelines - Roles, traits and properties](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/text-equivalents/roles-traits-and-properties).",
    "Votes": 0
  },
  {
    "Issue Id": "IPAB-5",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "HSBC Bank plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\nText is not marked up as a heading. \n\n## \n\nOn the \"Generate authorisation code\" heading. This text is not marked up as a heading. Text on this page which are styled similarly are marked up as a heading.\n\n![headings not marked up](image.png)\n\n## \n1. navigate through the above examples with a screen reader\n2. note the relationship is not communicated\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. Ensure that this text is marked up as a heading such as the \"Payee details\" heading, which are styled similarly. \n\nFor more information, see [BBC Mobile Guidelines - Heading trait](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/text-equivalents/roles-traits-and-properties)",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-44",
    "Summary": "",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \nThe status message provides information to the user on the success or results of an action, on the waiting state of an application, on the progress of a process, or on the existence of the error. The users should be aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.\n\nThe chat has not been marked up using live regions, and as a result, new messages which may be sent by the adviser are not announced to screen reader users. Live regions allow the app to communicate changes to the user journey directly to the user during in midst of them using certain functionalities. \n\nThe different journeys include: \n1. If a user has begun chatting and is waiting for an adviser's response. \n2. If a user has begun chatting and the adviser disconnects.\n3. If a user has begun chatting and the chat has ended. \n   * This is if the user ends the chat (page 19) or if the adviser ends the chat. \n4. if a user has begun chatting and they decide to go back to the dashboard. \n5. If a user has not begun chatting and is waiting for an adviser to join (Within chat screen).\n\n## \n\nThe user has begun chatting with an adviser and is waiting for them to respond. (Page 17).\n\n![Waiting for adviser](image.png)\n\nThe user has begun chatting and the adviser disconnects (and chat ended). \n\n![Status messages](notifications.png)\n\nThe user has begun chatting with an adviser and decided to use the navigation menu on the top-left of the app to go back to the dashboard. When the adviserhas sent a message, the notification message is visually shown but is not announced to screen reader. (Page 18).\n\n![Status message](image1.png)\n\n## \n1. Navigate to user journeys mentioned above with screen reader.\n2. Confirm that dynamic changes to the screen is not announced.\n\n## \n\nWe have emailed Gensys regarding chat accessibility and if they can provide us with resources. However, we have had no response yet. For more details, you should get in touch with them to fix accessibility issues found on page 17. \n\n**N.B.** Be careful not to overwhelm your users with too many notifications. \n\nEnsure that the status messages for user journeys mentioned are announced to the screen reader users. \n\n**On android** You can specify to a view that it is a live region, it means that its content is subject to change dynamically and should in this case notify the Accessibility API. This will generate TalkBack vocalisation. Ideally, the user would want to read the entire message before a new vocalisation is triggered by messages. Therefore, it would be recommended to set the live region to polite. The argument `ACCESSIBILITY_LIVE_REGION_POLITE` can be passed into the [`setAccessibilityLiveRegion()`](https://a11y-guidelines.orange.com/mobile_EN/dev-android.html#live-region-dynamic-content-) method to do so. \n\n**On iOS** [`UIAccessibilityPostnotification`](https://a11y-guidelines.orange.com/mobile_EN/dev-ios.html#notify-a-content-change) notify content change can be used to announce changes on demand.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-22",
    "Summary": "",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nSome screen reader users rely on swipe navigation. These users need a predictable, logical focus order. They will expect that no visually hidden elements receive focus, except when additional information is required.  \n\nVisually hidden elements receive screen reader focus when swiping across the page which could confuse users.\n\n## \n\nOn Android, there is just one instance of this issue on the Pay Bill page. There is a graphic element receiving focus after the \"Please confirm amount\" text.\n\n![Pay Bill - Hidden element receives screen reader focus](graphic.png)\n\nOn iOS, several instances may be found across the Pay Bill page: Four text items, a button and an image.\n\n![Pay Bill - Hidden elements receiving focus](image1.png)\n![Pay Bill - Hidden elements receiving focus (2)](image.png)\n\nNote that these are just examples, and on iOS the issue may be found on all pages listed.\n\n## \n1. Swipe through the above pages with TalkBack.\n2. Observe that the hidden element receives screen reader focus.\n\n## \n\nEnsure that these elements are removed from the focus order. In this case, they are unnecessary and do not add any content or functionality to the page. Therefore, these should be removed from the page.  Check the markup and remove the unnecessary code.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-24",
    "Summary": "",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Input Field",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nSome users rely on screen-reader navigation; these users need a predictable, logical focus order. The automatically moving focus may confuse screen reader users while inputting form fields.\n\n**N.B.** This could also be a usability benefit, hence it is a low priority issue. \nSee article by [BBC on managing focus](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/forms/managing-focus)\n\n## \n\nIn the 'Electricity' section of the meter readings, this issue occurs when a user is inputting their meter reading values into the form fields. When the user inputs a number into the field, the screen reader focus automatically moves to the next input field. \n![Automatically moving focus while inputting form fields](input.png)\n\n## \n1. Navigate to the screen with TalkBack active.\n2. Input a number into the input field.\n2. Observe that the screen reader focus moves automatically.\n\n## \n\nThe screen reader focus should not move automatically to the next input field on form input.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-32",
    "Summary": "",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \nStatus message provides information to the user on the success or results of an action, on the waiting state of an application, on the progress of a process, or on the existence of error. The users should be aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.\n\nToggling a checkbox shows a visual message of how many checkbox items are currently selected. However, this information is not conveyed to screen reader users. Without this message, the purpose of the checkbox can be confusing to screen reader users. \n\n## \nThis issue occurs in the announcements page. The visual status message appears on the top of the screen, containing text on how many items are selected. \n![](image.png)\n\n## \n1. Toggle the checkbox stated above with TalkBack.\n2. Confirm that the number of check boxes selected is not announced. \n\n## \n\nEnsure that on checkbox toggle, the status message '{1...2...3} messages selected' is be announced to the screen reader users. You can specify to a view that it is a “live” region, it means that its content is subject to change dynamically and should in this case notify the Accessibility API. This will generate TalkBack vocalizations. \n\nFor more details, see [Orange a11y guidelines](https://a11y-guidelines.orange.com/mobile_EN/dev-android.html#live-region-dynamic-content-)",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-28",
    "Summary": "",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Button",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nInteractive components need a programmatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation. \n\nThe tabs found on the Meter readings page are not marked up appropriately. Therefore, the `selected` state of the component is not announced by the screen reader. This may confuse screen reader users as they may not be aware of the currently selected tab.\n\n## \n\nThis issue can be found on the Meter readings page, on the 'Both', 'Electricity' and 'Gas' buttons. \n\n![Meter readings - Tabs](image.png)\n\n## \n1. Navigate onto the above elements with a screen reader.\n2. Note that the trait of such elements are not entirely communicated.\n\n## \n\nEnsure that the selected state is communicated to all users. For this end, we recommend that native tabs are used.\n\nOn iOS, use an `UITabBar` component. As explained in the `UITabBar` [documentation](https://developer.apple.com/documentation/uikit/uitabbar), these are already accessible:\n\nWith VoiceOver enabled on an iOS device, when a user touches a tab in a tab bar, VoiceOver reads the title of the tab, its position in the bar, and whether it is selected. For example in the app, you might hear “Selected, Both, Button” or “Electricity, Button”, etc. \n\nIf you believe that this solution is too difficult to implement, see [BBC - Mobile a11y guidelines](https://www.bbc.co.uk/guidelines/futuremedia/accessibility/mobile/text-equivalents/roles-traits-and-properties) for making the component accessible by using `UIAccessibilityTrait`.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-41",
    "Summary": "",
    "Success Criteria": "Additional Issue",
    "Component": "Not Applicable",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Cognitive",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nThe swipe-to-delete gesture has become a fairly widely adopted gesture, involving dragging the finger across an item. Such a gesture resembles the physical action of crossing off a list item with a pen. While this feature helps to prioritise content and remove something visually from small mobile screens, it can also raises usability concerns. \n\nFor example, there is a lack of a visual cue which makes it unclear whether or not the swipe can be used. There may be users who are unaware of the the gesture and some who are unable to use it. \n\n## \n\nOn any announcement of the Announcements page.\n\n![Announcements - Swiping left to delete announcement](image.png)\n\n## \n1. Navigate to screen mentioned.\n2. Observe that it may not be obvious that swipe-to-delete can be used.\n\n## \n\nEnsure that you provide additional information that the gesture can be used. This may be implemented as a text element next to the concerned pages, or you can dedicate a specific page regarding various accessibility & usability support. \n\nIt is recommended that you keep the behaviour consistent within the app if you are going to use more swiping gestures such as this, as users may expect the same behaviour for a given gesture.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-36",
    "Summary": "",
    "Success Criteria": "Additional Issue",
    "Component": "Plain Text",
    "Priority": "Low",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \nMultiple paragraphs of text is grouped under one section instead of being broken into different paragraphs. As a result, screen readers announce the entire text in one go. This may be an inconvenience for users who may wish to hear a specific part of the text or want to skip some parts. \n\n## \nThis issue has occurred on the 'Dial meter - Electricity meter' page on the text. \n![Text is grouped under one element](content.png)\n\n## 1. Navigate with TalkBack to mentioned page.\n2. Observe the text being announced in one element.\n\n## \nEnsure that the text can be focused and announced by the screen reader as individual paragraphs, instead of as a large group of text.  Separate paragraphs of text across multiple text elements and do not group them under a single target container.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-8",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Checkbox, Input Field, Dropdown",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nAcross the app, there are elements, such as input fields, dropdown lists, and checkboxes, which are not associated with the respective labels. As a result, the label is not automatically announced when the user swipes into an input field. \n\n## \n\nOn both iOS and Android, input fields on the Login and Chat Questionnaire pages are not associated to their visual labels. This also occurs on the dropdown list on the Chat Questionnaire page, and checkboxes on the Login page (both devices) and the Announcements page (Android only).\n\n![Login - Elements are not associated with labels](image.png)\n![Chat questionnaire - Elements are not associated with labels](image1.png)\n![Announcements - Elements are not associated with labels (Android)](assoc.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the relationship is not communicated.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics. This means that when the user swipes into the input field, the associated label text must announce. \nFor more details, see [W3 - Info and Relationships](https://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-programmatic.html)\n\n**HTML:** For example, on page 6, the id value of `for` within a `label` can be used to associate it to the id of an `input` element.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-9",
    "Summary": "",
    "Success Criteria": "4.1.2: Name, Role, Value [A]",
    "Component": "Link",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nInteractive components need a programatically determined name, role, and value. Assistive technology may otherwise be unable to parse them and users may not perceive their purpose and operation.\n\nSome elements in the app do not have a programmatically determined role.\n\n## \n\nOn both iOS and Android, this issue may be found in some links across the app. For example, on the \"Help me log in\", \"Forgotten password?\" and \"Don't have a password?\" elements, on the login page.\n\n![Login - Elements do not have a role](image.png)\n\nThis may also be found for both devices on the navigation menu. None of the links has a role.\n\n![Menu - Item elements do not have a role](items.png)\n\nAdditionally there are some instances that occur in one device only. For example, on Android, this also occurs on the \"Terms and conditions\" element, which is on the bottom of the view.\n\n![Login - Element does not have a role value (Android)](roleLinkTC.png)\n\nOn Android, there is an issue with the notification button which is on the top-right corner of the app in page 3. \n\n![Dashboard - Element does not have a role value (Android)](notification.png)\n\nOn iOS, this can also be found across the Dashboard, as well as on pages with lists of links, such as the Meter type  and Contact us pages.\n\n![Dashboard - Elements do not have a role](image2.png)\n![Meter type - Elements do not have a role](image1.png)\n\nPlease note that these are just some examples of the issue found.\n\n## \n1. Navigate onto the above elements with a screen reader.\n2. Note that their purpose and operation are not entirely communicated.\n\n## \n\nEnsure all elements have a role. This will help screen reader users to understand the functionality and purpose of each element.\n\n**On iOS:** Elements can be given traits to identify their role to assistive technologies. You can use the `UIAccessibilityTraitLink` trait to provide markup to the text as a link.\n\n**Role for button:** All elements can have an `accessibilityLabel`. This needs to be set explicitly for a button unless it already has text. In this app, the buttons do not have text.  \n \n**On Android:** Element roles are inherited in standard widgets and extensions of standard widgets. These roles can then be identified by assistive technologies. For proprietary widgets, you can use `contentDescription` attribute to provide the extra information.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-55",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Table",
    "Priority": "Low",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programmatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nOn the 'Top-up by card' page, individual text elements have been marked up using individual semantic tables. And as a result, redundant information such as *'Table start...'*, *'Table end...'* is announced to screen reader users for each of the elements, which can confuse screen reader users. \n\n## \n\nOn the Top-up by card page, under both \"Electricity\" and \"Gas\" sections. The following elements have been marked-up as two-entries tables: \"Enter amount\" and \"£\" input field; \"Last top up on 12th Dec 19\" and respective value; and \"Average weekly/ monthly spend' and their respective data.  \n\n![Top up by card - Elements marked-up as tables](image.png)\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the relationship communicated is redundant.\n\n## \n\nEnsure that you remove the table markup for the examples mentioned above. Tables should only be used where data needs to be presented visually - tables should not be used for just layout purposes.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-50",
    "Summary": "",
    "Success Criteria": "4.1.3: Status Messages [AA]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nThe status message provides information to the user on the success or results of an action, on the waiting state of an application, on the progress of a process, or on the existence of the error. The users should be aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.\n\nWhen the user navigates to a new screen such as page 22, some of the content (Balance for gas or electricity) in the app is still loading. However, this information is not conveyed to screen reader users. As a result, screen reader users may struggle to understand what their current balances are. \n\n## \n\nOn balance dashboard page - the balance is loading,\n![Balance dashboard loading](image.png)\n## \n1. Navigate to the screen mentioned above with the screen reader.\n2. Confirm that loading message is not announced.\n\n## \n\nEnsure that the loading status is announced to the screen readers users so visually impaired users are notified of this information. This announcement should be provided if the user attempts to navigate the screen while a component is still loading and the visual cues such as the loading dots are active.\n\n**Hybrid:** \nIf this screen is built using HTML code, you can do as follows: \n* `<span role=\"status\">Loading, please wait</span>` \n* This can be hidden using CSS if you do not wish to have this text on the screen. \n\nWhen the loading is finished, use another message, such as `<span role=\"status\">Loading complete</span>` unless this is unnecessary due to change of screen reader focus. \n\n**On Android:** You can specify to a view that it is a live region, it means that its content is subject to change dynamically and should, in this case, notify the Accessibility API. This will generate TalkBack vocalisation. Ideally, the user would want to read the entire message before a new vocalisation is triggered by messages. Therefore, it would be recommended to set the live region to polite. The argument `ACCESSIBILITY_LIVE_REGION_POLITE` can be passed into the [`setAccessibilityLiveRegion()`](https://a11y-guidelines.orange.com/mobile_EN/dev-android.html#live-region-dynamic-content-) method to do so. \n\nUse your own judgment when implementing these as there might not be a long load time when the app is pushed live. You may find that it would be a good idea to only trigger the message if a component takes longer than a few seconds to load. \nFor more details, see [W3- Status messages](https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html)",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-16",
    "Summary": "",
    "Success Criteria": "1.3.1: Info and Relationships [A]",
    "Component": "Heading",
    "Priority": "Medium",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nIf a relationship between elements is expressed with visual cues, it also needs to be programatically determinable. This enables assistive technology, such as screen readers and speech recognition software, to communicate the relationships to users. Content may otherwise be presented as unstructured or disorganised.\n\nText that appears as a heading should be marked up as a heading so that the text is announced as a heading to screen reader users.  This helps them visualise the structure of a page. This also allows them to navigate the screen via headings using Local context menu in TalkBack, which is very helpful on certain screens with multiple sections grouped together. \n\n## \n\nThe heading text is not marked up as a heading on all of the screens on Android. This refers to the text in the top of the app - which is next to the hamburger menu. In some screens, there are also visual headings within the body of the screen, which have also not been marked up as a heading. \n\n'Login' heading text.\n![Visual heading text is not marked up as a heading](loginHead.png)\n\n'Dashboard' heading text.\n![Visual heading text is not marked up as a heading](dashHead.png)\n\n'Bill breakdown' heading text. On this screen, 'Balance..' or 'Your bill breakdown' could also be marked up as headings. \nNote that there may be many more instances on other screens where headings could be marked up. \n![Visual heading text is not marked up as a heading](billHead.png)\n\n\n## \n1. Navigate through the above examples with a screen reader.\n2. Note the relationship is not communicated.\n\n## \n\nAny relationship presented through visual cues must also confer that relationship through the appropriate semantics.\nOn Android: you can use the `android:accessibilityHeading` property, but note that this is only available on Android 9.0 and above.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-26",
    "Summary": "",
    "Success Criteria": "3.3.2: Labels or Instructions [A]",
    "Component": "Input Field",
    "Priority": "Medium",
    "Devices": "Mobile (Android)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nIf inputs are requested or required, controls must be labelled. Screen readers will announce otherwise, them without explaining what the user is expected to input. If inputs are complex, provide instructions. Having to use trial and error may disadvantage those with cognitive impairments. \n\nThere are unlabelled input fields, and as a result, only 'Edit box' is announced for each input field. \n\n## \n\nThis issue occurs in the input fields which are contained in the 'Electricity' section of the Meter readings page. None of the input fields have a label associated to them. \n\n ![Input fields not have a label](label.png)\n\n## \n1. Navigate onto the above examples using TalkBack.\n2. Observe that they do not include labels and instructions for all users.\n\n## \n\nEnsure that all input fields are correctly labelled and announced to screen reader users.\n\n**On Android:** \n* You can use `EditText` to provide explicit labels for fields.\n* For `EditTexts` , use an `android:hint` attribute to indicate the purpose of the text field. In this case, this would be information such as 'Enter {first, second, third...} meter reading number into the input field. \n**N.B.** An `android:contentDescription` should not be used as a content label for editable Views.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-57",
    "Summary": "",
    "Success Criteria": "2.4.3: Focus Order [A]",
    "Component": "Not Applicable",
    "Priority": "Medium",
    "Devices": "Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nSome users rely on screen reader navigation. These users need a predictable, logical focus order. They will not expect to navigate through the same elements more than once.\n\nThe link label 'Last top up and the average spent' receives screen reader focus before the container (which has the label and plus button) which toggles the disclosure open. Note that activating the link itself causes the disclosure to open and close very quickly. This interruption of the announcement could confuse screen reader users. \n \n## \n\nOn the 'Top-up by card' page > Electricity/Gas section > 'Last top-up and average spend' section.\n\n![Top up by card - Label receiving focus](image1.png)\n![Top up by card - Link receiving focus](image.png)\n![Top up by card - Disclosure expanded](image2.png)\n\n## \n1. Swipe onto the examples mentioned using TalkBack.\n2. Observe that the focus order is not logical.\n\n## \n\nA single element should be in focus, such as a [disclosure](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details). This can be used to provide extra information about somewhere only when a button is toggled. This should be implemented such that the states such as expanded or collapsed are announced correctly to screen reader users. The button itself should have a descriptive label to help screen reader users identify its purpose. \n\n**N.B.** Activating the link label should not toggle the extra information, as the link text can receive focus on iOS and this can temporarily open the extra information section. \n\nOnce issue 3901SR19B-56 is fixed, the focus should stay on this element when activated as this is the expected behaviour for a disclosure element.",
    "Votes": 0
  },
  {
    "Issue Id": "3901SR19B-18",
    "Summary": "",
    "Success Criteria": "1.1.1: Non-text content [A]",
    "Component": "Image",
    "Priority": "Medium",
    "Devices": "Mobile (Android), Mobile (iOS)",
    "Users Affected": "Vision",
    "Customer": "E.ON UK plc",
    "Description": "## \n\nNon-text content is missing appropriate alternatives. This is required for the content to be understood by all users. Images, icons, and so on, may otherwise be miscommunicated by assistive technology or invisible to users.\n\nThe splash screen does not have an alternative text. As a result, the text content which is on the image cannot be identified by screen reader and therefore users with visual impairments cannot perceive the image.  \n\nOn iOS, the splash screen is announced as \"Requesting data, please wait\", while on Android it is announced as \"Splash screen\".\n\n## \n\nThis happens when you change to a different screen. During the intermission, the splash screen is shown. \n\n![Splash screen does not have an alternative text](splash.png)\n\n## \n1. Inspect the non-text content.\n2. Confirm that it does not have an appropriate alternative. \n\n## \n\nEnsure that a label is added to the splash screen.\n\n**On iOS:** Use the attribute `accessibilityLabel` to add a descriptive label to the splash screen. You can also provide supplementary information using the `accessibilityHint` property.\n\n**On Android:** UI elements can be labelled using the `contentDescription` XML attribute. For more details, see the Android Developer [Label UI Elements](https://developer.android.com/guide/topics/ui/accessibility/apps) article for more information.\n\nA good format for the description is: 'Splash screen... e.on 100% Renewable electricity as standard for 100% of our residential customers'. Having the description before 'Splash screen' could lead to more confusion for screen reader users if the announcement is interrupted by the app moving to another page.",
    "Votes": 0
  }
]